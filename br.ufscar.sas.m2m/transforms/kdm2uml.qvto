modeltype kdm "strict" uses kdm('http://www.eclipse.org/MoDisco/kdm/kdm');
modeltype code "strict" uses code('http://www.eclipse.org/MoDisco/kdm/code');
modeltype core "strict" uses core('http://www.eclipse.org/MoDisco/kdm/core');
modeltype action "strict" uses action('http://www.eclipse.org/MoDisco/kdm/action');
modeltype source "strict" uses source('http://www.eclipse.org/MoDisco/kdm/source');
modeltype structure "strict" uses structure('http://www.eclipse.org/MoDisco/kdm/structure');
modeltype uml "strict" uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation ModelCode(in sourceModel :kdm, out targetModel: uml);

configuration property modelName: String;  


main() {

	 sourceModel.objectsOfType(StructureModel)-> map Model2Model();
}

mapping StructureModel :: Model2Model():Model when {self.name = modelName}{

	name :="UML Component Diagram";
	self.structureElement -> select(c | c.oclIsKindOf(Subsystem))[Subsystem] -> forEach(p){
		result.nestedPackage +=	p->map kdmSubsystem2UmlPackage();
	};
	
	self.structureElement -> select(c | c.oclIsKindOf(Component))[Component] -> forEach(p){
		result.nestedPackage +=	p->map kdmComponent2UmlPackage();
	}
	
}

mapping Subsystem:: kdmSubsystem2UmlPackage(): uml::Package {
	init{log(self.name +","+ self.stereotype->asSequence()->first().name)}
	name := self.name;
	nestedPackage += self.structureElement -> select(c | c.oclIsKindOf(Component))[Component] ->  map kdmComponent2UmlPackage();
	self -> any(c| c.aggregated ->notEmpty()) -> aggregated -> forEach(t) {
	
		result.packagedElement += t-> map aggregated2dependency();		
	};
}

mapping Component:: kdmComponent2UmlPackage(): uml::Package {
	init{log(self.name +","+ self.stereotype->asSequence()->first().name)}
	name := self.name;
	nestedPackage += self.structureElement -> select(c | c.oclIsKindOf(Component))[Component] ->  map kdmComponent2UmlPackage();
	self -> any(c| c.aggregated ->notEmpty()) -> aggregated -> forEach(t){ 
	
		result.packagedElement += t-> map aggregated2dependency();
	};
}

mapping  AggregatedRelationship::aggregated2dependency():uml::Dependency {
	
	client := self._from.late resolve(uml::Package);
	supplier := self.to.late resolve(uml::Package);

}