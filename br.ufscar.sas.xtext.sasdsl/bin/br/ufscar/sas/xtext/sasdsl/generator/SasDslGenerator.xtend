/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.generator

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleController
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMonitor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleAnalyzer
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRulePlanner
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleExecutor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMO

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SasDslGenerator extends AbstractGenerator {

	var structureElementPath = new HashMap<String,String>();
	var outAggregatedPath = new HashMap<String,String>();
	var inAggregatedPath = new HashMap<String,String>();
	var aggregatedPath = new HashMap<String,String>();

	var depth = newArrayList(5);

	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (e : resource.allContents.toIterable.filter(ArchitectureDefinition))
		{
			this.createPath(e)
			fsa.generateFile("PlannedArchitecture.xmi", e.compile)
			fsa.generateFile("Constraints.ocl", e.compile2)
		}
	}
	
	def createPath(ArchitectureDefinition architecture){
		
		depth.clear();
		depth.add(0,0)
		depth.add(1,0)
		depth.add(2,0)
		depth.add(3,0)
		depth.add(4,0)
		
		
		var managing = architecture.managing
		for (var i=0; i< managing.size; i++){
			
			var level0 = depth.get(0)
			var man = managing.get(i)
			structureElementPath.put(man.name, "//@model.1/@structureElement."+ level0)
			
			
			var mcontroller = man.managerController
			for (var j=0; j<mcontroller.size ; j++){
				var level1=depth.get(1)
				var mcon = mcontroller.get(j)
				structureElementPath.put(mcon.name,"//@model.1/@structureElement."+ level0 +"/" + "@structureElement."+ level1)
				
				var controller = mcon.controller
				for (var k=0; k< controller.size ; k++){
					
					var level2 = depth.get(2)
					var con = controller.get(k)
					structureElementPath.put(con.name,"//@model.1/@structureElement."+ level0 +
														"/" + "@structureElement."+ level1 +
														 "/" + "@structureElement."+ level2)
	
					var monitor = con.monitor
					for (var l=0; l< monitor.size; l++){
						
						var level3 = depth.get(3)
						var mon = monitor.get(l)
						structureElementPath.put(mon.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						level3++
						depth.set(3,level3)
					}
					
					var analyzer = con.analyzer
					for (var l=0; l< analyzer.size; l++){
						
						var level3 = depth.get(3)
						var ana = analyzer.get(l)
						structureElementPath.put(ana.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						level3++
						depth.set(3,level3)
					}
					
					var planner = con.planner
					for (var l=0; l< planner.size; l++){
						
						var level3 = depth.get(3)
						var pla = planner.get(l)
						structureElementPath.put(pla.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						level3++
						depth.set(3,level3)
					}
					
					var executor = con.executor
					for (var l=0; l< executor.size; l++){
						
						var level3 = depth.get(3)
						var exe = executor.get(l)
						structureElementPath.put(exe.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						level3++
						depth.set(3,level3)
					}
					
					var knowledge = con.knowledge
					for (var l=0; l< knowledge.size; l++){
						
						var level3 = depth.get(3)
						var kno = knowledge.get(l)
						structureElementPath.put(kno.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						
						var ri = kno.referenceInput
						for (var m = 0; m < ri.size; m++)
						{
							var level4 = depth.get(4);
							var r = ri.get(m)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3 +
															"/" + "@structureElement."+ level4)					
							level4++
							depth.set(4,level4)
						}
						
						level3++
						depth.set(3,level3)
					}

					level2++
					depth.set(2,level2)
					
				}
				
				level1++
				depth.set(1,level1)
				
			}
			
			
			var controller= man.controller
			for (var k=0; k< controller.size ; k++){
					
					var level1 = depth.get(1)
					var con = controller.get(k)
					structureElementPath.put(con.name,"//@model.1/@structureElement."+ level0 +
														 "/" + "@structureElement."+ level1)
	
					var monitor = con.monitor
					for (var l=0; l< monitor.size; l++){
						
						var level2 = depth.get(2)
						var mon = monitor.get(l)
						structureElementPath.put(mon.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						level2++
						depth.set(2,level2)
					}
					
					var analyzer = con.analyzer
					for (var l=0; l< analyzer.size; l++){
						
						var level2 = depth.get(2)
						var ana = analyzer.get(l)
						structureElementPath.put(ana.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						level2++
						depth.set(2,level2)
					}
					
					var planner = con.planner
					for (var l=0; l< planner.size; l++){
						
						var level2 = depth.get(2)
						var pla = planner.get(l)
						structureElementPath.put(pla.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						level2++
						depth.set(2,level2)
					}
					
					var executor = con.executor
					for (var l=0; l< executor.size; l++){
						
						var level2 = depth.get(2)
						var exe = executor.get(l)
						structureElementPath.put(exe.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						level2++
						depth.set(2,level2)
					}
					
					var knowledge = con.knowledge 
					for (var l=0; l< knowledge.size; l++){
						
						var level2 = depth.get(2)
						var kno = knowledge.get(l)
						structureElementPath.put(kno.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						
						var ri = kno.referenceInput
						for (var m = 0; m < ri.size; m++)
						{
							var level3 = depth.get(3);
							var r = ri.get(m)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 +
															"/" + "@structureElement."+ level3)					
							level3++
							depth.set(3,level3)
						}
						
						level2++
						depth.set(2,level2)
					}

					level1++
					depth.set(1,level1)
					
				}
				
			level0++
			depth.set(0,level0)
		}
		
		depth.set(1,0)
		depth.set(2,0)
		depth.set(3,0)
		depth.set(4,0)
		
		var managed = architecture.managed
		for (var i=0; i< managed.size; i++){
			
			var level0 = depth.get(0)
			var man = managed.get(i)
			structureElementPath.put(man.name, "//@model.1/@structureElement."+ level0)
			
			var sensor = man.sensor
			for (var k = 0; k < sensor.size ; k++)
			{
				var level1 = depth.get(1)
				var sen = sensor.get(k)
				structureElementPath.put(sen.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
			
				level1++
				depth.set(1,level1)			
			}
			
			var effector = man.effector
			for (var k = 0; k < effector.size ; k++)
			{
				var level1 = depth.get(1)
				var efe = effector.get(k)
				structureElementPath.put(efe.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
			
				level1++
				depth.set(1,level1)			
			}
			
			var mea = man.measuredOutput
			for (var k = 0; k < mea.size ; k++)
			{
				var level1 = depth.get(1)
				var me = mea.get(k)
				structureElementPath.put(me.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
			
				level1++
				depth.set(1,level1)			
			}
			
			level0++
			depth.set(0,level0)
			
		}
		
		var rule = architecture.rules
		var rController = 0
		var rMonitor =0
		var rAnalyzer=0
		var rPlanner=0
		var rExecutor=0
		var rMO=0
		var relation = " relation='//@model.0/@codeElement.0/@codeElement.1/@actionRelation.0 " + 
							      "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.1 " +
								  "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.2 " + 
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.0 " + 
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.1 " +
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.2' " +
								  "density='6'/> \n"
		
		for (var i=0; i< rule.size ; i++){
			
			var r = rule.get(i)
			if (r.access.equals("can-access"))
			{
				if (r instanceof DSLRuleController){
					
					var pathAggregated = outAggregatedPath.get(r.controller1.name)
					if (pathAggregated !== null)
					{
						pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
						pathAggregated = pathAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '"
						outAggregatedPath.replace(r.controller1.name,pathAggregated)
						
						if (r.controller2 !== null)
						{
							var pathInAggregated = inAggregatedPath.get(r.controller2.name)
							if (pathInAggregated !== null)
							{
								pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
								pathInAggregated = pathInAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.replace(r.controller2.name, pathInAggregated)
							}
							else
							{
								pathInAggregated = "inAggregated='" + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.put(r.controller2.name,pathInAggregated)
							}
						}
					}
					else
					{
						pathAggregated = "outAggregated='" + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '"
						outAggregatedPath.put(r.controller1.name,pathAggregated)
						
						if (r.controller2 !==null)
						{
							var pathInAggregated = inAggregatedPath.get(r.controller2.name)
							if (pathInAggregated !== null)
							{
								pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
								pathInAggregated = pathInAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.replace(r.controller2.name, pathInAggregated)
							}
							else
								inAggregatedPath.put(r.controller2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
						}
					}
					rController++
					var aggregated = aggregatedPath.get(r.controller1.name); 
					if (aggregated !== null)
					{
						if (r.controller2 !== null)
							aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.controller1.name) +"' to='" + structureElementPath.get(r.controller2.name) + "'" + relation			
					
						aggregatedPath.replace(r.controller1.name, aggregated)
					}
					else
					{
						if (r.controller2 !== null)
							aggregated = "<aggregated from='" + structureElementPath.get(r.controller1.name) +"' to='" + structureElementPath.get(r.controller2.name) + "'" + relation
						
						aggregatedPath.put(r.controller1.name, aggregated)
					}
				}
				else {
					if (r instanceof DSLRuleMonitor){
					
						var pathAggregated = outAggregatedPath.get(r.monitor.name)
						if (pathAggregated !== null)
						{
							pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
							pathAggregated = pathAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '"
							outAggregatedPath.replace(r.monitor.name,pathAggregated)
							
							if (r.analyzer !== null)
							{
								var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
								if (pathInAggregated !== null)
								{	
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.analyzer.name,pathInAggregated)
								}
							}
							if (r.knowledge !== null)
							{
								var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";			
									inAggregatedPath.put(r.knowledge.name,pathInAggregated)
								}
							}	
							if (r.sensor !== null)
							{	
								var pathInAggregated = inAggregatedPath.get(r.sensor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.sensor.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.sensor.name,pathInAggregated)
								}
							}
						}
						else
						{
							pathAggregated = "outAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '"
							outAggregatedPath.put(r.monitor.name,pathAggregated)
							
							if (r.analyzer !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.analyzer.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}					
							if (r.knowledge !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
						
							if (r.sensor !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.sensor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.sensor.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.sensor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
							
						}
						rMonitor++
						
						var aggregated = aggregatedPath.get(r.monitor.name); 
						if (aggregated !== null)
						{
							if (r.analyzer !== null)	
								aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
							else
								if (r.knowledge !== null)
									aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
								else
									if (r.sensor !== null)
										aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.sensor.name) + "'" + relation
							
							aggregatedPath.replace(r.monitor.name, aggregated)
						}
						else
						{
							if (r.analyzer !== null)	
								aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
							else
								if (r.knowledge !== null)
									aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
								else
									if (r.sensor !== null)
										aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.sensor.name) + "'" + relation
							
							aggregatedPath.put(r.monitor.name, aggregated)
						}
					
						
						
					}
					else {
						if (r instanceof DSLRuleAnalyzer) {
							
								var pathAggregated = outAggregatedPath.get(r.analyzer.name)
								if (pathAggregated !== null)
								{
									pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
									pathAggregated = pathAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '"
									outAggregatedPath.replace(r.analyzer.name,pathAggregated)
									
									if (r.monitor !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.monitor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.monitor.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.monitor.name,pathInAggregated)
										}
									}	
									if (r.knowledge !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
										if (pathInAggregated !== null)
										{	
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.knowledge.name,pathInAggregated)
										}
									}
									if (r.planner !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.planner.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.planner.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.planner.name,pathInAggregated)
										}
									}	
									if (r.rreference !== null)
									{	
										var pathInAggregated = inAggregatedPath.get(r.rreference.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.rreference.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.rreference.name,pathInAggregated)
										}
									}
									
								}
								else
								{
									pathAggregated = "outAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '"
									outAggregatedPath.put(r.analyzer.name,pathAggregated)
									if (r.monitor !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.monitor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.monitor.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.monitor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
									}					
									if (r.knowledge !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.planner !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.planner.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.planner.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.planner.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.rreference !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.rreference.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.rreference.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.rreference.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
											
									
								}
								rAnalyzer++
								
								var aggregated = aggregatedPath.get(r.analyzer.name); 
								if (aggregated !== null)
								{
									if (r.monitor !== null)	
										aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation
									else
										if (r.knowledge !== null)
											aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
										else
											if (r.planner !== null)
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.rreference !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.rreference.name) + "'" + relation
									
									aggregatedPath.replace(r.analyzer.name, aggregated)
								}
								else
								{
									if (r.monitor !== null)	
										aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
									else
										if (r.knowledge !== null)
											aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
										else
											if (r.planner !== null)
												aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.rreference !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.rreference.name) + "'" + relation
									
									aggregatedPath.put(r.analyzer.name, aggregated)
								}
							
						}
						else {
							
							if (r instanceof DSLRulePlanner) {
								
										var pathAggregated = outAggregatedPath.get(r.planner.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '"
											outAggregatedPath.replace(r.planner.name,pathAggregated)
											
											if (r.analyzer !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.analyzer.name,pathInAggregated)
												}
											}	
											if (r.knowledge !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{	
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.knowledge.name,pathInAggregated)
												}
											}
											if (r.executor !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.executor.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.executor.name,pathInAggregated)
												}
											}	
											
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '"
											outAggregatedPath.put(r.planner.name,pathAggregated)
											
											if (r.analyzer !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.analyzer.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))												
											}					
											if (r.knowledge !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
											}
											if (r.executor !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.executor.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.executor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
											}
											
										}
										rPlanner++
										
										var aggregated = aggregatedPath.get(r.planner.name); 
										if (aggregated !== null)
										{
											if (r.analyzer !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.executor !== null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation
												
											aggregatedPath.replace(r.planner.name, aggregated)
										}
										else
										{
											if (r.analyzer !== null)	
												aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.executor !== null)
														aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation
											
											aggregatedPath.put(r.planner.name, aggregated)
										}
							}
							else
							{
								if (r instanceof DSLRuleExecutor ) {
									
										var pathAggregated = outAggregatedPath.get(r.executor.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '"
											outAggregatedPath.replace(r.executor.name,pathAggregated)
										
											if (r.planner !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.planner.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.planner.name,pathInAggregated)
												}
											}	
											if (r.knowledge !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{	
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.knowledge.name,pathInAggregated)
												}
											}
											if (r.effector !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.effector.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.effector.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.effector.name,pathInAggregated)
												}
											}	
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '"
											outAggregatedPath.put(r.executor.name,pathAggregated)
											
											if (r.planner !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.planner.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.planner.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))										
											}					
											if (r.knowledge !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))								
											}
											if (r.effector !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.effector.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.effector.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.effector.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))									
											}							
										}
										rExecutor++
										
										var aggregated = aggregatedPath.get(r.executor.name); 
										if (aggregated !== null)
										{
											if (r.planner !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.effector !==null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.effector.name) + "'" + relation
												
											aggregatedPath.replace(r.executor.name, aggregated)
										}
										else
										{
											if (r.planner !== null)	
												aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.effector !== null)
														aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.effector.name) + "'" + relation
											aggregatedPath.put(r.executor.name, aggregated)
										}
								}
								else {
									
									if (r instanceof DSLRuleMO ) {
									
										var pathAggregated = outAggregatedPath.get(r.sensor.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '"
											outAggregatedPath.replace(r.sensor.name,pathAggregated)
											
											if (r.measured !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.measured.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.replace(r.measured.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.put(r.measured.name,pathInAggregated)
												}
											}
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '"
											outAggregatedPath.put(r.sensor.name,pathAggregated)		
											if (r.measured !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.measured.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.replace(r.measured.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.measured.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))												
											}			
										}
										rMO++
										
										var aggregated = aggregatedPath.get(r.sensor.name); 
										if (aggregated !== null)
										{
											if (r.sensor !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.sensor.name) +"' to='" + structureElementPath.get(r.measured.name) + "'" + relation
										
											aggregatedPath.replace(r.sensor.name, aggregated)
										}
										else
										{
											if (r.sensor !== null)	
												aggregated = "<aggregated from='" + structureElementPath.get(r.sensor.name) +"' to='" + structureElementPath.get(r.measured.name) + "'" + relation
											
											aggregatedPath.put(r.sensor.name, aggregated)
										}
									}
								}
							}
						}
					}
				}
			}	
		}
	}
	
	def compile(ArchitectureDefinition architectureDefinition){
				
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:action="http://www.eclipse.org/MoDisco/kdm/action" xmlns:code="http://www.eclipse.org/MoDisco/kdm/code" xmlns:kdm="http://www.eclipse.org/MoDisco/kdm/kdm" xmlns:source="http://www.eclipse.org/MoDisco/kdm/source" xmlns:structure="http://www.eclipse.org/MoDisco/kdm/structure">
			<kdm:Segment name="Planned Architecture">
			<model xsi:type="code:CodeModel" name="Elements Instances">
				<codeElement xsi:type="code:Module" name="Module Instance">
					<codeElement xsi:type="code:CodeElement" name="codeElement Instance">
			       		<codeRelation xsi:type="code:Extends"/>
			       		<codeRelation xsi:type="code:Implements"/>
			        	<codeRelation xsi:type="code:HasValue"/>
			      	</codeElement>
					<codeElement xsi:type="action:ActionElement" name="actionElement Instance">
			        	<actionRelation xsi:type="action:Calls"/>
			        	<actionRelation xsi:type="action:UsesType"/>
			        	<actionRelation xsi:type="action:Creates"/>
			    	</codeElement>
				</codeElement>
			</model>
			<extension xsi:type="kdm:ExtensionFamily" name="Adaptive System Domain">
			     <stereotype name="Monitor" type="structure:Component"/>
			     <stereotype name="Analyzer" type="structure:Component"/>
			     <stereotype name="Planner" type="structure:Component"/>
			     <stereotype name="Executor" type="structure:Component"/>
			     <stereotype name="Knowledge" type="structure:Component"/>
			     <stereotype name="Reference Input" type="structure:Component"/>
			     <stereotype name="Measured Output" type="structure:Component"/>
			     <stereotype name="Control Loop Manager" type="structure:Component"/>
			     <stereotype name="Control Loop" type="structure:Component"/>
			     <stereotype name="Sensor" type="structure:Component"/>
			     <stereotype name="Effector" type="structure:Component"/>
			     <stereotype name="Managing Subsystem" type="structure:Subsystem"/>
			     <stereotype name="Managed Subsystem" type="structure:Subsystem"/>
			</extension>
			<model xsi:type="structure:StructureModel" name="ArchitecturalView_">
				«FOR arch : architectureDefinition.managing»
				<structureElement xsi:type="structure:Subsystem" name="«arch.name»" stereotype="/0/@extension.0/@stereotype.11">
					«FOR mcontroller: arch.managerController»
						<structureElement xsi:type="structure:Component" name="«mcontroller.name»" stereotype="/0/@extension.0/@stereotype.7">
							«FOR controller: mcontroller.controller»
							<structureElement xsi:type="structure:Component" name="«controller.name»" stereotype="/0/@extension.0/@stereotype.8" «outAggregatedPath.get(controller.name)»>
								«aggregatedPath.get(controller.name)»
								«FOR monitor: controller.monitor»
								<structureElement xsi:type="structure:Component" name="«monitor.name»" stereotype="/0/@extension.0/@stereotype.0" «outAggregatedPath.get(monitor.name)» «inAggregatedPath.get(monitor.name)»>
									«aggregatedPath.get(monitor.name)»					
								</structureElement>
								«ENDFOR»
								«FOR analyzer: controller.analyzer»
								<structureElement xsi:type="structure:Component" name="«analyzer.name»" stereotype="/0/@extension.0/@stereotype.1" «outAggregatedPath.get(analyzer.name)» «inAggregatedPath.get(analyzer.name)»>
									«aggregatedPath.get(analyzer.name)»											
								</structureElement>
								«ENDFOR»
								«FOR planner: controller.planner»
								<structureElement xsi:type="structure:Component" name="«planner.name»" stereotype="/0/@extension.0/@stereotype.2" «outAggregatedPath.get(planner.name)» «inAggregatedPath.get(planner.name)»>
									«aggregatedPath.get(planner.name)»																	
								</structureElement>
								«ENDFOR»
								«FOR executor: controller.executor»
								<structureElement xsi:type="structure:Component" name="«executor.name»" stereotype="/0/@extension.0/@stereotype.3" «outAggregatedPath.get(executor.name)» «inAggregatedPath.get(executor.name)»>
									«aggregatedPath.get(executor.name)»																						
								</structureElement>
								«ENDFOR»
								«FOR knowledge: controller.knowledge»
								<structureElement xsi:type="structure:Component" name="«knowledge.name»" stereotype="/0/@extension.0/@stereotype.4" «inAggregatedPath.get(knowledge.name)»>
									«FOR referenceInput: knowledge.referenceInput»
									<structureElement xsi:type="structure:Component" name="«referenceInput.name»" stereotype="/0/@extension.0/@stereotype.5"/>
									«ENDFOR»																											
								</structureElement>
								«ENDFOR»
							</structureElement>
						«ENDFOR»
						</structureElement>
					</structureElement>
					«ENDFOR»
					«FOR controller: arch.controller»
					<structureElement xsi:type="structure:Component" name="«controller.name»" stereotype="/0/@extension.0/@stereotype.8"  «outAggregatedPath.get(controller.name)»>
						«aggregatedPath.get(controller.name)»
						«FOR monitor: controller.monitor»
						<structureElement xsi:type="structure:Component" name="«monitor.name»" stereotype="/0/@extension.0/@stereotype.0" «outAggregatedPath.get(monitor.name)» «inAggregatedPath.get(monitor.name)»>
							«aggregatedPath.get(monitor.name)»												
						</structureElement>
						«ENDFOR»
						«FOR analyzer: controller.analyzer»
						<structureElement xsi:type="structure:Component" name="«analyzer.name»" stereotype="/0/@extension.0/@stereotype.1" «outAggregatedPath.get(analyzer.name)» «inAggregatedPath.get(analyzer.name)»>
							«aggregatedPath.get(analyzer.name)»																		
						</structureElement>
						«ENDFOR»
						«FOR planner: controller.planner»
						<structureElement xsi:type="structure:Component" name="«planner.name»" stereotype="/0/@extension.0/@stereotype.2" «outAggregatedPath.get(planner.name)» «inAggregatedPath.get(planner.name)»>
							«aggregatedPath.get(planner.name)»																								
						</structureElement>
						«ENDFOR»
						«FOR executor: controller.executor»
						<structureElement xsi:type="structure:Component" name="«executor.name»" stereotype="/0/@extension.0/@stereotype.3" «outAggregatedPath.get(executor.name)» «inAggregatedPath.get(executor.name)»>
							«aggregatedPath.get(executor.name)»																													
						</structureElement>
						«ENDFOR»
						«FOR knowledge: controller.knowledge»
						<structureElement xsi:type="structure:Component" name="«knowledge.name»" stereotype="/0/@extension.0/@stereotype.4" «inAggregatedPath.get(knowledge.name)»>
							«FOR referenceInput: knowledge.referenceInput»
							<structureElement xsi:type="structure:Component" name="«referenceInput.name»" stereotype="/0/@extension.0/@stereotype.5" «inAggregatedPath.get(referenceInput.name)» />
							«ENDFOR»																											
						</structureElement>
						«ENDFOR»
					</structureElement>
					«ENDFOR»
				</structureElement>
				«ENDFOR»
			
				«FOR arch : architectureDefinition.managed»
				<structureElement xsi:type="structure:Subsystem" name="«arch.name»" stereotype="/0/@extension.0/@stereotype.12">
					«FOR sensor : arch.sensor»
					<structureElement xsi:type="structure:Component" name="«sensor.name»" stereotype="/0/@extension.0/@stereotype.9" «outAggregatedPath.get(sensor.name)» «inAggregatedPath.get(sensor.name)»>
						«aggregatedPath.get(sensor.name)»				
					</structureElement>			
					«ENDFOR»
					«FOR effector : arch.effector»
					<structureElement xsi:type="structure:Component" name="«effector.name»" stereotype="/0/@extension.0/@stereotype.10" «inAggregatedPath.get(effector.name)»>
													
					</structureElement>			
					«ENDFOR»
					«FOR measuredOutput : arch.measuredOutput»
					<structureElement xsi:type="structure:Component" name="«measuredOutput.name»" stereotype="/0/@extension.0/@stereotype.6" «inAggregatedPath.get(measuredOutput.name)»>
																	
					</structureElement>			
					«ENDFOR»
				</structureElement>			
				«ENDFOR»
			</model>
			</kdm:Segment>	
		</xmi:XMI>
		'''
		
	}
	
	def compile2(ArchitectureDefinition architectureDefinition){
		
		'''
		
		
		'''
		
		
		
	}
}
