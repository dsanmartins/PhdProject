grammar br.ufscar.sas.xtext.sasdsl.SasDsl with org.eclipse.xtext.common.Terminals

generate sasDsl "http://www.ufscar.br/sas/xtext/sasdsl/SasDsl"

ArchitectureDefinition:
	'Architecture' name=ID '{' 
					   managing += DSLManaging+
					   managed += DSLManaged+ 
	'}'  
	'Rules' '{' 
				rules += DSLRules*
				dCDecl += DCDecl*
	'}'  
;
	
DSLRules:
	
	 DSLRuleController | DSLRuleMonitor | DSLRuleAnalyzer |  DSLRulePlanner | DSLRuleExecutor | DSLRuleMO | DSLRuleMController | DSLRuleKnowledge
;

DSLRuleMController:
	
	('loopManager' mcontroller1 = [DSLManagerController] access=('must-use' | 'must-not-use') 'loopManager' mcontroller2 = [DSLManagerController] ';') 
;

DSLRuleController:
	
	('loop' controller1=[DSLController] access=('must-use' | 'must-not-use') 'loop' controller2 = [DSLController] ';') 
;

DSLRuleMonitor:
	
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'monitor' monitor2 = [DSLMonitor] ';') |
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'analyzer' analyzer = [DSLAnalyzer] ';') | 
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'planner' planner = [DSLPlanner] ';') |
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'executor' executor = [DSLExecutor] ';') |
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'knowledge' knowledge = [DSLKnowledge] ';') |
	( 'monitor' monitor=[DSLMonitor] access=('must-use' | 'must-not-use') 'sensor' sensor = [DSLSensor] ';') 
;

DSLRuleAnalyzer:
	
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'monitor' monitor = [DSLMonitor] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'analyzer' analyzer2 = [DSLAnalyzer] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'planner' planner = [DSLPlanner] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'executor' executor = [DSLExecutor] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'knowledge' knowledge = [DSLKnowledge] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'reference-input' rreference = [DSLReferenceInput] ';') |
	('analyzer' analyzer=[DSLAnalyzer] access=('must-use' | 'must-not-use') 'alternative' shalt = [DSLAlternative] ';') 
	
;

DSLRulePlanner:
	
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'monitor' monitor = [DSLMonitor] ';') |
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'analyzer' analyzer = [DSLAnalyzer] ';') |
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'planner' planner2 = [DSLPlanner] ';') |
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'executor' executor = [DSLExecutor] ';') |
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'knowledge' knowledge = [DSLKnowledge] ';') |
	('planner' planner=[DSLPlanner] access=('must-use' | 'must-not-use') 'alternative' shalt = [DSLAlternative] ';')
;

DSLRuleExecutor:
		
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'monitor' monitor = [DSLMonitor] ';') |	
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'analyzer' analyzer = [DSLAnalyzer] ';') |
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'planner' planner = [DSLPlanner] ';') |	
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'executor' executor2 = [DSLExecutor] ';') |
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'knowledge' knowledge = [DSLKnowledge] ';') |
	('executor' executor=[DSLExecutor] access=('must-use' | 'must-not-use') 'effector' effector = [DSLEffector] ';') 
;

DSLRuleKnowledge:
	
	('knowledge' knowledge=[DSLKnowledge] access=('must-use' | 'must-not-use') 'monitor' monitor = [DSLMonitor] ';') |	
	('knowledge' knowledge=[DSLKnowledge] access=('must-use' | 'must-not-use') 'analyzer' analyzer = [DSLAnalyzer] ';') |
	('knowledge' knowledge=[DSLKnowledge] access=('must-use' | 'must-not-use') 'planner' planner = [DSLPlanner] ';') |	
	('knowledge' knowledge=[DSLKnowledge] access=('must-use' | 'must-not-use') 'executor' executor = [DSLExecutor] ';') 
;

DSLRuleMO:
	
	('sensor' sensor=[DSLSensor] access=('must-use' | 'must-not-use') 'measured-output' measured = [DSLMeasuredOutput] ';') 
;


DSLManaging: 
	
	'Managing' name=ID '{' 
		
		managerController += DSLManagerController*
		controller += DSLController*
	
	'}'
;

DSLManaged:
	
	'Managed' name=ID '{'
	
		sensor += DSLSensor*
		effector += DSLEffector*
		measuredOutput +=DSLMeasuredOutput*
		structureElements += DCLStructureElement* 
	'}'
;

DSLManagerController:
	
	'LoopManager' name=ID  '{'
		
		controller += DSLController+
	
	'}'
;

DSLController:
	
	'Loop' name=ID (domain = DSLDomainRule)? '{'
	
		monitor += DSLMonitor*
		analyzer += DSLAnalyzer*
		planner += DSLPlanner*
		executor += DSLExecutor*
		knowledge += DSLKnowledge*

	'}'
;

DSLDomainRule:
	
	value= (ID | 'withDomainRules')
;

DSLMonitor:
	
	'Monitor'  name=ID ';'
;

DSLAnalyzer:
	
	'Analyzer' name=ID  ';'
;

DSLPlanner: 
	
	'Planner' name=ID ';'
;

DSLExecutor: 
	
	'Executor' name=ID  ';'
;

DSLKnowledge: 
	
	'Knowledge' name=ID '{'
	
		referenceInput += DSLReferenceInput*
		shalt  += DSLAlternative*
	
	'}'
;

DSLSensor: 
	
	'Sensor' name=ID ';'
;

DSLEffector: 
	
	'Effector' name=ID ';'
;
  
DSLReferenceInput:
	
	'ReferenceInput'  name=ID ';'
;

DSLMeasuredOutput:
	
	'MeasuredOutput' name=ID ';'
;

DSLAlternative:
	
	'Alternative' name= ID ';'
;

DCLStructureElement: DCLLayer | DCLComponent | DCLSubSystem | DCLModule | DCLComponentInterface
	
;
 
DCLLayer:

 	'layer' name=ID ',' 'level' level=INT ((',' 'inLayer: ' layer=[DCLStructureElement]) | (',''inSubSystem: ' subSystem=[DCLStructureElement])| (',''inComponent: ' component=[DCLStructureElement]))? ';'
;
 
DCLComponent:

	'component' name=ID ((',' 'inLayer: ' layer=[DCLStructureElement]) | (',''inSubSystem: ' subSystem=[DCLStructureElement]))? ';'
;
 	
DCLComponentInterface:
 	
 	'interface' name=ID 'ofComponent ' component=[DCLStructureElement] (',' 'type: ' interfaceType=InterfaceType ) ';'
;
 
InterfaceType:

 	interfaceTypeName = ('provided' | 'required')
;
 
DCLSubSystem:

 	'subSystem' name=ID (',' 'inSubSystem: ' subSystem=[DCLStructureElement])? ';' 
;
 
DCLModule:
 	
 	'module' name=ID ';'
;
 
DCDecl: (only=Only t=[DCLStructureElement|FQN] can=Can elementType=ElementType type = [DCLStructureElement|FQN] ';') | 
 	     (t=[DCLStructureElement|FQN] cannot=Cannot elementType=ElementType type = [DCLStructureElement|FQN] ';') |
 	     (t=[DCLStructureElement|FQN] can=Can elementType=ElementType type = [DCLStructureElement|FQN] ';') |
 	     (t=[DCLStructureElement|FQN] can=Can elementType=ElementType only2=Only2 type = [DCLStructureElement|FQN] ';') |
 	     (t=[DCLStructureElement|FQN] must=Must entityType=EntityType type = [DCLStructureElement|FQN] ';');

FQN: ID ("." ID)*; 
 
Only:
	
 	only='only'
;
 
Can:

 	can='can-'
;
 
Cannot:
	
 	cannot='cannot-'
;

Only2:
	
 	only2='-only'
;	

Must:
	
  	must='must-'
;

ElementType: 
        
    BasicType | EntityType
;
   
BasicType:

   typeName= ('access' | 'declare' | 'handle' | 'create' | 'depend')
;
     
EntityType: 
	
	entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation')
;



