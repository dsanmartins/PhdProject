/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.generator;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManagerController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMO;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRulePlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRules;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSelfHealingAlt;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SasDslGenerator extends AbstractGenerator {
  private HashMap<String, String> structureElementPath = new HashMap<String, String>();
  
  private HashMap<String, String> outAggregatedPath = new HashMap<String, String>();
  
  private HashMap<String, String> inAggregatedPath = new HashMap<String, String>();
  
  private HashMap<String, String> aggregatedPath = new HashMap<String, String>();
  
  private ArrayList<Integer> depth = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(5));
  
  private ArrayList<DSLManaging> lManaging = new ArrayList<DSLManaging>();
  
  private ArrayList<DSLManaged> lManaged = new ArrayList<DSLManaged>();
  
  private ArrayList<DSLManagerController> lMController = new ArrayList<DSLManagerController>();
  
  private ArrayList<DSLController> lController = new ArrayList<DSLController>();
  
  private ArrayList<DSLMonitor> lMonitor = new ArrayList<DSLMonitor>();
  
  private ArrayList<DSLAnalyzer> lAnalyzer = new ArrayList<DSLAnalyzer>();
  
  private ArrayList<DSLPlanner> lPlanner = new ArrayList<DSLPlanner>();
  
  private ArrayList<DSLExecutor> lExecutor = new ArrayList<DSLExecutor>();
  
  private ArrayList<DSLEffector> lEffector = new ArrayList<DSLEffector>();
  
  private ArrayList<DSLKnowledge> lKnowledge = new ArrayList<DSLKnowledge>();
  
  private ArrayList<DSLSensor> lSensor = new ArrayList<DSLSensor>();
  
  private ArrayList<DSLMeasuredOutput> lMOutput = new ArrayList<DSLMeasuredOutput>();
  
  private ArrayList<DSLReferenceInput> lRInput = new ArrayList<DSLReferenceInput>();
  
  private ArrayList<DSLSelfHealingAlt> lAlternative = new ArrayList<DSLSelfHealingAlt>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<ArchitectureDefinition> _filter = Iterables.<ArchitectureDefinition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ArchitectureDefinition.class);
    for (final ArchitectureDefinition e : _filter) {
      {
        this.createPath(e);
        fsa.generateFile("PlannedArchitecture.xmi", this.compile(e));
        fsa.generateFile("Constraints.ocl", this.compile2(e));
      }
    }
  }
  
  public void createPath(final ArchitectureDefinition architecture) {
    this.depth.clear();
    this.depth.add(0, Integer.valueOf(0));
    this.depth.add(1, Integer.valueOf(0));
    this.depth.add(2, Integer.valueOf(0));
    this.depth.add(3, Integer.valueOf(0));
    this.depth.add(4, Integer.valueOf(0));
    EList<DSLManaging> managing = architecture.getManaging();
    for (int i = 0; (i < managing.size()); i++) {
      {
        Integer level0 = this.depth.get(0);
        DSLManaging man = managing.get(i);
        this.structureElementPath.put(man.getName(), ("//@model.1/@structureElement." + level0));
        this.lManaging.add(man);
        EList<DSLManagerController> mcontroller = man.getManagerController();
        for (int j = 0; (j < mcontroller.size()); j++) {
          {
            Integer level1 = this.depth.get(1);
            DSLManagerController mcon = mcontroller.get(j);
            this.structureElementPath.put(mcon.getName(), (((("//@model.1/@structureElement." + level0) + "/") + "@structureElement.") + level1));
            this.lMController.add(mcon);
            EList<DSLController> controller = mcon.getController();
            for (int k = 0; (k < controller.size()); k++) {
              {
                Integer level2 = this.depth.get(2);
                DSLController con = controller.get(k);
                this.structureElementPath.put(con.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lController.add(con);
                EList<DSLMonitor> monitor = con.getMonitor();
                for (int l = 0; (l < monitor.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLMonitor mon = monitor.get(l);
                    this.structureElementPath.put(mon.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lMonitor.add(mon);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLAnalyzer> analyzer = con.getAnalyzer();
                for (int l = 0; (l < analyzer.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLAnalyzer ana = analyzer.get(l);
                    this.structureElementPath.put(ana.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lAnalyzer.add(ana);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLPlanner> planner = con.getPlanner();
                for (int l = 0; (l < planner.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLPlanner pla = planner.get(l);
                    this.structureElementPath.put(pla.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lPlanner.add(pla);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLExecutor> executor = con.getExecutor();
                for (int l = 0; (l < executor.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLExecutor exe = executor.get(l);
                    this.structureElementPath.put(exe.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lExecutor.add(exe);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLKnowledge> knowledge = con.getKnowledge();
                for (int l = 0; (l < knowledge.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLKnowledge kno = knowledge.get(l);
                    this.structureElementPath.put(kno.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lKnowledge.add(kno);
                    EList<DSLReferenceInput> ri = kno.getReferenceInput();
                    for (int m = 0; (m < ri.size()); m++) {
                      {
                        Integer level4 = this.depth.get(4);
                        DSLReferenceInput r = ri.get(m);
                        this.structureElementPath.put(r.getName(), ((((((((((((("//@model.1/@structureElement." + level0) + 
                          "/") + "@structureElement.") + level1) + 
                          "/") + "@structureElement.") + level2) + 
                          "/") + "@structureElement.") + level3) + 
                          "/") + "@structureElement.") + level4));
                        this.lRInput.add(r);
                        level4++;
                        this.depth.set(4, level4);
                      }
                    }
                    EList<DSLSelfHealingAlt> selfHeal = kno.getShalt();
                    for (int s = 0; (s < selfHeal.size()); s++) {
                      {
                        Integer level4 = this.depth.get(3);
                        DSLSelfHealingAlt r = selfHeal.get(s);
                        this.structureElementPath.put(r.getName(), ((((((((((((("//@model.1/@structureElement." + level0) + 
                          "/") + "@structureElement.") + level1) + 
                          "/") + "@structureElement.") + level2) + 
                          "/") + "@structureElement.") + level3) + 
                          "/") + "@structureElement.") + level4));
                        this.lAlternative.add(r);
                        level4++;
                        this.depth.set(4, level4);
                      }
                    }
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                level2++;
                this.depth.set(2, level2);
              }
            }
            level1++;
            this.depth.set(1, level1);
          }
        }
        EList<DSLController> controller = man.getController();
        for (int k = 0; (k < controller.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLController con = controller.get(k);
            this.structureElementPath.put(con.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            this.lController.add(con);
            EList<DSLMonitor> monitor = con.getMonitor();
            for (int l = 0; (l < monitor.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLMonitor mon = monitor.get(l);
                this.structureElementPath.put(mon.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lMonitor.add(mon);
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLAnalyzer> analyzer = con.getAnalyzer();
            for (int l = 0; (l < analyzer.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLAnalyzer ana = analyzer.get(l);
                this.structureElementPath.put(ana.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lAnalyzer.add(ana);
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLPlanner> planner = con.getPlanner();
            for (int l = 0; (l < planner.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLPlanner pla = planner.get(l);
                this.structureElementPath.put(pla.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lPlanner.add(pla);
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLExecutor> executor = con.getExecutor();
            for (int l = 0; (l < executor.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLExecutor exe = executor.get(l);
                this.structureElementPath.put(exe.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lExecutor.add(exe);
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLKnowledge> knowledge = con.getKnowledge();
            for (int l = 0; (l < knowledge.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLKnowledge kno = knowledge.get(l);
                this.structureElementPath.put(kno.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                this.lKnowledge.add(kno);
                EList<DSLReferenceInput> ri = kno.getReferenceInput();
                for (int m = 0; (m < ri.size()); m++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLReferenceInput r = ri.get(m);
                    this.structureElementPath.put(r.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lRInput.add(r);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLSelfHealingAlt> selfHeal = kno.getShalt();
                for (int s = 0; (s < selfHeal.size()); s++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLSelfHealingAlt r = selfHeal.get(s);
                    this.structureElementPath.put(r.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    this.lAlternative.add(r);
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                level2++;
                this.depth.set(2, level2);
              }
            }
            level1++;
            this.depth.set(1, level1);
          }
        }
        level0++;
        this.depth.set(0, level0);
      }
    }
    this.depth.set(1, Integer.valueOf(0));
    this.depth.set(2, Integer.valueOf(0));
    this.depth.set(3, Integer.valueOf(0));
    this.depth.set(4, Integer.valueOf(0));
    EList<DSLManaged> managed = architecture.getManaged();
    for (int i = 0; (i < managed.size()); i++) {
      {
        Integer level0 = this.depth.get(0);
        DSLManaged man = managed.get(i);
        this.structureElementPath.put(man.getName(), ("//@model.1/@structureElement." + level0));
        this.lManaged.add(man);
        EList<DSLSensor> sensor = man.getSensor();
        for (int k = 0; (k < sensor.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLSensor sen = sensor.get(k);
            this.structureElementPath.put(sen.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            this.lSensor.add(sen);
            level1++;
            this.depth.set(1, level1);
          }
        }
        EList<DSLEffector> effector = man.getEffector();
        for (int k = 0; (k < effector.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLEffector efe = effector.get(k);
            this.structureElementPath.put(efe.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            this.lEffector.add(efe);
            level1++;
            this.depth.set(1, level1);
          }
        }
        EList<DSLMeasuredOutput> mea = man.getMeasuredOutput();
        for (int k = 0; (k < mea.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLMeasuredOutput me = mea.get(k);
            this.structureElementPath.put(me.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            this.lMOutput.add(me);
            level1++;
            this.depth.set(1, level1);
          }
        }
        level0++;
        this.depth.set(0, level0);
      }
    }
    EList<DSLRules> rule = architecture.getRules();
    int rMController = 0;
    int rController = 0;
    int rMonitor = 0;
    int rAnalyzer = 0;
    int rPlanner = 0;
    int rExecutor = 0;
    int rMO = 0;
    String relation = ((((((" relation=\'//@model.0/@codeElement.0/@codeElement.1/@actionRelation.0 " + 
      "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.1 ") + 
      "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.2 ") + 
      "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.0 ") + 
      "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.1 ") + 
      "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.2\' ") + 
      "density=\'6\'/> \n");
    for (int i = 0; (i < rule.size()); i++) {
      {
        DSLRules r = rule.get(i);
        boolean _equals = r.getAccess().equals("must-use");
        if (_equals) {
          if ((r instanceof DSLRuleController)) {
            String pathAggregated = this.outAggregatedPath.get(((DSLRuleController)r).getController1().getName());
            if ((pathAggregated != null)) {
              int _length = pathAggregated.length();
              int _minus = (_length - 1);
              pathAggregated = pathAggregated.substring(0, _minus);
              String _get = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
              String _plus = (pathAggregated + _get);
              String _plus_1 = (_plus + "/@aggregated.");
              String _plus_2 = (_plus_1 + Integer.valueOf(rController));
              String _plus_3 = (_plus_2 + " \'");
              pathAggregated = _plus_3;
              this.outAggregatedPath.replace(((DSLRuleController)r).getController1().getName(), pathAggregated);
              DSLController _controller2 = ((DSLRuleController)r).getController2();
              boolean _tripleNotEquals = (_controller2 != null);
              if (_tripleNotEquals) {
                String pathInAggregated = this.inAggregatedPath.get(((DSLRuleController)r).getController2().getName());
                if ((pathInAggregated != null)) {
                  int _length_1 = pathInAggregated.length();
                  int _minus_1 = (_length_1 - 1);
                  pathInAggregated = pathInAggregated.substring(0, _minus_1);
                  String _get_1 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
                  String _plus_4 = (pathInAggregated + _get_1);
                  String _plus_5 = (_plus_4 + "/@aggregated.");
                  String _plus_6 = (_plus_5 + Integer.valueOf(rController));
                  String _plus_7 = (_plus_6 + " \'");
                  pathInAggregated = _plus_7;
                  this.inAggregatedPath.replace(((DSLRuleController)r).getController2().getName(), pathInAggregated);
                } else {
                  String _get_2 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
                  String _plus_8 = ("inAggregated=\'" + _get_2);
                  String _plus_9 = (_plus_8 + "/@aggregated.");
                  String _plus_10 = (_plus_9 + Integer.valueOf(rController));
                  String _plus_11 = (_plus_10 + " \'");
                  pathInAggregated = _plus_11;
                  this.inAggregatedPath.put(((DSLRuleController)r).getController2().getName(), pathInAggregated);
                }
              }
            } else {
              String _get_3 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
              String _plus_12 = ("outAggregated=\'" + _get_3);
              String _plus_13 = (_plus_12 + "/@aggregated.");
              String _plus_14 = (_plus_13 + Integer.valueOf(rController));
              String _plus_15 = (_plus_14 + " \'");
              pathAggregated = _plus_15;
              this.outAggregatedPath.put(((DSLRuleController)r).getController1().getName(), pathAggregated);
              DSLController _controller2_1 = ((DSLRuleController)r).getController2();
              boolean _tripleNotEquals_1 = (_controller2_1 != null);
              if (_tripleNotEquals_1) {
                String pathInAggregated_1 = this.inAggregatedPath.get(((DSLRuleController)r).getController2().getName());
                if ((pathInAggregated_1 != null)) {
                  int _length_2 = pathInAggregated_1.length();
                  int _minus_2 = (_length_2 - 1);
                  pathInAggregated_1 = pathInAggregated_1.substring(0, _minus_2);
                  String _get_4 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
                  String _plus_16 = (pathInAggregated_1 + _get_4);
                  String _plus_17 = (_plus_16 + "/@aggregated.");
                  String _plus_18 = (_plus_17 + Integer.valueOf(rController));
                  String _plus_19 = (_plus_18 + " \'");
                  pathInAggregated_1 = _plus_19;
                  this.inAggregatedPath.replace(((DSLRuleController)r).getController2().getName(), pathInAggregated_1);
                } else {
                  this.inAggregatedPath.put(((DSLRuleController)r).getController2().getName(), pathAggregated.replaceFirst("outAggregated", "inAggregated"));
                }
              }
            }
            rController++;
            String aggregated = this.aggregatedPath.get(((DSLRuleController)r).getController1().getName());
            if ((aggregated != null)) {
              DSLController _controller2_2 = ((DSLRuleController)r).getController2();
              boolean _tripleNotEquals_2 = (_controller2_2 != null);
              if (_tripleNotEquals_2) {
                String _get_5 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
                String _plus_20 = ((aggregated + "<aggregated from=\'") + _get_5);
                String _plus_21 = (_plus_20 + "\' to=\'");
                String _get_6 = this.structureElementPath.get(((DSLRuleController)r).getController2().getName());
                String _plus_22 = (_plus_21 + _get_6);
                String _plus_23 = (_plus_22 + "\'");
                String _plus_24 = (_plus_23 + relation);
                aggregated = _plus_24;
              }
              this.aggregatedPath.replace(((DSLRuleController)r).getController1().getName(), aggregated);
            } else {
              DSLController _controller2_3 = ((DSLRuleController)r).getController2();
              boolean _tripleNotEquals_3 = (_controller2_3 != null);
              if (_tripleNotEquals_3) {
                String _get_7 = this.structureElementPath.get(((DSLRuleController)r).getController1().getName());
                String _plus_25 = ("<aggregated from=\'" + _get_7);
                String _plus_26 = (_plus_25 + "\' to=\'");
                String _get_8 = this.structureElementPath.get(((DSLRuleController)r).getController2().getName());
                String _plus_27 = (_plus_26 + _get_8);
                String _plus_28 = (_plus_27 + "\'");
                String _plus_29 = (_plus_28 + relation);
                aggregated = _plus_29;
              }
              this.aggregatedPath.put(((DSLRuleController)r).getController1().getName(), aggregated);
            }
          } else {
            if ((r instanceof DSLRuleMonitor)) {
              String pathAggregated_1 = this.outAggregatedPath.get(((DSLRuleMonitor)r).getMonitor().getName());
              if ((pathAggregated_1 != null)) {
                int _length_3 = pathAggregated_1.length();
                int _minus_3 = (_length_3 - 1);
                pathAggregated_1 = pathAggregated_1.substring(0, _minus_3);
                String _get_9 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                String _plus_30 = (pathAggregated_1 + _get_9);
                String _plus_31 = (_plus_30 + "/@aggregated.");
                String _plus_32 = (_plus_31 + Integer.valueOf(rMonitor));
                String _plus_33 = (_plus_32 + " \'");
                pathAggregated_1 = _plus_33;
                this.outAggregatedPath.replace(((DSLRuleMonitor)r).getMonitor().getName(), pathAggregated_1);
                DSLAnalyzer _analyzer = ((DSLRuleMonitor)r).getAnalyzer();
                boolean _tripleNotEquals_4 = (_analyzer != null);
                if (_tripleNotEquals_4) {
                  String pathInAggregated_2 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getAnalyzer().getName());
                  if ((pathInAggregated_2 != null)) {
                    int _length_4 = pathInAggregated_2.length();
                    int _minus_4 = (_length_4 - 1);
                    pathInAggregated_2 = pathInAggregated_2.substring(0, _minus_4);
                    String _get_10 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_34 = (pathInAggregated_2 + _get_10);
                    String _plus_35 = (_plus_34 + "/@aggregated.");
                    String _plus_36 = (_plus_35 + Integer.valueOf(rMonitor));
                    String _plus_37 = (_plus_36 + " \'");
                    pathInAggregated_2 = _plus_37;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getAnalyzer().getName(), pathInAggregated_2);
                  } else {
                    String _get_11 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_38 = ("inAggregated=\'" + _get_11);
                    String _plus_39 = (_plus_38 + "/@aggregated.");
                    String _plus_40 = (_plus_39 + Integer.valueOf(rMonitor));
                    String _plus_41 = (_plus_40 + " \'");
                    pathInAggregated_2 = _plus_41;
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getAnalyzer().getName(), pathInAggregated_2);
                  }
                }
                DSLKnowledge _knowledge = ((DSLRuleMonitor)r).getKnowledge();
                boolean _tripleNotEquals_5 = (_knowledge != null);
                if (_tripleNotEquals_5) {
                  String pathInAggregated_3 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getKnowledge().getName());
                  if ((pathInAggregated_3 != null)) {
                    int _length_5 = pathInAggregated_3.length();
                    int _minus_5 = (_length_5 - 1);
                    pathInAggregated_3 = pathInAggregated_3.substring(0, _minus_5);
                    String _get_12 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_42 = (pathInAggregated_3 + _get_12);
                    String _plus_43 = (_plus_42 + "/@aggregated.");
                    String _plus_44 = (_plus_43 + Integer.valueOf(rMonitor));
                    String _plus_45 = (_plus_44 + " \'");
                    pathInAggregated_3 = _plus_45;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getKnowledge().getName(), pathInAggregated_3);
                  } else {
                    String _get_13 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_46 = ("inAggregated=\'" + _get_13);
                    String _plus_47 = (_plus_46 + "/@aggregated.");
                    String _plus_48 = (_plus_47 + Integer.valueOf(rMonitor));
                    String _plus_49 = (_plus_48 + " \'");
                    pathInAggregated_3 = _plus_49;
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getKnowledge().getName(), pathInAggregated_3);
                  }
                }
                DSLSensor _sensor = ((DSLRuleMonitor)r).getSensor();
                boolean _tripleNotEquals_6 = (_sensor != null);
                if (_tripleNotEquals_6) {
                  String pathInAggregated_4 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getSensor().getName());
                  if ((pathInAggregated_4 != null)) {
                    int _length_6 = pathInAggregated_4.length();
                    int _minus_6 = (_length_6 - 1);
                    pathInAggregated_4 = pathInAggregated_4.substring(0, _minus_6);
                    String _get_14 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_50 = (pathInAggregated_4 + _get_14);
                    String _plus_51 = (_plus_50 + "/@aggregated.");
                    String _plus_52 = (_plus_51 + Integer.valueOf(rMonitor));
                    String _plus_53 = (_plus_52 + " \'");
                    pathInAggregated_4 = _plus_53;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getSensor().getName(), pathInAggregated_4);
                  } else {
                    String _get_15 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_54 = ("inAggregated=\'" + _get_15);
                    String _plus_55 = (_plus_54 + "/@aggregated.");
                    String _plus_56 = (_plus_55 + Integer.valueOf(rMonitor));
                    String _plus_57 = (_plus_56 + " \'");
                    pathInAggregated_4 = _plus_57;
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getSensor().getName(), pathInAggregated_4);
                  }
                }
                DSLMonitor _monitor2 = ((DSLRuleMonitor)r).getMonitor2();
                boolean _tripleNotEquals_7 = (_monitor2 != null);
                if (_tripleNotEquals_7) {
                  String pathInAggregated_5 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getMonitor2().getName());
                  if ((pathInAggregated_5 != null)) {
                    int _length_7 = pathInAggregated_5.length();
                    int _minus_7 = (_length_7 - 1);
                    pathInAggregated_5 = pathInAggregated_5.substring(0, _minus_7);
                    String _get_16 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_58 = (pathInAggregated_5 + _get_16);
                    String _plus_59 = (_plus_58 + "/@aggregated.");
                    String _plus_60 = (_plus_59 + Integer.valueOf(rMonitor));
                    String _plus_61 = (_plus_60 + " \'");
                    pathInAggregated_5 = _plus_61;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getMonitor2().getName(), pathInAggregated_5);
                  } else {
                    String _get_17 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_62 = ("inAggregated=\'" + _get_17);
                    String _plus_63 = (_plus_62 + "/@aggregated.");
                    String _plus_64 = (_plus_63 + Integer.valueOf(rMonitor));
                    String _plus_65 = (_plus_64 + " \'");
                    pathInAggregated_5 = _plus_65;
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getMonitor2().getName(), pathInAggregated_5);
                  }
                }
              } else {
                String _get_18 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                String _plus_66 = ("outAggregated=\'" + _get_18);
                String _plus_67 = (_plus_66 + "/@aggregated.");
                String _plus_68 = (_plus_67 + Integer.valueOf(rMonitor));
                String _plus_69 = (_plus_68 + " \'");
                pathAggregated_1 = _plus_69;
                this.outAggregatedPath.put(((DSLRuleMonitor)r).getMonitor().getName(), pathAggregated_1);
                DSLAnalyzer _analyzer_1 = ((DSLRuleMonitor)r).getAnalyzer();
                boolean _tripleNotEquals_8 = (_analyzer_1 != null);
                if (_tripleNotEquals_8) {
                  String pathInAggregated_6 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getAnalyzer().getName());
                  if ((pathInAggregated_6 != null)) {
                    int _length_8 = pathInAggregated_6.length();
                    int _minus_8 = (_length_8 - 1);
                    pathInAggregated_6 = pathInAggregated_6.substring(0, _minus_8);
                    String _get_19 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_70 = (pathInAggregated_6 + _get_19);
                    String _plus_71 = (_plus_70 + "/@aggregated.");
                    String _plus_72 = (_plus_71 + Integer.valueOf(rMonitor));
                    String _plus_73 = (_plus_72 + " \'");
                    pathInAggregated_6 = _plus_73;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getAnalyzer().getName(), pathInAggregated_6);
                  } else {
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getAnalyzer().getName(), pathAggregated_1.replaceFirst("outAggregated", "inAggregated"));
                  }
                }
                DSLKnowledge _knowledge_1 = ((DSLRuleMonitor)r).getKnowledge();
                boolean _tripleNotEquals_9 = (_knowledge_1 != null);
                if (_tripleNotEquals_9) {
                  String pathInAggregated_7 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getKnowledge().getName());
                  if ((pathInAggregated_7 != null)) {
                    int _length_9 = pathInAggregated_7.length();
                    int _minus_9 = (_length_9 - 1);
                    pathInAggregated_7 = pathInAggregated_7.substring(0, _minus_9);
                    String _get_20 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_74 = (pathInAggregated_7 + _get_20);
                    String _plus_75 = (_plus_74 + "/@aggregated.");
                    String _plus_76 = (_plus_75 + Integer.valueOf(rMonitor));
                    String _plus_77 = (_plus_76 + " \'");
                    pathInAggregated_7 = _plus_77;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getKnowledge().getName(), pathInAggregated_7);
                  } else {
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getKnowledge().getName(), pathAggregated_1.replaceFirst("outAggregated", "inAggregated"));
                  }
                }
                DSLSensor _sensor_1 = ((DSLRuleMonitor)r).getSensor();
                boolean _tripleNotEquals_10 = (_sensor_1 != null);
                if (_tripleNotEquals_10) {
                  String pathInAggregated_8 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getSensor().getName());
                  if ((pathInAggregated_8 != null)) {
                    int _length_10 = pathInAggregated_8.length();
                    int _minus_10 = (_length_10 - 1);
                    pathInAggregated_8 = pathInAggregated_8.substring(0, _minus_10);
                    String _get_21 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_78 = (pathInAggregated_8 + _get_21);
                    String _plus_79 = (_plus_78 + "/@aggregated.");
                    String _plus_80 = (_plus_79 + Integer.valueOf(rMonitor));
                    String _plus_81 = (_plus_80 + " \'");
                    pathInAggregated_8 = _plus_81;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getSensor().getName(), pathInAggregated_8);
                  } else {
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getSensor().getName(), pathAggregated_1.replaceFirst("outAggregated", "inAggregated"));
                  }
                }
                DSLMonitor _monitor2_1 = ((DSLRuleMonitor)r).getMonitor2();
                boolean _tripleNotEquals_11 = (_monitor2_1 != null);
                if (_tripleNotEquals_11) {
                  String pathInAggregated_9 = this.inAggregatedPath.get(((DSLRuleMonitor)r).getMonitor2().getName());
                  if ((pathInAggregated_9 != null)) {
                    int _length_11 = pathInAggregated_9.length();
                    int _minus_11 = (_length_11 - 1);
                    pathInAggregated_9 = pathInAggregated_9.substring(0, _minus_11);
                    String _get_22 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_82 = (pathInAggregated_9 + _get_22);
                    String _plus_83 = (_plus_82 + "/@aggregated.");
                    String _plus_84 = (_plus_83 + Integer.valueOf(rMonitor));
                    String _plus_85 = (_plus_84 + " \'");
                    pathInAggregated_9 = _plus_85;
                    this.inAggregatedPath.replace(((DSLRuleMonitor)r).getMonitor2().getName(), pathInAggregated_9);
                  } else {
                    this.inAggregatedPath.put(((DSLRuleMonitor)r).getMonitor2().getName(), pathAggregated_1.replaceFirst("outAggregated", "inAggregated"));
                  }
                }
              }
              rMonitor++;
              String aggregated_1 = this.aggregatedPath.get(((DSLRuleMonitor)r).getMonitor().getName());
              if ((aggregated_1 != null)) {
                DSLAnalyzer _analyzer_2 = ((DSLRuleMonitor)r).getAnalyzer();
                boolean _tripleNotEquals_12 = (_analyzer_2 != null);
                if (_tripleNotEquals_12) {
                  String _get_23 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                  String _plus_86 = ((aggregated_1 + "<aggregated from=\'") + _get_23);
                  String _plus_87 = (_plus_86 + "\' to=\'");
                  String _get_24 = this.structureElementPath.get(((DSLRuleMonitor)r).getAnalyzer().getName());
                  String _plus_88 = (_plus_87 + _get_24);
                  String _plus_89 = (_plus_88 + "\'");
                  String _plus_90 = (_plus_89 + relation);
                  aggregated_1 = _plus_90;
                } else {
                  DSLKnowledge _knowledge_2 = ((DSLRuleMonitor)r).getKnowledge();
                  boolean _tripleNotEquals_13 = (_knowledge_2 != null);
                  if (_tripleNotEquals_13) {
                    String _get_25 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_91 = ((aggregated_1 + "<aggregated from=\'") + _get_25);
                    String _plus_92 = (_plus_91 + "\' to=\'");
                    String _get_26 = this.structureElementPath.get(((DSLRuleMonitor)r).getKnowledge().getName());
                    String _plus_93 = (_plus_92 + _get_26);
                    String _plus_94 = (_plus_93 + "\'");
                    String _plus_95 = (_plus_94 + relation);
                    aggregated_1 = _plus_95;
                  } else {
                    DSLSensor _sensor_2 = ((DSLRuleMonitor)r).getSensor();
                    boolean _tripleNotEquals_14 = (_sensor_2 != null);
                    if (_tripleNotEquals_14) {
                      String _get_27 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                      String _plus_96 = ((aggregated_1 + "<aggregated from=\'") + _get_27);
                      String _plus_97 = (_plus_96 + "\' to=\'");
                      String _get_28 = this.structureElementPath.get(((DSLRuleMonitor)r).getSensor().getName());
                      String _plus_98 = (_plus_97 + _get_28);
                      String _plus_99 = (_plus_98 + "\'");
                      String _plus_100 = (_plus_99 + relation);
                      aggregated_1 = _plus_100;
                    } else {
                      DSLMonitor _monitor2_2 = ((DSLRuleMonitor)r).getMonitor2();
                      boolean _tripleNotEquals_15 = (_monitor2_2 != null);
                      if (_tripleNotEquals_15) {
                        String _get_29 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                        String _plus_101 = ((aggregated_1 + "<aggregated from=\'") + _get_29);
                        String _plus_102 = (_plus_101 + "\' to=\'");
                        String _get_30 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor2().getName());
                        String _plus_103 = (_plus_102 + _get_30);
                        String _plus_104 = (_plus_103 + "\'");
                        String _plus_105 = (_plus_104 + relation);
                        aggregated_1 = _plus_105;
                      }
                    }
                  }
                }
                this.aggregatedPath.replace(((DSLRuleMonitor)r).getMonitor().getName(), aggregated_1);
              } else {
                DSLAnalyzer _analyzer_3 = ((DSLRuleMonitor)r).getAnalyzer();
                boolean _tripleNotEquals_16 = (_analyzer_3 != null);
                if (_tripleNotEquals_16) {
                  String _get_31 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                  String _plus_106 = ("<aggregated from=\'" + _get_31);
                  String _plus_107 = (_plus_106 + "\' to=\'");
                  String _get_32 = this.structureElementPath.get(((DSLRuleMonitor)r).getAnalyzer().getName());
                  String _plus_108 = (_plus_107 + _get_32);
                  String _plus_109 = (_plus_108 + "\'");
                  String _plus_110 = (_plus_109 + relation);
                  aggregated_1 = _plus_110;
                } else {
                  DSLKnowledge _knowledge_3 = ((DSLRuleMonitor)r).getKnowledge();
                  boolean _tripleNotEquals_17 = (_knowledge_3 != null);
                  if (_tripleNotEquals_17) {
                    String _get_33 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                    String _plus_111 = ("<aggregated from=\'" + _get_33);
                    String _plus_112 = (_plus_111 + "\' to=\'");
                    String _get_34 = this.structureElementPath.get(((DSLRuleMonitor)r).getKnowledge().getName());
                    String _plus_113 = (_plus_112 + _get_34);
                    String _plus_114 = (_plus_113 + "\'");
                    String _plus_115 = (_plus_114 + relation);
                    aggregated_1 = _plus_115;
                  } else {
                    DSLSensor _sensor_3 = ((DSLRuleMonitor)r).getSensor();
                    boolean _tripleNotEquals_18 = (_sensor_3 != null);
                    if (_tripleNotEquals_18) {
                      String _get_35 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                      String _plus_116 = ("<aggregated from=\'" + _get_35);
                      String _plus_117 = (_plus_116 + "\' to=\'");
                      String _get_36 = this.structureElementPath.get(((DSLRuleMonitor)r).getSensor().getName());
                      String _plus_118 = (_plus_117 + _get_36);
                      String _plus_119 = (_plus_118 + "\'");
                      String _plus_120 = (_plus_119 + relation);
                      aggregated_1 = _plus_120;
                    } else {
                      DSLMonitor _monitor2_3 = ((DSLRuleMonitor)r).getMonitor2();
                      boolean _tripleNotEquals_19 = (_monitor2_3 != null);
                      if (_tripleNotEquals_19) {
                        String _get_37 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor().getName());
                        String _plus_121 = ("<aggregated from=\'" + _get_37);
                        String _plus_122 = (_plus_121 + "\' to=\'");
                        String _get_38 = this.structureElementPath.get(((DSLRuleMonitor)r).getMonitor2().getName());
                        String _plus_123 = (_plus_122 + _get_38);
                        String _plus_124 = (_plus_123 + "\'");
                        String _plus_125 = (_plus_124 + relation);
                        aggregated_1 = _plus_125;
                      }
                    }
                  }
                }
                this.aggregatedPath.put(((DSLRuleMonitor)r).getMonitor().getName(), aggregated_1);
              }
            } else {
              if ((r instanceof DSLRuleAnalyzer)) {
                String pathAggregated_2 = this.outAggregatedPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                if ((pathAggregated_2 != null)) {
                  int _length_12 = pathAggregated_2.length();
                  int _minus_12 = (_length_12 - 1);
                  pathAggregated_2 = pathAggregated_2.substring(0, _minus_12);
                  String _get_39 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                  String _plus_126 = (pathAggregated_2 + _get_39);
                  String _plus_127 = (_plus_126 + "/@aggregated.");
                  String _plus_128 = (_plus_127 + Integer.valueOf(rAnalyzer));
                  String _plus_129 = (_plus_128 + " \'");
                  pathAggregated_2 = _plus_129;
                  this.outAggregatedPath.replace(((DSLRuleAnalyzer)r).getAnalyzer().getName(), pathAggregated_2);
                  DSLMonitor _monitor = ((DSLRuleAnalyzer)r).getMonitor();
                  boolean _tripleNotEquals_20 = (_monitor != null);
                  if (_tripleNotEquals_20) {
                    String pathInAggregated_10 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getMonitor().getName());
                    if ((pathInAggregated_10 != null)) {
                      int _length_13 = pathInAggregated_10.length();
                      int _minus_13 = (_length_13 - 1);
                      pathInAggregated_10 = pathInAggregated_10.substring(0, _minus_13);
                      String _get_40 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_130 = (pathInAggregated_10 + _get_40);
                      String _plus_131 = (_plus_130 + "/@aggregated.");
                      String _plus_132 = (_plus_131 + Integer.valueOf(rAnalyzer));
                      String _plus_133 = (_plus_132 + " \'");
                      pathInAggregated_10 = _plus_133;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getMonitor().getName(), pathInAggregated_10);
                    } else {
                      String _get_41 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_134 = ("inAggregated=\'" + _get_41);
                      String _plus_135 = (_plus_134 + "/@aggregated.");
                      String _plus_136 = (_plus_135 + Integer.valueOf(rAnalyzer));
                      String _plus_137 = (_plus_136 + " \'");
                      pathInAggregated_10 = _plus_137;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getMonitor().getName(), pathInAggregated_10);
                    }
                  }
                  DSLKnowledge _knowledge_4 = ((DSLRuleAnalyzer)r).getKnowledge();
                  boolean _tripleNotEquals_21 = (_knowledge_4 != null);
                  if (_tripleNotEquals_21) {
                    String pathInAggregated_11 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getKnowledge().getName());
                    if ((pathInAggregated_11 != null)) {
                      int _length_14 = pathInAggregated_11.length();
                      int _minus_14 = (_length_14 - 1);
                      pathInAggregated_11 = pathInAggregated_11.substring(0, _minus_14);
                      String _get_42 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_138 = (pathInAggregated_11 + _get_42);
                      String _plus_139 = (_plus_138 + "/@aggregated.");
                      String _plus_140 = (_plus_139 + Integer.valueOf(rAnalyzer));
                      String _plus_141 = (_plus_140 + " \'");
                      pathInAggregated_11 = _plus_141;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getKnowledge().getName(), pathInAggregated_11);
                    } else {
                      String _get_43 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_142 = ("inAggregated=\'" + _get_43);
                      String _plus_143 = (_plus_142 + "/@aggregated.");
                      String _plus_144 = (_plus_143 + Integer.valueOf(rAnalyzer));
                      String _plus_145 = (_plus_144 + " \'");
                      pathInAggregated_11 = _plus_145;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getKnowledge().getName(), pathInAggregated_11);
                    }
                  }
                  DSLPlanner _planner = ((DSLRuleAnalyzer)r).getPlanner();
                  boolean _tripleNotEquals_22 = (_planner != null);
                  if (_tripleNotEquals_22) {
                    String pathInAggregated_12 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getPlanner().getName());
                    if ((pathInAggregated_12 != null)) {
                      int _length_15 = pathInAggregated_12.length();
                      int _minus_15 = (_length_15 - 1);
                      pathInAggregated_12 = pathInAggregated_12.substring(0, _minus_15);
                      String _get_44 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_146 = (pathInAggregated_12 + _get_44);
                      String _plus_147 = (_plus_146 + "/@aggregated.");
                      String _plus_148 = (_plus_147 + Integer.valueOf(rAnalyzer));
                      String _plus_149 = (_plus_148 + " \'");
                      pathInAggregated_12 = _plus_149;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getPlanner().getName(), pathInAggregated_12);
                    } else {
                      String _get_45 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_150 = ("inAggregated=\'" + _get_45);
                      String _plus_151 = (_plus_150 + "/@aggregated.");
                      String _plus_152 = (_plus_151 + Integer.valueOf(rAnalyzer));
                      String _plus_153 = (_plus_152 + " \'");
                      pathInAggregated_12 = _plus_153;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getPlanner().getName(), pathInAggregated_12);
                    }
                  }
                  DSLReferenceInput _rreference = ((DSLRuleAnalyzer)r).getRreference();
                  boolean _tripleNotEquals_23 = (_rreference != null);
                  if (_tripleNotEquals_23) {
                    String pathInAggregated_13 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getRreference().getName());
                    if ((pathInAggregated_13 != null)) {
                      int _length_16 = pathInAggregated_13.length();
                      int _minus_16 = (_length_16 - 1);
                      pathInAggregated_13 = pathInAggregated_13.substring(0, _minus_16);
                      String _get_46 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_154 = (pathInAggregated_13 + _get_46);
                      String _plus_155 = (_plus_154 + "/@aggregated.");
                      String _plus_156 = (_plus_155 + Integer.valueOf(rAnalyzer));
                      String _plus_157 = (_plus_156 + " \'");
                      pathInAggregated_13 = _plus_157;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getRreference().getName(), pathInAggregated_13);
                    } else {
                      String _get_47 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_158 = ("inAggregated=\'" + _get_47);
                      String _plus_159 = (_plus_158 + "/@aggregated.");
                      String _plus_160 = (_plus_159 + Integer.valueOf(rAnalyzer));
                      String _plus_161 = (_plus_160 + " \'");
                      pathInAggregated_13 = _plus_161;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getRreference().getName(), pathInAggregated_13);
                    }
                  }
                  DSLAnalyzer _analyzer2 = ((DSLRuleAnalyzer)r).getAnalyzer2();
                  boolean _tripleNotEquals_24 = (_analyzer2 != null);
                  if (_tripleNotEquals_24) {
                    String pathInAggregated_14 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getAnalyzer2().getName());
                    if ((pathInAggregated_14 != null)) {
                      int _length_17 = pathInAggregated_14.length();
                      int _minus_17 = (_length_17 - 1);
                      pathInAggregated_14 = pathInAggregated_14.substring(0, _minus_17);
                      String _get_48 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_162 = (pathInAggregated_14 + _get_48);
                      String _plus_163 = (_plus_162 + "/@aggregated.");
                      String _plus_164 = (_plus_163 + Integer.valueOf(rAnalyzer));
                      String _plus_165 = (_plus_164 + " \'");
                      pathInAggregated_14 = _plus_165;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getAnalyzer2().getName(), pathInAggregated_14);
                    } else {
                      String _get_49 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_166 = ("inAggregated=\'" + _get_49);
                      String _plus_167 = (_plus_166 + "/@aggregated.");
                      String _plus_168 = (_plus_167 + Integer.valueOf(rAnalyzer));
                      String _plus_169 = (_plus_168 + " \'");
                      pathInAggregated_14 = _plus_169;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getAnalyzer2().getName(), pathInAggregated_14);
                    }
                  }
                  DSLSelfHealingAlt _shalt = ((DSLRuleAnalyzer)r).getShalt();
                  boolean _tripleNotEquals_25 = (_shalt != null);
                  if (_tripleNotEquals_25) {
                    String pathInAggregated_15 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getShalt().getName());
                    if ((pathInAggregated_15 != null)) {
                      int _length_18 = pathInAggregated_15.length();
                      int _minus_18 = (_length_18 - 1);
                      pathInAggregated_15 = pathInAggregated_15.substring(0, _minus_18);
                      String _get_50 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_170 = (pathInAggregated_15 + _get_50);
                      String _plus_171 = (_plus_170 + "/@aggregated.");
                      String _plus_172 = (_plus_171 + Integer.valueOf(rAnalyzer));
                      String _plus_173 = (_plus_172 + " \'");
                      pathInAggregated_15 = _plus_173;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getShalt().getName(), pathInAggregated_15);
                    } else {
                      String _get_51 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_174 = ("inAggregated=\'" + _get_51);
                      String _plus_175 = (_plus_174 + "/@aggregated.");
                      String _plus_176 = (_plus_175 + Integer.valueOf(rAnalyzer));
                      String _plus_177 = (_plus_176 + " \'");
                      pathInAggregated_15 = _plus_177;
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getShalt().getName(), pathInAggregated_15);
                    }
                  }
                } else {
                  String _get_52 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                  String _plus_178 = ("outAggregated=\'" + _get_52);
                  String _plus_179 = (_plus_178 + "/@aggregated.");
                  String _plus_180 = (_plus_179 + Integer.valueOf(rAnalyzer));
                  String _plus_181 = (_plus_180 + " \'");
                  pathAggregated_2 = _plus_181;
                  this.outAggregatedPath.put(((DSLRuleAnalyzer)r).getAnalyzer().getName(), pathAggregated_2);
                  DSLMonitor _monitor_1 = ((DSLRuleAnalyzer)r).getMonitor();
                  boolean _tripleNotEquals_26 = (_monitor_1 != null);
                  if (_tripleNotEquals_26) {
                    String pathInAggregated_16 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getMonitor().getName());
                    if ((pathInAggregated_16 != null)) {
                      int _length_19 = pathInAggregated_16.length();
                      int _minus_19 = (_length_19 - 1);
                      pathInAggregated_16 = pathInAggregated_16.substring(0, _minus_19);
                      String _get_53 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_182 = (pathInAggregated_16 + _get_53);
                      String _plus_183 = (_plus_182 + "/@aggregated.");
                      String _plus_184 = (_plus_183 + Integer.valueOf(rAnalyzer));
                      String _plus_185 = (_plus_184 + " \'");
                      pathInAggregated_16 = _plus_185;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getMonitor().getName(), pathInAggregated_16);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getMonitor().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                  DSLKnowledge _knowledge_5 = ((DSLRuleAnalyzer)r).getKnowledge();
                  boolean _tripleNotEquals_27 = (_knowledge_5 != null);
                  if (_tripleNotEquals_27) {
                    String pathInAggregated_17 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getKnowledge().getName());
                    if ((pathInAggregated_17 != null)) {
                      int _length_20 = pathInAggregated_17.length();
                      int _minus_20 = (_length_20 - 1);
                      pathInAggregated_17 = pathInAggregated_17.substring(0, _minus_20);
                      String _get_54 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_186 = (pathInAggregated_17 + _get_54);
                      String _plus_187 = (_plus_186 + "/@aggregated.");
                      String _plus_188 = (_plus_187 + Integer.valueOf(rAnalyzer));
                      String _plus_189 = (_plus_188 + " \'");
                      pathInAggregated_17 = _plus_189;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getKnowledge().getName(), pathInAggregated_17);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getKnowledge().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                  DSLPlanner _planner_1 = ((DSLRuleAnalyzer)r).getPlanner();
                  boolean _tripleNotEquals_28 = (_planner_1 != null);
                  if (_tripleNotEquals_28) {
                    String pathInAggregated_18 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getPlanner().getName());
                    if ((pathInAggregated_18 != null)) {
                      int _length_21 = pathInAggregated_18.length();
                      int _minus_21 = (_length_21 - 1);
                      pathInAggregated_18 = pathInAggregated_18.substring(0, _minus_21);
                      String _get_55 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_190 = (pathInAggregated_18 + _get_55);
                      String _plus_191 = (_plus_190 + "/@aggregated.");
                      String _plus_192 = (_plus_191 + Integer.valueOf(rAnalyzer));
                      String _plus_193 = (_plus_192 + " \'");
                      pathInAggregated_18 = _plus_193;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getPlanner().getName(), pathInAggregated_18);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getPlanner().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                  DSLReferenceInput _rreference_1 = ((DSLRuleAnalyzer)r).getRreference();
                  boolean _tripleNotEquals_29 = (_rreference_1 != null);
                  if (_tripleNotEquals_29) {
                    String pathInAggregated_19 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getRreference().getName());
                    if ((pathInAggregated_19 != null)) {
                      int _length_22 = pathInAggregated_19.length();
                      int _minus_22 = (_length_22 - 1);
                      pathInAggregated_19 = pathInAggregated_19.substring(0, _minus_22);
                      String _get_56 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_194 = (pathInAggregated_19 + _get_56);
                      String _plus_195 = (_plus_194 + "/@aggregated.");
                      String _plus_196 = (_plus_195 + Integer.valueOf(rAnalyzer));
                      String _plus_197 = (_plus_196 + " \'");
                      pathInAggregated_19 = _plus_197;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getRreference().getName(), pathInAggregated_19);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getRreference().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                  DSLAnalyzer _analyzer2_1 = ((DSLRuleAnalyzer)r).getAnalyzer2();
                  boolean _tripleNotEquals_30 = (_analyzer2_1 != null);
                  if (_tripleNotEquals_30) {
                    String pathInAggregated_20 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getAnalyzer2().getName());
                    if ((pathInAggregated_20 != null)) {
                      int _length_23 = pathInAggregated_20.length();
                      int _minus_23 = (_length_23 - 1);
                      pathInAggregated_20 = pathInAggregated_20.substring(0, _minus_23);
                      String _get_57 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_198 = (pathInAggregated_20 + _get_57);
                      String _plus_199 = (_plus_198 + "/@aggregated.");
                      String _plus_200 = (_plus_199 + Integer.valueOf(rAnalyzer));
                      String _plus_201 = (_plus_200 + " \'");
                      pathInAggregated_20 = _plus_201;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getAnalyzer2().getName(), pathInAggregated_20);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getAnalyzer2().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                  DSLSelfHealingAlt _shalt_1 = ((DSLRuleAnalyzer)r).getShalt();
                  boolean _tripleNotEquals_31 = (_shalt_1 != null);
                  if (_tripleNotEquals_31) {
                    String pathInAggregated_21 = this.inAggregatedPath.get(((DSLRuleAnalyzer)r).getShalt().getName());
                    if ((pathInAggregated_21 != null)) {
                      int _length_24 = pathInAggregated_21.length();
                      int _minus_24 = (_length_24 - 1);
                      pathInAggregated_21 = pathInAggregated_21.substring(0, _minus_24);
                      String _get_58 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_202 = (pathInAggregated_21 + _get_58);
                      String _plus_203 = (_plus_202 + "/@aggregated.");
                      String _plus_204 = (_plus_203 + Integer.valueOf(rAnalyzer));
                      String _plus_205 = (_plus_204 + " \'");
                      pathInAggregated_21 = _plus_205;
                      this.inAggregatedPath.replace(((DSLRuleAnalyzer)r).getShalt().getName(), pathInAggregated_21);
                    } else {
                      this.inAggregatedPath.put(((DSLRuleAnalyzer)r).getShalt().getName(), pathAggregated_2.replaceFirst("outAggregated", "inAggregated"));
                    }
                  }
                }
                rAnalyzer++;
                String aggregated_2 = this.aggregatedPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                if ((aggregated_2 != null)) {
                  DSLMonitor _monitor_2 = ((DSLRuleAnalyzer)r).getMonitor();
                  boolean _tripleNotEquals_32 = (_monitor_2 != null);
                  if (_tripleNotEquals_32) {
                    String _get_59 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                    String _plus_206 = ((aggregated_2 + "<aggregated from=\'") + _get_59);
                    String _plus_207 = (_plus_206 + "\' to=\'");
                    String _get_60 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getMonitor().getName());
                    String _plus_208 = (_plus_207 + _get_60);
                    String _plus_209 = (_plus_208 + "\'");
                    String _plus_210 = (_plus_209 + relation);
                    aggregated_2 = _plus_210;
                  } else {
                    DSLKnowledge _knowledge_6 = ((DSLRuleAnalyzer)r).getKnowledge();
                    boolean _tripleNotEquals_33 = (_knowledge_6 != null);
                    if (_tripleNotEquals_33) {
                      String _get_61 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_211 = ((aggregated_2 + "<aggregated from=\'") + _get_61);
                      String _plus_212 = (_plus_211 + "\' to=\'");
                      String _get_62 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getKnowledge().getName());
                      String _plus_213 = (_plus_212 + _get_62);
                      String _plus_214 = (_plus_213 + "\'");
                      String _plus_215 = (_plus_214 + relation);
                      aggregated_2 = _plus_215;
                    } else {
                      DSLPlanner _planner_2 = ((DSLRuleAnalyzer)r).getPlanner();
                      boolean _tripleNotEquals_34 = (_planner_2 != null);
                      if (_tripleNotEquals_34) {
                        String _get_63 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                        String _plus_216 = ((aggregated_2 + "<aggregated from=\'") + _get_63);
                        String _plus_217 = (_plus_216 + "\' to=\'");
                        String _get_64 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getPlanner().getName());
                        String _plus_218 = (_plus_217 + _get_64);
                        String _plus_219 = (_plus_218 + "\'");
                        String _plus_220 = (_plus_219 + relation);
                        aggregated_2 = _plus_220;
                      } else {
                        DSLReferenceInput _rreference_2 = ((DSLRuleAnalyzer)r).getRreference();
                        boolean _tripleNotEquals_35 = (_rreference_2 != null);
                        if (_tripleNotEquals_35) {
                          String _get_65 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                          String _plus_221 = ((aggregated_2 + "<aggregated from=\'") + _get_65);
                          String _plus_222 = (_plus_221 + "\' to=\'");
                          String _get_66 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getRreference().getName());
                          String _plus_223 = (_plus_222 + _get_66);
                          String _plus_224 = (_plus_223 + "\'");
                          String _plus_225 = (_plus_224 + relation);
                          aggregated_2 = _plus_225;
                        } else {
                          DSLAnalyzer _analyzer2_2 = ((DSLRuleAnalyzer)r).getAnalyzer2();
                          boolean _tripleNotEquals_36 = (_analyzer2_2 != null);
                          if (_tripleNotEquals_36) {
                            String _get_67 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                            String _plus_226 = ((aggregated_2 + "<aggregated from=\'") + _get_67);
                            String _plus_227 = (_plus_226 + "\' to=\'");
                            String _get_68 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer2().getName());
                            String _plus_228 = (_plus_227 + _get_68);
                            String _plus_229 = (_plus_228 + "\'");
                            String _plus_230 = (_plus_229 + relation);
                            aggregated_2 = _plus_230;
                          } else {
                            DSLSelfHealingAlt _shalt_2 = ((DSLRuleAnalyzer)r).getShalt();
                            boolean _tripleNotEquals_37 = (_shalt_2 != null);
                            if (_tripleNotEquals_37) {
                              String _get_69 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                              String _plus_231 = ((aggregated_2 + "<aggregated from=\'") + _get_69);
                              String _plus_232 = (_plus_231 + "\' to=\'");
                              String _get_70 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getShalt().getName());
                              String _plus_233 = (_plus_232 + _get_70);
                              String _plus_234 = (_plus_233 + "\'");
                              String _plus_235 = (_plus_234 + relation);
                              aggregated_2 = _plus_235;
                            }
                          }
                        }
                      }
                    }
                  }
                  this.aggregatedPath.replace(((DSLRuleAnalyzer)r).getAnalyzer().getName(), aggregated_2);
                } else {
                  DSLMonitor _monitor_3 = ((DSLRuleAnalyzer)r).getMonitor();
                  boolean _tripleNotEquals_38 = (_monitor_3 != null);
                  if (_tripleNotEquals_38) {
                    String _get_71 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                    String _plus_236 = ("<aggregated from=\'" + _get_71);
                    String _plus_237 = (_plus_236 + "\' to=\'");
                    String _get_72 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                    String _plus_238 = (_plus_237 + _get_72);
                    String _plus_239 = (_plus_238 + "\'");
                    String _plus_240 = (_plus_239 + relation);
                    aggregated_2 = _plus_240;
                  } else {
                    DSLKnowledge _knowledge_7 = ((DSLRuleAnalyzer)r).getKnowledge();
                    boolean _tripleNotEquals_39 = (_knowledge_7 != null);
                    if (_tripleNotEquals_39) {
                      String _get_73 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                      String _plus_241 = ("<aggregated from=\'" + _get_73);
                      String _plus_242 = (_plus_241 + "\' to=\'");
                      String _get_74 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getKnowledge().getName());
                      String _plus_243 = (_plus_242 + _get_74);
                      String _plus_244 = (_plus_243 + "\'");
                      String _plus_245 = (_plus_244 + relation);
                      aggregated_2 = _plus_245;
                    } else {
                      DSLPlanner _planner_3 = ((DSLRuleAnalyzer)r).getPlanner();
                      boolean _tripleNotEquals_40 = (_planner_3 != null);
                      if (_tripleNotEquals_40) {
                        String _get_75 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                        String _plus_246 = ("<aggregated from=\'" + _get_75);
                        String _plus_247 = (_plus_246 + "\' to=\'");
                        String _get_76 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getPlanner().getName());
                        String _plus_248 = (_plus_247 + _get_76);
                        String _plus_249 = (_plus_248 + "\'");
                        String _plus_250 = (_plus_249 + relation);
                        aggregated_2 = _plus_250;
                      } else {
                        DSLReferenceInput _rreference_3 = ((DSLRuleAnalyzer)r).getRreference();
                        boolean _tripleNotEquals_41 = (_rreference_3 != null);
                        if (_tripleNotEquals_41) {
                          String _get_77 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                          String _plus_251 = ("<aggregated from=\'" + _get_77);
                          String _plus_252 = (_plus_251 + "\' to=\'");
                          String _get_78 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getRreference().getName());
                          String _plus_253 = (_plus_252 + _get_78);
                          String _plus_254 = (_plus_253 + "\'");
                          String _plus_255 = (_plus_254 + relation);
                          aggregated_2 = _plus_255;
                        } else {
                          DSLAnalyzer _analyzer2_3 = ((DSLRuleAnalyzer)r).getAnalyzer2();
                          boolean _tripleNotEquals_42 = (_analyzer2_3 != null);
                          if (_tripleNotEquals_42) {
                            String _get_79 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                            String _plus_256 = ("<aggregated from=\'" + _get_79);
                            String _plus_257 = (_plus_256 + "\' to=\'");
                            String _get_80 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer2().getName());
                            String _plus_258 = (_plus_257 + _get_80);
                            String _plus_259 = (_plus_258 + "\'");
                            String _plus_260 = (_plus_259 + relation);
                            aggregated_2 = _plus_260;
                          } else {
                            DSLSelfHealingAlt _shalt_3 = ((DSLRuleAnalyzer)r).getShalt();
                            boolean _tripleNotEquals_43 = (_shalt_3 != null);
                            if (_tripleNotEquals_43) {
                              String _get_81 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getAnalyzer().getName());
                              String _plus_261 = ("<aggregated from=\'" + _get_81);
                              String _plus_262 = (_plus_261 + "\' to=\'");
                              String _get_82 = this.structureElementPath.get(((DSLRuleAnalyzer)r).getShalt().getName());
                              String _plus_263 = (_plus_262 + _get_82);
                              String _plus_264 = (_plus_263 + "\'");
                              String _plus_265 = (_plus_264 + relation);
                              aggregated_2 = _plus_265;
                            }
                          }
                        }
                      }
                    }
                  }
                  this.aggregatedPath.put(((DSLRuleAnalyzer)r).getAnalyzer().getName(), aggregated_2);
                }
              } else {
                if ((r instanceof DSLRulePlanner)) {
                  String pathAggregated_3 = this.outAggregatedPath.get(((DSLRulePlanner)r).getPlanner().getName());
                  if ((pathAggregated_3 != null)) {
                    int _length_25 = pathAggregated_3.length();
                    int _minus_25 = (_length_25 - 1);
                    pathAggregated_3 = pathAggregated_3.substring(0, _minus_25);
                    String _get_83 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                    String _plus_266 = (pathAggregated_3 + _get_83);
                    String _plus_267 = (_plus_266 + "/@aggregated.");
                    String _plus_268 = (_plus_267 + Integer.valueOf(rPlanner));
                    String _plus_269 = (_plus_268 + " \'");
                    pathAggregated_3 = _plus_269;
                    this.outAggregatedPath.replace(((DSLRulePlanner)r).getPlanner().getName(), pathAggregated_3);
                    DSLAnalyzer _analyzer_4 = ((DSLRulePlanner)r).getAnalyzer();
                    boolean _tripleNotEquals_44 = (_analyzer_4 != null);
                    if (_tripleNotEquals_44) {
                      String pathInAggregated_22 = this.inAggregatedPath.get(((DSLRulePlanner)r).getAnalyzer().getName());
                      if ((pathInAggregated_22 != null)) {
                        int _length_26 = pathInAggregated_22.length();
                        int _minus_26 = (_length_26 - 1);
                        pathInAggregated_22 = pathInAggregated_22.substring(0, _minus_26);
                        String _get_84 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_270 = (pathInAggregated_22 + _get_84);
                        String _plus_271 = (_plus_270 + "/@aggregated.");
                        String _plus_272 = (_plus_271 + Integer.valueOf(rPlanner));
                        String _plus_273 = (_plus_272 + " \'");
                        pathInAggregated_22 = _plus_273;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getAnalyzer().getName(), pathInAggregated_22);
                      } else {
                        String _get_85 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_274 = ("inAggregated=\'" + _get_85);
                        String _plus_275 = (_plus_274 + "/@aggregated.");
                        String _plus_276 = (_plus_275 + Integer.valueOf(rPlanner));
                        String _plus_277 = (_plus_276 + " \'");
                        pathInAggregated_22 = _plus_277;
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getAnalyzer().getName(), pathInAggregated_22);
                      }
                    }
                    DSLKnowledge _knowledge_8 = ((DSLRulePlanner)r).getKnowledge();
                    boolean _tripleNotEquals_45 = (_knowledge_8 != null);
                    if (_tripleNotEquals_45) {
                      String pathInAggregated_23 = this.inAggregatedPath.get(((DSLRulePlanner)r).getKnowledge().getName());
                      if ((pathInAggregated_23 != null)) {
                        int _length_27 = pathInAggregated_23.length();
                        int _minus_27 = (_length_27 - 1);
                        pathInAggregated_23 = pathInAggregated_23.substring(0, _minus_27);
                        String _get_86 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_278 = (pathInAggregated_23 + _get_86);
                        String _plus_279 = (_plus_278 + "/@aggregated.");
                        String _plus_280 = (_plus_279 + Integer.valueOf(rPlanner));
                        String _plus_281 = (_plus_280 + " \'");
                        pathInAggregated_23 = _plus_281;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getKnowledge().getName(), pathInAggregated_23);
                      } else {
                        String _get_87 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_282 = ("inAggregated=\'" + _get_87);
                        String _plus_283 = (_plus_282 + "/@aggregated.");
                        String _plus_284 = (_plus_283 + Integer.valueOf(rPlanner));
                        String _plus_285 = (_plus_284 + " \'");
                        pathInAggregated_23 = _plus_285;
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getKnowledge().getName(), pathInAggregated_23);
                      }
                    }
                    DSLExecutor _executor = ((DSLRulePlanner)r).getExecutor();
                    boolean _tripleNotEquals_46 = (_executor != null);
                    if (_tripleNotEquals_46) {
                      String pathInAggregated_24 = this.inAggregatedPath.get(((DSLRulePlanner)r).getExecutor().getName());
                      if ((pathInAggregated_24 != null)) {
                        int _length_28 = pathInAggregated_24.length();
                        int _minus_28 = (_length_28 - 1);
                        pathInAggregated_24 = pathInAggregated_24.substring(0, _minus_28);
                        String _get_88 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_286 = (pathInAggregated_24 + _get_88);
                        String _plus_287 = (_plus_286 + "/@aggregated.");
                        String _plus_288 = (_plus_287 + Integer.valueOf(rPlanner));
                        String _plus_289 = (_plus_288 + " \'");
                        pathInAggregated_24 = _plus_289;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getExecutor().getName(), pathInAggregated_24);
                      } else {
                        String _get_89 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_290 = ("inAggregated=\'" + _get_89);
                        String _plus_291 = (_plus_290 + "/@aggregated.");
                        String _plus_292 = (_plus_291 + Integer.valueOf(rPlanner));
                        String _plus_293 = (_plus_292 + " \'");
                        pathInAggregated_24 = _plus_293;
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getExecutor().getName(), pathInAggregated_24);
                      }
                    }
                    DSLPlanner _planner2 = ((DSLRulePlanner)r).getPlanner2();
                    boolean _tripleNotEquals_47 = (_planner2 != null);
                    if (_tripleNotEquals_47) {
                      String pathInAggregated_25 = this.inAggregatedPath.get(((DSLRulePlanner)r).getPlanner2().getName());
                      if ((pathInAggregated_25 != null)) {
                        int _length_29 = pathInAggregated_25.length();
                        int _minus_29 = (_length_29 - 1);
                        pathInAggregated_25 = pathInAggregated_25.substring(0, _minus_29);
                        String _get_90 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_294 = (pathInAggregated_25 + _get_90);
                        String _plus_295 = (_plus_294 + "/@aggregated.");
                        String _plus_296 = (_plus_295 + Integer.valueOf(rPlanner));
                        String _plus_297 = (_plus_296 + " \'");
                        pathInAggregated_25 = _plus_297;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getPlanner2().getName(), pathInAggregated_25);
                      } else {
                        String _get_91 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_298 = ("inAggregated=\'" + _get_91);
                        String _plus_299 = (_plus_298 + "/@aggregated.");
                        String _plus_300 = (_plus_299 + Integer.valueOf(rPlanner));
                        String _plus_301 = (_plus_300 + " \'");
                        pathInAggregated_25 = _plus_301;
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getPlanner2().getName(), pathInAggregated_25);
                      }
                    }
                    DSLSelfHealingAlt _shalt_4 = ((DSLRulePlanner)r).getShalt();
                    boolean _tripleNotEquals_48 = (_shalt_4 != null);
                    if (_tripleNotEquals_48) {
                      String pathInAggregated_26 = this.inAggregatedPath.get(((DSLRulePlanner)r).getShalt().getName());
                      if ((pathInAggregated_26 != null)) {
                        int _length_30 = pathInAggregated_26.length();
                        int _minus_30 = (_length_30 - 1);
                        pathInAggregated_26 = pathInAggregated_26.substring(0, _minus_30);
                        String _get_92 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_302 = (pathInAggregated_26 + _get_92);
                        String _plus_303 = (_plus_302 + "/@aggregated.");
                        String _plus_304 = (_plus_303 + Integer.valueOf(rPlanner));
                        String _plus_305 = (_plus_304 + " \'");
                        pathInAggregated_26 = _plus_305;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getShalt().getName(), pathInAggregated_26);
                      } else {
                        String _get_93 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_306 = ("inAggregated=\'" + _get_93);
                        String _plus_307 = (_plus_306 + "/@aggregated.");
                        String _plus_308 = (_plus_307 + Integer.valueOf(rPlanner));
                        String _plus_309 = (_plus_308 + " \'");
                        pathInAggregated_26 = _plus_309;
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getShalt().getName(), pathInAggregated_26);
                      }
                    }
                  } else {
                    String _get_94 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                    String _plus_310 = ("outAggregated=\'" + _get_94);
                    String _plus_311 = (_plus_310 + "/@aggregated.");
                    String _plus_312 = (_plus_311 + Integer.valueOf(rPlanner));
                    String _plus_313 = (_plus_312 + " \'");
                    pathAggregated_3 = _plus_313;
                    this.outAggregatedPath.put(((DSLRulePlanner)r).getPlanner().getName(), pathAggregated_3);
                    DSLAnalyzer _analyzer_5 = ((DSLRulePlanner)r).getAnalyzer();
                    boolean _tripleNotEquals_49 = (_analyzer_5 != null);
                    if (_tripleNotEquals_49) {
                      String pathInAggregated_27 = this.inAggregatedPath.get(((DSLRulePlanner)r).getAnalyzer().getName());
                      if ((pathInAggregated_27 != null)) {
                        int _length_31 = pathInAggregated_27.length();
                        int _minus_31 = (_length_31 - 1);
                        pathInAggregated_27 = pathInAggregated_27.substring(0, _minus_31);
                        String _get_95 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_314 = (pathInAggregated_27 + _get_95);
                        String _plus_315 = (_plus_314 + "/@aggregated.");
                        String _plus_316 = (_plus_315 + Integer.valueOf(rPlanner));
                        String _plus_317 = (_plus_316 + " \'");
                        pathInAggregated_27 = _plus_317;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getAnalyzer().getName(), pathInAggregated_27);
                      } else {
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getAnalyzer().getName(), pathAggregated_3.replaceFirst("outAggregated", "inAggregated"));
                      }
                    }
                    DSLKnowledge _knowledge_9 = ((DSLRulePlanner)r).getKnowledge();
                    boolean _tripleNotEquals_50 = (_knowledge_9 != null);
                    if (_tripleNotEquals_50) {
                      String pathInAggregated_28 = this.inAggregatedPath.get(((DSLRulePlanner)r).getKnowledge().getName());
                      if ((pathInAggregated_28 != null)) {
                        int _length_32 = pathInAggregated_28.length();
                        int _minus_32 = (_length_32 - 1);
                        pathInAggregated_28 = pathInAggregated_28.substring(0, _minus_32);
                        String _get_96 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_318 = (pathInAggregated_28 + _get_96);
                        String _plus_319 = (_plus_318 + "/@aggregated.");
                        String _plus_320 = (_plus_319 + Integer.valueOf(rPlanner));
                        String _plus_321 = (_plus_320 + " \'");
                        pathInAggregated_28 = _plus_321;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getKnowledge().getName(), pathInAggregated_28);
                      } else {
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getKnowledge().getName(), pathAggregated_3.replaceFirst("outAggregated", "inAggregated"));
                      }
                    }
                    DSLExecutor _executor_1 = ((DSLRulePlanner)r).getExecutor();
                    boolean _tripleNotEquals_51 = (_executor_1 != null);
                    if (_tripleNotEquals_51) {
                      String pathInAggregated_29 = this.inAggregatedPath.get(((DSLRulePlanner)r).getExecutor().getName());
                      if ((pathInAggregated_29 != null)) {
                        int _length_33 = pathInAggregated_29.length();
                        int _minus_33 = (_length_33 - 1);
                        pathInAggregated_29 = pathInAggregated_29.substring(0, _minus_33);
                        String _get_97 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_322 = (pathInAggregated_29 + _get_97);
                        String _plus_323 = (_plus_322 + "/@aggregated.");
                        String _plus_324 = (_plus_323 + Integer.valueOf(rPlanner));
                        String _plus_325 = (_plus_324 + " \'");
                        pathInAggregated_29 = _plus_325;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getExecutor().getName(), pathInAggregated_29);
                      } else {
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getExecutor().getName(), pathAggregated_3.replaceFirst("outAggregated", "inAggregated"));
                      }
                    }
                    DSLPlanner _planner2_1 = ((DSLRulePlanner)r).getPlanner2();
                    boolean _tripleNotEquals_52 = (_planner2_1 != null);
                    if (_tripleNotEquals_52) {
                      String pathInAggregated_30 = this.inAggregatedPath.get(((DSLRulePlanner)r).getPlanner2().getName());
                      if ((pathInAggregated_30 != null)) {
                        int _length_34 = pathInAggregated_30.length();
                        int _minus_34 = (_length_34 - 1);
                        pathInAggregated_30 = pathInAggregated_30.substring(0, _minus_34);
                        String _get_98 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_326 = (pathInAggregated_30 + _get_98);
                        String _plus_327 = (_plus_326 + "/@aggregated.");
                        String _plus_328 = (_plus_327 + Integer.valueOf(rPlanner));
                        String _plus_329 = (_plus_328 + " \'");
                        pathInAggregated_30 = _plus_329;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getPlanner2().getName(), pathInAggregated_30);
                      } else {
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getPlanner2().getName(), pathAggregated_3.replaceFirst("outAggregated", "inAggregated"));
                      }
                    }
                    DSLSelfHealingAlt _shalt_5 = ((DSLRulePlanner)r).getShalt();
                    boolean _tripleNotEquals_53 = (_shalt_5 != null);
                    if (_tripleNotEquals_53) {
                      String pathInAggregated_31 = this.inAggregatedPath.get(((DSLRulePlanner)r).getShalt().getName());
                      if ((pathInAggregated_31 != null)) {
                        int _length_35 = pathInAggregated_31.length();
                        int _minus_35 = (_length_35 - 1);
                        pathInAggregated_31 = pathInAggregated_31.substring(0, _minus_35);
                        String _get_99 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_330 = (pathInAggregated_31 + _get_99);
                        String _plus_331 = (_plus_330 + "/@aggregated.");
                        String _plus_332 = (_plus_331 + Integer.valueOf(rPlanner));
                        String _plus_333 = (_plus_332 + " \'");
                        pathInAggregated_31 = _plus_333;
                        this.inAggregatedPath.replace(((DSLRulePlanner)r).getShalt().getName(), pathInAggregated_31);
                      } else {
                        this.inAggregatedPath.put(((DSLRulePlanner)r).getShalt().getName(), pathAggregated_3.replaceFirst("outAggregated", "inAggregated"));
                      }
                    }
                  }
                  rPlanner++;
                  String aggregated_3 = this.aggregatedPath.get(((DSLRulePlanner)r).getPlanner().getName());
                  if ((aggregated_3 != null)) {
                    DSLAnalyzer _analyzer_6 = ((DSLRulePlanner)r).getAnalyzer();
                    boolean _tripleNotEquals_54 = (_analyzer_6 != null);
                    if (_tripleNotEquals_54) {
                      String _get_100 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                      String _plus_334 = ((aggregated_3 + "<aggregated from=\'") + _get_100);
                      String _plus_335 = (_plus_334 + "\' to=\'");
                      String _get_101 = this.structureElementPath.get(((DSLRulePlanner)r).getAnalyzer().getName());
                      String _plus_336 = (_plus_335 + _get_101);
                      String _plus_337 = (_plus_336 + "\'");
                      String _plus_338 = (_plus_337 + relation);
                      aggregated_3 = _plus_338;
                    } else {
                      DSLKnowledge _knowledge_10 = ((DSLRulePlanner)r).getKnowledge();
                      boolean _tripleNotEquals_55 = (_knowledge_10 != null);
                      if (_tripleNotEquals_55) {
                        String _get_102 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_339 = ((aggregated_3 + "<aggregated from=\'") + _get_102);
                        String _plus_340 = (_plus_339 + "\' to=\'");
                        String _get_103 = this.structureElementPath.get(((DSLRulePlanner)r).getKnowledge().getName());
                        String _plus_341 = (_plus_340 + _get_103);
                        String _plus_342 = (_plus_341 + "\'");
                        String _plus_343 = (_plus_342 + relation);
                        aggregated_3 = _plus_343;
                      } else {
                        DSLExecutor _executor_2 = ((DSLRulePlanner)r).getExecutor();
                        boolean _tripleNotEquals_56 = (_executor_2 != null);
                        if (_tripleNotEquals_56) {
                          String _get_104 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                          String _plus_344 = ((aggregated_3 + "<aggregated from=\'") + _get_104);
                          String _plus_345 = (_plus_344 + "\' to=\'");
                          String _get_105 = this.structureElementPath.get(((DSLRulePlanner)r).getExecutor().getName());
                          String _plus_346 = (_plus_345 + _get_105);
                          String _plus_347 = (_plus_346 + "\'");
                          String _plus_348 = (_plus_347 + relation);
                          aggregated_3 = _plus_348;
                        } else {
                          DSLPlanner _planner2_2 = ((DSLRulePlanner)r).getPlanner2();
                          boolean _tripleNotEquals_57 = (_planner2_2 != null);
                          if (_tripleNotEquals_57) {
                            String _get_106 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                            String _plus_349 = ((aggregated_3 + "<aggregated from=\'") + _get_106);
                            String _plus_350 = (_plus_349 + "\' to=\'");
                            String _get_107 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner2().getName());
                            String _plus_351 = (_plus_350 + _get_107);
                            String _plus_352 = (_plus_351 + "\'");
                            String _plus_353 = (_plus_352 + relation);
                            aggregated_3 = _plus_353;
                          } else {
                            DSLSelfHealingAlt _shalt_6 = ((DSLRulePlanner)r).getShalt();
                            boolean _tripleNotEquals_58 = (_shalt_6 != null);
                            if (_tripleNotEquals_58) {
                              String _get_108 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                              String _plus_354 = ((aggregated_3 + "<aggregated from=\'") + _get_108);
                              String _plus_355 = (_plus_354 + "\' to=\'");
                              String _get_109 = this.structureElementPath.get(((DSLRulePlanner)r).getShalt().getName());
                              String _plus_356 = (_plus_355 + _get_109);
                              String _plus_357 = (_plus_356 + "\'");
                              String _plus_358 = (_plus_357 + relation);
                              aggregated_3 = _plus_358;
                            }
                          }
                        }
                      }
                    }
                    this.aggregatedPath.replace(((DSLRulePlanner)r).getPlanner().getName(), aggregated_3);
                  } else {
                    DSLAnalyzer _analyzer_7 = ((DSLRulePlanner)r).getAnalyzer();
                    boolean _tripleNotEquals_59 = (_analyzer_7 != null);
                    if (_tripleNotEquals_59) {
                      String _get_110 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                      String _plus_359 = ("<aggregated from=\'" + _get_110);
                      String _plus_360 = (_plus_359 + "\' to=\'");
                      String _get_111 = this.structureElementPath.get(((DSLRulePlanner)r).getAnalyzer().getName());
                      String _plus_361 = (_plus_360 + _get_111);
                      String _plus_362 = (_plus_361 + "\'");
                      String _plus_363 = (_plus_362 + relation);
                      aggregated_3 = _plus_363;
                    } else {
                      DSLKnowledge _knowledge_11 = ((DSLRulePlanner)r).getKnowledge();
                      boolean _tripleNotEquals_60 = (_knowledge_11 != null);
                      if (_tripleNotEquals_60) {
                        String _get_112 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                        String _plus_364 = ("<aggregated from=\'" + _get_112);
                        String _plus_365 = (_plus_364 + "\' to=\'");
                        String _get_113 = this.structureElementPath.get(((DSLRulePlanner)r).getKnowledge().getName());
                        String _plus_366 = (_plus_365 + _get_113);
                        String _plus_367 = (_plus_366 + "\'");
                        String _plus_368 = (_plus_367 + relation);
                        aggregated_3 = _plus_368;
                      } else {
                        DSLExecutor _executor_3 = ((DSLRulePlanner)r).getExecutor();
                        boolean _tripleNotEquals_61 = (_executor_3 != null);
                        if (_tripleNotEquals_61) {
                          String _get_114 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                          String _plus_369 = ("<aggregated from=\'" + _get_114);
                          String _plus_370 = (_plus_369 + "\' to=\'");
                          String _get_115 = this.structureElementPath.get(((DSLRulePlanner)r).getExecutor().getName());
                          String _plus_371 = (_plus_370 + _get_115);
                          String _plus_372 = (_plus_371 + "\'");
                          String _plus_373 = (_plus_372 + relation);
                          aggregated_3 = _plus_373;
                        } else {
                          DSLPlanner _planner2_3 = ((DSLRulePlanner)r).getPlanner2();
                          boolean _tripleNotEquals_62 = (_planner2_3 != null);
                          if (_tripleNotEquals_62) {
                            String _get_116 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                            String _plus_374 = ("<aggregated from=\'" + _get_116);
                            String _plus_375 = (_plus_374 + "\' to=\'");
                            String _get_117 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner2().getName());
                            String _plus_376 = (_plus_375 + _get_117);
                            String _plus_377 = (_plus_376 + "\'");
                            String _plus_378 = (_plus_377 + relation);
                            aggregated_3 = _plus_378;
                          } else {
                            DSLSelfHealingAlt _shalt_7 = ((DSLRulePlanner)r).getShalt();
                            boolean _tripleNotEquals_63 = (_shalt_7 != null);
                            if (_tripleNotEquals_63) {
                              String _get_118 = this.structureElementPath.get(((DSLRulePlanner)r).getPlanner().getName());
                              String _plus_379 = ("<aggregated from=\'" + _get_118);
                              String _plus_380 = (_plus_379 + "\' to=\'");
                              String _get_119 = this.structureElementPath.get(((DSLRulePlanner)r).getShalt().getName());
                              String _plus_381 = (_plus_380 + _get_119);
                              String _plus_382 = (_plus_381 + "\'");
                              String _plus_383 = (_plus_382 + relation);
                              aggregated_3 = _plus_383;
                            }
                          }
                        }
                      }
                    }
                    this.aggregatedPath.put(((DSLRulePlanner)r).getPlanner().getName(), aggregated_3);
                  }
                } else {
                  if ((r instanceof DSLRuleExecutor)) {
                    String pathAggregated_4 = this.outAggregatedPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                    if ((pathAggregated_4 != null)) {
                      int _length_36 = pathAggregated_4.length();
                      int _minus_36 = (_length_36 - 1);
                      pathAggregated_4 = pathAggregated_4.substring(0, _minus_36);
                      String _get_120 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                      String _plus_384 = (pathAggregated_4 + _get_120);
                      String _plus_385 = (_plus_384 + "/@aggregated.");
                      String _plus_386 = (_plus_385 + Integer.valueOf(rExecutor));
                      String _plus_387 = (_plus_386 + " \'");
                      pathAggregated_4 = _plus_387;
                      this.outAggregatedPath.replace(((DSLRuleExecutor)r).getExecutor().getName(), pathAggregated_4);
                      DSLPlanner _planner_4 = ((DSLRuleExecutor)r).getPlanner();
                      boolean _tripleNotEquals_64 = (_planner_4 != null);
                      if (_tripleNotEquals_64) {
                        String pathInAggregated_32 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getPlanner().getName());
                        if ((pathInAggregated_32 != null)) {
                          int _length_37 = pathInAggregated_32.length();
                          int _minus_37 = (_length_37 - 1);
                          pathInAggregated_32 = pathInAggregated_32.substring(0, _minus_37);
                          String _get_121 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_388 = (pathInAggregated_32 + _get_121);
                          String _plus_389 = (_plus_388 + "/@aggregated.");
                          String _plus_390 = (_plus_389 + Integer.valueOf(rExecutor));
                          String _plus_391 = (_plus_390 + " \'");
                          pathInAggregated_32 = _plus_391;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getPlanner().getName(), pathInAggregated_32);
                        } else {
                          String _get_122 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_392 = ("inAggregated=\'" + _get_122);
                          String _plus_393 = (_plus_392 + "/@aggregated.");
                          String _plus_394 = (_plus_393 + Integer.valueOf(rExecutor));
                          String _plus_395 = (_plus_394 + " \'");
                          pathInAggregated_32 = _plus_395;
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getPlanner().getName(), pathInAggregated_32);
                        }
                      }
                      DSLKnowledge _knowledge_12 = ((DSLRuleExecutor)r).getKnowledge();
                      boolean _tripleNotEquals_65 = (_knowledge_12 != null);
                      if (_tripleNotEquals_65) {
                        String pathInAggregated_33 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getKnowledge().getName());
                        if ((pathInAggregated_33 != null)) {
                          int _length_38 = pathInAggregated_33.length();
                          int _minus_38 = (_length_38 - 1);
                          pathInAggregated_33 = pathInAggregated_33.substring(0, _minus_38);
                          String _get_123 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_396 = (pathInAggregated_33 + _get_123);
                          String _plus_397 = (_plus_396 + "/@aggregated.");
                          String _plus_398 = (_plus_397 + Integer.valueOf(rExecutor));
                          String _plus_399 = (_plus_398 + " \'");
                          pathInAggregated_33 = _plus_399;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getKnowledge().getName(), pathInAggregated_33);
                        } else {
                          String _get_124 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_400 = ("inAggregated=\'" + _get_124);
                          String _plus_401 = (_plus_400 + "/@aggregated.");
                          String _plus_402 = (_plus_401 + Integer.valueOf(rExecutor));
                          String _plus_403 = (_plus_402 + " \'");
                          pathInAggregated_33 = _plus_403;
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getKnowledge().getName(), pathInAggregated_33);
                        }
                      }
                      DSLEffector _effector = ((DSLRuleExecutor)r).getEffector();
                      boolean _tripleNotEquals_66 = (_effector != null);
                      if (_tripleNotEquals_66) {
                        String pathInAggregated_34 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getEffector().getName());
                        if ((pathInAggregated_34 != null)) {
                          int _length_39 = pathInAggregated_34.length();
                          int _minus_39 = (_length_39 - 1);
                          pathInAggregated_34 = pathInAggregated_34.substring(0, _minus_39);
                          String _get_125 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_404 = (pathInAggregated_34 + _get_125);
                          String _plus_405 = (_plus_404 + "/@aggregated.");
                          String _plus_406 = (_plus_405 + Integer.valueOf(rExecutor));
                          String _plus_407 = (_plus_406 + " \'");
                          pathInAggregated_34 = _plus_407;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getEffector().getName(), pathInAggregated_34);
                        } else {
                          String _get_126 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_408 = ("inAggregated=\'" + _get_126);
                          String _plus_409 = (_plus_408 + "/@aggregated.");
                          String _plus_410 = (_plus_409 + Integer.valueOf(rExecutor));
                          String _plus_411 = (_plus_410 + " \'");
                          pathInAggregated_34 = _plus_411;
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getEffector().getName(), pathInAggregated_34);
                        }
                      }
                      DSLExecutor _executor2 = ((DSLRuleExecutor)r).getExecutor2();
                      boolean _tripleNotEquals_67 = (_executor2 != null);
                      if (_tripleNotEquals_67) {
                        String pathInAggregated_35 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getExecutor2().getName());
                        if ((pathInAggregated_35 != null)) {
                          int _length_40 = pathInAggregated_35.length();
                          int _minus_40 = (_length_40 - 1);
                          pathInAggregated_35 = pathInAggregated_35.substring(0, _minus_40);
                          String _get_127 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_412 = (pathInAggregated_35 + _get_127);
                          String _plus_413 = (_plus_412 + "/@aggregated.");
                          String _plus_414 = (_plus_413 + Integer.valueOf(rExecutor));
                          String _plus_415 = (_plus_414 + " \'");
                          pathInAggregated_35 = _plus_415;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getExecutor2().getName(), pathInAggregated_35);
                        } else {
                          String _get_128 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_416 = ("inAggregated=\'" + _get_128);
                          String _plus_417 = (_plus_416 + "/@aggregated.");
                          String _plus_418 = (_plus_417 + Integer.valueOf(rExecutor));
                          String _plus_419 = (_plus_418 + " \'");
                          pathInAggregated_35 = _plus_419;
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getExecutor2().getName(), pathInAggregated_35);
                        }
                      }
                    } else {
                      String _get_129 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                      String _plus_420 = ("outAggregated=\'" + _get_129);
                      String _plus_421 = (_plus_420 + "/@aggregated.");
                      String _plus_422 = (_plus_421 + Integer.valueOf(rExecutor));
                      String _plus_423 = (_plus_422 + " \'");
                      pathAggregated_4 = _plus_423;
                      this.outAggregatedPath.put(((DSLRuleExecutor)r).getExecutor().getName(), pathAggregated_4);
                      DSLPlanner _planner_5 = ((DSLRuleExecutor)r).getPlanner();
                      boolean _tripleNotEquals_68 = (_planner_5 != null);
                      if (_tripleNotEquals_68) {
                        String pathInAggregated_36 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getPlanner().getName());
                        if ((pathInAggregated_36 != null)) {
                          int _length_41 = pathInAggregated_36.length();
                          int _minus_41 = (_length_41 - 1);
                          pathInAggregated_36 = pathInAggregated_36.substring(0, _minus_41);
                          String _get_130 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_424 = (pathInAggregated_36 + _get_130);
                          String _plus_425 = (_plus_424 + "/@aggregated.");
                          String _plus_426 = (_plus_425 + Integer.valueOf(rExecutor));
                          String _plus_427 = (_plus_426 + " \'");
                          pathInAggregated_36 = _plus_427;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getPlanner().getName(), pathInAggregated_36);
                        } else {
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getPlanner().getName(), pathAggregated_4.replaceFirst("outAggregated", "inAggregated"));
                        }
                      }
                      DSLKnowledge _knowledge_13 = ((DSLRuleExecutor)r).getKnowledge();
                      boolean _tripleNotEquals_69 = (_knowledge_13 != null);
                      if (_tripleNotEquals_69) {
                        String pathInAggregated_37 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getKnowledge().getName());
                        if ((pathInAggregated_37 != null)) {
                          int _length_42 = pathInAggregated_37.length();
                          int _minus_42 = (_length_42 - 1);
                          pathInAggregated_37 = pathInAggregated_37.substring(0, _minus_42);
                          String _get_131 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_428 = (pathInAggregated_37 + _get_131);
                          String _plus_429 = (_plus_428 + "/@aggregated.");
                          String _plus_430 = (_plus_429 + Integer.valueOf(rExecutor));
                          String _plus_431 = (_plus_430 + " \'");
                          pathInAggregated_37 = _plus_431;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getKnowledge().getName(), pathInAggregated_37);
                        } else {
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getKnowledge().getName(), pathAggregated_4.replaceFirst("outAggregated", "inAggregated"));
                        }
                      }
                      DSLEffector _effector_1 = ((DSLRuleExecutor)r).getEffector();
                      boolean _tripleNotEquals_70 = (_effector_1 != null);
                      if (_tripleNotEquals_70) {
                        String pathInAggregated_38 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getEffector().getName());
                        if ((pathInAggregated_38 != null)) {
                          int _length_43 = pathInAggregated_38.length();
                          int _minus_43 = (_length_43 - 1);
                          pathInAggregated_38 = pathInAggregated_38.substring(0, _minus_43);
                          String _get_132 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_432 = (pathInAggregated_38 + _get_132);
                          String _plus_433 = (_plus_432 + "/@aggregated.");
                          String _plus_434 = (_plus_433 + Integer.valueOf(rExecutor));
                          String _plus_435 = (_plus_434 + " \'");
                          pathInAggregated_38 = _plus_435;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getEffector().getName(), pathInAggregated_38);
                        } else {
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getEffector().getName(), pathAggregated_4.replaceFirst("outAggregated", "inAggregated"));
                        }
                      }
                      DSLExecutor _executor2_1 = ((DSLRuleExecutor)r).getExecutor2();
                      boolean _tripleNotEquals_71 = (_executor2_1 != null);
                      if (_tripleNotEquals_71) {
                        String pathInAggregated_39 = this.inAggregatedPath.get(((DSLRuleExecutor)r).getExecutor2().getName());
                        if ((pathInAggregated_39 != null)) {
                          int _length_44 = pathInAggregated_39.length();
                          int _minus_44 = (_length_44 - 1);
                          pathInAggregated_39 = pathInAggregated_39.substring(0, _minus_44);
                          String _get_133 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_436 = (pathInAggregated_39 + _get_133);
                          String _plus_437 = (_plus_436 + "/@aggregated.");
                          String _plus_438 = (_plus_437 + Integer.valueOf(rExecutor));
                          String _plus_439 = (_plus_438 + " \'");
                          pathInAggregated_39 = _plus_439;
                          this.inAggregatedPath.replace(((DSLRuleExecutor)r).getExecutor2().getName(), pathInAggregated_39);
                        } else {
                          this.inAggregatedPath.put(((DSLRuleExecutor)r).getExecutor2().getName(), pathAggregated_4.replaceFirst("outAggregated", "inAggregated"));
                        }
                      }
                    }
                    rExecutor++;
                    String aggregated_4 = this.aggregatedPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                    if ((aggregated_4 != null)) {
                      DSLPlanner _planner_6 = ((DSLRuleExecutor)r).getPlanner();
                      boolean _tripleNotEquals_72 = (_planner_6 != null);
                      if (_tripleNotEquals_72) {
                        String _get_134 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                        String _plus_440 = ((aggregated_4 + "<aggregated from=\'") + _get_134);
                        String _plus_441 = (_plus_440 + "\' to=\'");
                        String _get_135 = this.structureElementPath.get(((DSLRuleExecutor)r).getPlanner().getName());
                        String _plus_442 = (_plus_441 + _get_135);
                        String _plus_443 = (_plus_442 + "\'");
                        String _plus_444 = (_plus_443 + relation);
                        aggregated_4 = _plus_444;
                      } else {
                        DSLKnowledge _knowledge_14 = ((DSLRuleExecutor)r).getKnowledge();
                        boolean _tripleNotEquals_73 = (_knowledge_14 != null);
                        if (_tripleNotEquals_73) {
                          String _get_136 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_445 = ((aggregated_4 + "<aggregated from=\'") + _get_136);
                          String _plus_446 = (_plus_445 + "\' to=\'");
                          String _get_137 = this.structureElementPath.get(((DSLRuleExecutor)r).getKnowledge().getName());
                          String _plus_447 = (_plus_446 + _get_137);
                          String _plus_448 = (_plus_447 + "\'");
                          String _plus_449 = (_plus_448 + relation);
                          aggregated_4 = _plus_449;
                        } else {
                          DSLEffector _effector_2 = ((DSLRuleExecutor)r).getEffector();
                          boolean _tripleNotEquals_74 = (_effector_2 != null);
                          if (_tripleNotEquals_74) {
                            String _get_138 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                            String _plus_450 = ((aggregated_4 + "<aggregated from=\'") + _get_138);
                            String _plus_451 = (_plus_450 + "\' to=\'");
                            String _get_139 = this.structureElementPath.get(((DSLRuleExecutor)r).getEffector().getName());
                            String _plus_452 = (_plus_451 + _get_139);
                            String _plus_453 = (_plus_452 + "\'");
                            String _plus_454 = (_plus_453 + relation);
                            aggregated_4 = _plus_454;
                          } else {
                            DSLExecutor _executor2_2 = ((DSLRuleExecutor)r).getExecutor2();
                            boolean _tripleNotEquals_75 = (_executor2_2 != null);
                            if (_tripleNotEquals_75) {
                              String _get_140 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                              String _plus_455 = ((aggregated_4 + "<aggregated from=\'") + _get_140);
                              String _plus_456 = (_plus_455 + "\' to=\'");
                              String _get_141 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor2().getName());
                              String _plus_457 = (_plus_456 + _get_141);
                              String _plus_458 = (_plus_457 + "\'");
                              String _plus_459 = (_plus_458 + relation);
                              aggregated_4 = _plus_459;
                            }
                          }
                        }
                      }
                      this.aggregatedPath.replace(((DSLRuleExecutor)r).getExecutor().getName(), aggregated_4);
                    } else {
                      DSLPlanner _planner_7 = ((DSLRuleExecutor)r).getPlanner();
                      boolean _tripleNotEquals_76 = (_planner_7 != null);
                      if (_tripleNotEquals_76) {
                        String _get_142 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                        String _plus_460 = ("<aggregated from=\'" + _get_142);
                        String _plus_461 = (_plus_460 + "\' to=\'");
                        String _get_143 = this.structureElementPath.get(((DSLRuleExecutor)r).getPlanner().getName());
                        String _plus_462 = (_plus_461 + _get_143);
                        String _plus_463 = (_plus_462 + "\'");
                        String _plus_464 = (_plus_463 + relation);
                        aggregated_4 = _plus_464;
                      } else {
                        DSLKnowledge _knowledge_15 = ((DSLRuleExecutor)r).getKnowledge();
                        boolean _tripleNotEquals_77 = (_knowledge_15 != null);
                        if (_tripleNotEquals_77) {
                          String _get_144 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                          String _plus_465 = ("<aggregated from=\'" + _get_144);
                          String _plus_466 = (_plus_465 + "\' to=\'");
                          String _get_145 = this.structureElementPath.get(((DSLRuleExecutor)r).getKnowledge().getName());
                          String _plus_467 = (_plus_466 + _get_145);
                          String _plus_468 = (_plus_467 + "\'");
                          String _plus_469 = (_plus_468 + relation);
                          aggregated_4 = _plus_469;
                        } else {
                          DSLEffector _effector_3 = ((DSLRuleExecutor)r).getEffector();
                          boolean _tripleNotEquals_78 = (_effector_3 != null);
                          if (_tripleNotEquals_78) {
                            String _get_146 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                            String _plus_470 = ("<aggregated from=\'" + _get_146);
                            String _plus_471 = (_plus_470 + "\' to=\'");
                            String _get_147 = this.structureElementPath.get(((DSLRuleExecutor)r).getEffector().getName());
                            String _plus_472 = (_plus_471 + _get_147);
                            String _plus_473 = (_plus_472 + "\'");
                            String _plus_474 = (_plus_473 + relation);
                            aggregated_4 = _plus_474;
                          } else {
                            DSLExecutor _executor2_3 = ((DSLRuleExecutor)r).getExecutor2();
                            boolean _tripleNotEquals_79 = (_executor2_3 != null);
                            if (_tripleNotEquals_79) {
                              String _get_148 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor().getName());
                              String _plus_475 = ("<aggregated from=\'" + _get_148);
                              String _plus_476 = (_plus_475 + "\' to=\'");
                              String _get_149 = this.structureElementPath.get(((DSLRuleExecutor)r).getExecutor2().getName());
                              String _plus_477 = (_plus_476 + _get_149);
                              String _plus_478 = (_plus_477 + "\'");
                              String _plus_479 = (_plus_478 + relation);
                              aggregated_4 = _plus_479;
                            }
                          }
                        }
                      }
                      this.aggregatedPath.put(((DSLRuleExecutor)r).getExecutor().getName(), aggregated_4);
                    }
                  } else {
                    if ((r instanceof DSLRuleMO)) {
                      String pathAggregated_5 = this.outAggregatedPath.get(((DSLRuleMO)r).getSensor().getName());
                      if ((pathAggregated_5 != null)) {
                        int _length_45 = pathAggregated_5.length();
                        int _minus_45 = (_length_45 - 1);
                        pathAggregated_5 = pathAggregated_5.substring(0, _minus_45);
                        String _get_150 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                        String _plus_480 = (pathAggregated_5 + _get_150);
                        String _plus_481 = (_plus_480 + "/@aggregated.");
                        String _plus_482 = (_plus_481 + Integer.valueOf(rMO));
                        String _plus_483 = (_plus_482 + " \'");
                        pathAggregated_5 = _plus_483;
                        this.outAggregatedPath.replace(((DSLRuleMO)r).getSensor().getName(), pathAggregated_5);
                        DSLMeasuredOutput _measured = ((DSLRuleMO)r).getMeasured();
                        boolean _tripleNotEquals_80 = (_measured != null);
                        if (_tripleNotEquals_80) {
                          String pathInAggregated_40 = this.inAggregatedPath.get(((DSLRuleMO)r).getMeasured().getName());
                          if ((pathInAggregated_40 != null)) {
                            int _length_46 = pathInAggregated_40.length();
                            int _minus_46 = (_length_46 - 1);
                            pathInAggregated_40 = pathInAggregated_40.substring(0, _minus_46);
                            String _get_151 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                            String _plus_484 = (pathInAggregated_40 + _get_151);
                            String _plus_485 = (_plus_484 + "/@aggregated.");
                            String _plus_486 = (_plus_485 + Integer.valueOf(rMO));
                            String _plus_487 = (_plus_486 + " \'");
                            pathInAggregated_40 = _plus_487;
                            this.inAggregatedPath.replace(((DSLRuleMO)r).getMeasured().getName(), pathInAggregated_40);
                          } else {
                            String _get_152 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                            String _plus_488 = ("inAggregated=\'" + _get_152);
                            String _plus_489 = (_plus_488 + "/@aggregated.");
                            String _plus_490 = (_plus_489 + Integer.valueOf(rMO));
                            String _plus_491 = (_plus_490 + " \'");
                            pathInAggregated_40 = _plus_491;
                            this.inAggregatedPath.put(((DSLRuleMO)r).getMeasured().getName(), pathInAggregated_40);
                          }
                        }
                      } else {
                        String _get_153 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                        String _plus_492 = ("outAggregated=\'" + _get_153);
                        String _plus_493 = (_plus_492 + "/@aggregated.");
                        String _plus_494 = (_plus_493 + Integer.valueOf(rMO));
                        String _plus_495 = (_plus_494 + " \'");
                        pathAggregated_5 = _plus_495;
                        this.outAggregatedPath.put(((DSLRuleMO)r).getSensor().getName(), pathAggregated_5);
                        DSLMeasuredOutput _measured_1 = ((DSLRuleMO)r).getMeasured();
                        boolean _tripleNotEquals_81 = (_measured_1 != null);
                        if (_tripleNotEquals_81) {
                          String pathInAggregated_41 = this.inAggregatedPath.get(((DSLRuleMO)r).getMeasured().getName());
                          if ((pathInAggregated_41 != null)) {
                            int _length_47 = pathInAggregated_41.length();
                            int _minus_47 = (_length_47 - 1);
                            pathInAggregated_41 = pathInAggregated_41.substring(0, _minus_47);
                            String _get_154 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                            String _plus_496 = (pathInAggregated_41 + _get_154);
                            String _plus_497 = (_plus_496 + "/@aggregated.");
                            String _plus_498 = (_plus_497 + Integer.valueOf(rMO));
                            String _plus_499 = (_plus_498 + " \'");
                            pathInAggregated_41 = _plus_499;
                            this.inAggregatedPath.replace(((DSLRuleMO)r).getMeasured().getName(), pathInAggregated_41);
                          } else {
                            this.inAggregatedPath.put(((DSLRuleMO)r).getMeasured().getName(), pathAggregated_5.replaceFirst("outAggregated", "inAggregated"));
                          }
                        }
                      }
                      rMO++;
                      String aggregated_5 = this.aggregatedPath.get(((DSLRuleMO)r).getSensor().getName());
                      if ((aggregated_5 != null)) {
                        DSLSensor _sensor_4 = ((DSLRuleMO)r).getSensor();
                        boolean _tripleNotEquals_82 = (_sensor_4 != null);
                        if (_tripleNotEquals_82) {
                          String _get_155 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                          String _plus_500 = ((aggregated_5 + "<aggregated from=\'") + _get_155);
                          String _plus_501 = (_plus_500 + "\' to=\'");
                          String _get_156 = this.structureElementPath.get(((DSLRuleMO)r).getMeasured().getName());
                          String _plus_502 = (_plus_501 + _get_156);
                          String _plus_503 = (_plus_502 + "\'");
                          String _plus_504 = (_plus_503 + relation);
                          aggregated_5 = _plus_504;
                        }
                        this.aggregatedPath.replace(((DSLRuleMO)r).getSensor().getName(), aggregated_5);
                      } else {
                        DSLSensor _sensor_5 = ((DSLRuleMO)r).getSensor();
                        boolean _tripleNotEquals_83 = (_sensor_5 != null);
                        if (_tripleNotEquals_83) {
                          String _get_157 = this.structureElementPath.get(((DSLRuleMO)r).getSensor().getName());
                          String _plus_505 = ("<aggregated from=\'" + _get_157);
                          String _plus_506 = (_plus_505 + "\' to=\'");
                          String _get_158 = this.structureElementPath.get(((DSLRuleMO)r).getMeasured().getName());
                          String _plus_507 = (_plus_506 + _get_158);
                          String _plus_508 = (_plus_507 + "\'");
                          String _plus_509 = (_plus_508 + relation);
                          aggregated_5 = _plus_509;
                        }
                        this.aggregatedPath.put(((DSLRuleMO)r).getSensor().getName(), aggregated_5);
                      }
                    } else {
                      if ((r instanceof DSLRuleMController)) {
                        String pathAggregated_6 = this.outAggregatedPath.get(((DSLRuleMController)r).getMcontroller1());
                        if ((pathAggregated_6 != null)) {
                          int _length_48 = pathAggregated_6.length();
                          int _minus_48 = (_length_48 - 1);
                          pathAggregated_6 = pathAggregated_6.substring(0, _minus_48);
                          String _get_159 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                          String _plus_510 = (pathAggregated_6 + _get_159);
                          String _plus_511 = (_plus_510 + "/@aggregated.");
                          String _plus_512 = (_plus_511 + Integer.valueOf(rMController));
                          String _plus_513 = (_plus_512 + " \'");
                          pathAggregated_6 = _plus_513;
                          this.outAggregatedPath.replace(((DSLRuleMController)r).getMcontroller1().getName(), pathAggregated_6);
                          DSLManagerController _mcontroller2 = ((DSLRuleMController)r).getMcontroller2();
                          boolean _tripleNotEquals_84 = (_mcontroller2 != null);
                          if (_tripleNotEquals_84) {
                            String pathInAggregated_42 = this.inAggregatedPath.get(((DSLRuleMController)r).getMcontroller2().getName());
                            if ((pathInAggregated_42 != null)) {
                              int _length_49 = pathInAggregated_42.length();
                              int _minus_49 = (_length_49 - 1);
                              pathInAggregated_42 = pathInAggregated_42.substring(0, _minus_49);
                              String _get_160 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                              String _plus_514 = (pathInAggregated_42 + _get_160);
                              String _plus_515 = (_plus_514 + "/@aggregated.");
                              String _plus_516 = (_plus_515 + Integer.valueOf(rMController));
                              String _plus_517 = (_plus_516 + " \'");
                              pathInAggregated_42 = _plus_517;
                              this.inAggregatedPath.replace(((DSLRuleMController)r).getMcontroller2().getName(), pathInAggregated_42);
                            } else {
                              String _get_161 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                              String _plus_518 = ("inAggregated=\'" + _get_161);
                              String _plus_519 = (_plus_518 + "/@aggregated.");
                              String _plus_520 = (_plus_519 + Integer.valueOf(rMController));
                              String _plus_521 = (_plus_520 + " \'");
                              pathInAggregated_42 = _plus_521;
                              this.inAggregatedPath.put(((DSLRuleMController)r).getMcontroller2().getName(), pathInAggregated_42);
                            }
                          }
                        } else {
                          String _get_162 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                          String _plus_522 = ("outAggregated=\'" + _get_162);
                          String _plus_523 = (_plus_522 + "/@aggregated.");
                          String _plus_524 = (_plus_523 + Integer.valueOf(rMController));
                          String _plus_525 = (_plus_524 + " \'");
                          pathAggregated_6 = _plus_525;
                          this.outAggregatedPath.put(((DSLRuleMController)r).getMcontroller1().getName(), pathAggregated_6);
                          DSLManagerController _mcontroller2_1 = ((DSLRuleMController)r).getMcontroller2();
                          boolean _tripleNotEquals_85 = (_mcontroller2_1 != null);
                          if (_tripleNotEquals_85) {
                            String pathInAggregated_43 = this.inAggregatedPath.get(((DSLRuleMController)r).getMcontroller2().getName());
                            if ((pathInAggregated_43 != null)) {
                              int _length_50 = pathInAggregated_43.length();
                              int _minus_50 = (_length_50 - 1);
                              pathInAggregated_43 = pathInAggregated_43.substring(0, _minus_50);
                              String _get_163 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                              String _plus_526 = (pathInAggregated_43 + _get_163);
                              String _plus_527 = (_plus_526 + "/@aggregated.");
                              String _plus_528 = (_plus_527 + Integer.valueOf(rMController));
                              String _plus_529 = (_plus_528 + " \'");
                              pathInAggregated_43 = _plus_529;
                              this.inAggregatedPath.replace(((DSLRuleMController)r).getMcontroller2().getName(), pathInAggregated_43);
                            } else {
                              this.inAggregatedPath.put(((DSLRuleMController)r).getMcontroller2().getName(), pathAggregated_6.replaceFirst("outAggregated", "inAggregated"));
                            }
                          }
                        }
                        rMController++;
                        String aggregated_6 = this.aggregatedPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                        if ((aggregated_6 != null)) {
                          DSLManagerController _mcontroller2_2 = ((DSLRuleMController)r).getMcontroller2();
                          boolean _tripleNotEquals_86 = (_mcontroller2_2 != null);
                          if (_tripleNotEquals_86) {
                            String _get_164 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                            String _plus_530 = ((aggregated_6 + "<aggregated from=\'") + _get_164);
                            String _plus_531 = (_plus_530 + "\' to=\'");
                            String _get_165 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller2().getName());
                            String _plus_532 = (_plus_531 + _get_165);
                            String _plus_533 = (_plus_532 + "\'");
                            String _plus_534 = (_plus_533 + relation);
                            aggregated_6 = _plus_534;
                          }
                          this.aggregatedPath.replace(((DSLRuleMController)r).getMcontroller1().getName(), aggregated_6);
                        } else {
                          DSLManagerController _mcontroller2_3 = ((DSLRuleMController)r).getMcontroller2();
                          boolean _tripleNotEquals_87 = (_mcontroller2_3 != null);
                          if (_tripleNotEquals_87) {
                            String _get_166 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller1().getName());
                            String _plus_535 = ("<aggregated from=\'" + _get_166);
                            String _plus_536 = (_plus_535 + "\' to=\'");
                            String _get_167 = this.structureElementPath.get(((DSLRuleMController)r).getMcontroller2().getName());
                            String _plus_537 = (_plus_536 + _get_167);
                            String _plus_538 = (_plus_537 + "\'");
                            String _plus_539 = (_plus_538 + relation);
                            aggregated_6 = _plus_539;
                          }
                          this.aggregatedPath.put(((DSLRuleMController)r).getMcontroller1().getName(), aggregated_6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public CharSequence compile(final ArchitectureDefinition architectureDefinition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:action=\"http://www.eclipse.org/MoDisco/kdm/action\" xmlns:code=\"http://www.eclipse.org/MoDisco/kdm/code\" xmlns:kdm=\"http://www.eclipse.org/MoDisco/kdm/kdm\" xmlns:source=\"http://www.eclipse.org/MoDisco/kdm/source\" xmlns:structure=\"http://www.eclipse.org/MoDisco/kdm/structure\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<kdm:Segment name=\"Planned Architecture\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<model xsi:type=\"code:CodeModel\" name=\"Elements Instances\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<codeElement xsi:type=\"code:Module\" name=\"Module Instance\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<codeElement xsi:type=\"code:CodeElement\" name=\"codeElement Instance\">");
    _builder.newLine();
    _builder.append("\t       \t\t");
    _builder.append("<codeRelation xsi:type=\"code:Extends\"/>");
    _builder.newLine();
    _builder.append("\t       \t\t");
    _builder.append("<codeRelation xsi:type=\"code:Implements\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<codeRelation xsi:type=\"code:HasValue\"/>");
    _builder.newLine();
    _builder.append("\t      \t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<codeElement xsi:type=\"action:ActionElement\" name=\"actionElement Instance\">");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:Calls\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:UsesType\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:Creates\"/>");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</model>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<extension xsi:type=\"kdm:ExtensionFamily\" name=\"Adaptive System Domain\">");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Monitor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Analyzer\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Planner\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Executor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Knowledge\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Reference Input\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Measured Output\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Control Loop Manager\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Control Loop\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Sensor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Effector\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Managing Subsystem\" type=\"structure:Subsystem\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Managed Subsystem\" type=\"structure:Subsystem\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Self-Healing Alternative\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<model xsi:type=\"structure:StructureModel\" name=\"ArchitecturalView_\">");
    _builder.newLine();
    {
      EList<DSLManaging> _managing = architectureDefinition.getManaging();
      for(final DSLManaging arch : _managing) {
        _builder.append("\t\t");
        _builder.append("<structureElement xsi:type=\"structure:Subsystem\" name=\"");
        String _name = arch.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.11\">");
        _builder.newLineIfNotEmpty();
        {
          EList<DSLManagerController> _managerController = arch.getManagerController();
          for(final DSLManagerController mcontroller : _managerController) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_1 = mcontroller.getName();
            _builder.append(_name_1, "\t\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.7\">");
            _builder.newLineIfNotEmpty();
            {
              EList<DSLController> _controller = mcontroller.getController();
              for(final DSLController controller : _controller) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_2 = controller.getName();
                _builder.append(_name_2, "\t\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.8\" ");
                String _get = this.outAggregatedPath.get(controller.getName());
                _builder.append(_get, "\t\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("\t");
                String _get_1 = this.aggregatedPath.get(controller.getName());
                _builder.append(_get_1, "\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                {
                  EList<DSLMonitor> _monitor = controller.getMonitor();
                  for(final DSLMonitor monitor : _monitor) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_3 = monitor.getName();
                    _builder.append(_name_3, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.0\" ");
                    String _get_2 = this.outAggregatedPath.get(monitor.getName());
                    _builder.append(_get_2, "\t\t\t\t\t\t");
                    _builder.append(" ");
                    String _get_3 = this.inAggregatedPath.get(monitor.getName());
                    _builder.append(_get_3, "\t\t\t\t\t\t");
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    String _get_4 = this.aggregatedPath.get(monitor.getName());
                    _builder.append(_get_4, "\t\t\t\t\t\t\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLAnalyzer> _analyzer = controller.getAnalyzer();
                  for(final DSLAnalyzer analyzer : _analyzer) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_4 = analyzer.getName();
                    _builder.append(_name_4, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.1\" ");
                    String _get_5 = this.outAggregatedPath.get(analyzer.getName());
                    _builder.append(_get_5, "\t\t\t\t\t\t");
                    _builder.append(" ");
                    String _get_6 = this.inAggregatedPath.get(analyzer.getName());
                    _builder.append(_get_6, "\t\t\t\t\t\t");
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    String _get_7 = this.aggregatedPath.get(analyzer.getName());
                    _builder.append(_get_7, "\t\t\t\t\t\t\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLPlanner> _planner = controller.getPlanner();
                  for(final DSLPlanner planner : _planner) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_5 = planner.getName();
                    _builder.append(_name_5, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.2\" ");
                    String _get_8 = this.outAggregatedPath.get(planner.getName());
                    _builder.append(_get_8, "\t\t\t\t\t\t");
                    _builder.append(" ");
                    String _get_9 = this.inAggregatedPath.get(planner.getName());
                    _builder.append(_get_9, "\t\t\t\t\t\t");
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    String _get_10 = this.aggregatedPath.get(planner.getName());
                    _builder.append(_get_10, "\t\t\t\t\t\t\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLExecutor> _executor = controller.getExecutor();
                  for(final DSLExecutor executor : _executor) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_6 = executor.getName();
                    _builder.append(_name_6, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.3\" ");
                    String _get_11 = this.outAggregatedPath.get(executor.getName());
                    _builder.append(_get_11, "\t\t\t\t\t\t");
                    _builder.append(" ");
                    String _get_12 = this.inAggregatedPath.get(executor.getName());
                    _builder.append(_get_12, "\t\t\t\t\t\t");
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    String _get_13 = this.aggregatedPath.get(executor.getName());
                    _builder.append(_get_13, "\t\t\t\t\t\t\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLKnowledge> _knowledge = controller.getKnowledge();
                  for(final DSLKnowledge knowledge : _knowledge) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_7 = knowledge.getName();
                    _builder.append(_name_7, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.4\" ");
                    String _get_14 = this.inAggregatedPath.get(knowledge.getName());
                    _builder.append(_get_14, "\t\t\t\t\t\t");
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<DSLReferenceInput> _referenceInput = knowledge.getReferenceInput();
                      for(final DSLReferenceInput referenceInput : _referenceInput) {
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                        String _name_8 = referenceInput.getName();
                        _builder.append(_name_8, "\t\t\t\t\t\t\t");
                        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.5\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      EList<DSLSelfHealingAlt> _shalt = knowledge.getShalt();
                      for(final DSLSelfHealingAlt shalt : _shalt) {
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                        String _name_9 = shalt.getName();
                        _builder.append(_name_9, "\t\t\t\t\t\t\t");
                        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.13\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
          }
        }
        {
          EList<DSLController> _controller_1 = arch.getController();
          for(final DSLController controller_1 : _controller_1) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_10 = controller_1.getName();
            _builder.append(_name_10, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.8\"  ");
            String _get_15 = this.outAggregatedPath.get(controller_1.getName());
            _builder.append(_get_15, "\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            String _get_16 = this.aggregatedPath.get(controller_1.getName());
            _builder.append(_get_16, "\t\t\t\t");
            _builder.newLineIfNotEmpty();
            {
              EList<DSLMonitor> _monitor_1 = controller_1.getMonitor();
              for(final DSLMonitor monitor_1 : _monitor_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_11 = monitor_1.getName();
                _builder.append(_name_11, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.0\" ");
                String _get_17 = this.outAggregatedPath.get(monitor_1.getName());
                _builder.append(_get_17, "\t\t\t\t");
                _builder.append(" ");
                String _get_18 = this.inAggregatedPath.get(monitor_1.getName());
                _builder.append(_get_18, "\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                String _get_19 = this.aggregatedPath.get(monitor_1.getName());
                _builder.append(_get_19, "\t\t\t\t\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLAnalyzer> _analyzer_1 = controller_1.getAnalyzer();
              for(final DSLAnalyzer analyzer_1 : _analyzer_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_12 = analyzer_1.getName();
                _builder.append(_name_12, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.1\" ");
                String _get_20 = this.outAggregatedPath.get(analyzer_1.getName());
                _builder.append(_get_20, "\t\t\t\t");
                _builder.append(" ");
                String _get_21 = this.inAggregatedPath.get(analyzer_1.getName());
                _builder.append(_get_21, "\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                String _get_22 = this.aggregatedPath.get(analyzer_1.getName());
                _builder.append(_get_22, "\t\t\t\t\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLPlanner> _planner_1 = controller_1.getPlanner();
              for(final DSLPlanner planner_1 : _planner_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_13 = planner_1.getName();
                _builder.append(_name_13, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.2\" ");
                String _get_23 = this.outAggregatedPath.get(planner_1.getName());
                _builder.append(_get_23, "\t\t\t\t");
                _builder.append(" ");
                String _get_24 = this.inAggregatedPath.get(planner_1.getName());
                _builder.append(_get_24, "\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                String _get_25 = this.aggregatedPath.get(planner_1.getName());
                _builder.append(_get_25, "\t\t\t\t\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLExecutor> _executor_1 = controller_1.getExecutor();
              for(final DSLExecutor executor_1 : _executor_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_14 = executor_1.getName();
                _builder.append(_name_14, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.3\" ");
                String _get_26 = this.outAggregatedPath.get(executor_1.getName());
                _builder.append(_get_26, "\t\t\t\t");
                _builder.append(" ");
                String _get_27 = this.inAggregatedPath.get(executor_1.getName());
                _builder.append(_get_27, "\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                String _get_28 = this.aggregatedPath.get(executor_1.getName());
                _builder.append(_get_28, "\t\t\t\t\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLKnowledge> _knowledge_1 = controller_1.getKnowledge();
              for(final DSLKnowledge knowledge_1 : _knowledge_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_15 = knowledge_1.getName();
                _builder.append(_name_15, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.4\" ");
                String _get_29 = this.inAggregatedPath.get(knowledge_1.getName());
                _builder.append(_get_29, "\t\t\t\t");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                {
                  EList<DSLReferenceInput> _referenceInput_1 = knowledge_1.getReferenceInput();
                  for(final DSLReferenceInput referenceInput_1 : _referenceInput_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_16 = referenceInput_1.getName();
                    _builder.append(_name_16, "\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.5\" ");
                    String _get_30 = this.inAggregatedPath.get(referenceInput_1.getName());
                    _builder.append(_get_30, "\t\t\t\t\t");
                    _builder.append(" />");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  EList<DSLSelfHealingAlt> _shalt_1 = knowledge_1.getShalt();
                  for(final DSLSelfHealingAlt shalt_1 : _shalt_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_17 = shalt_1.getName();
                    _builder.append(_name_17, "\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.13\" ");
                    String _get_31 = this.inAggregatedPath.get(shalt_1.getName());
                    _builder.append(_get_31, "\t\t\t\t\t");
                    _builder.append(" />");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("</structureElement>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<DSLManaged> _managed = architectureDefinition.getManaged();
      for(final DSLManaged arch_1 : _managed) {
        _builder.append("\t\t");
        _builder.append("<structureElement xsi:type=\"structure:Subsystem\" name=\"");
        String _name_18 = arch_1.getName();
        _builder.append(_name_18, "\t\t");
        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.12\">");
        _builder.newLineIfNotEmpty();
        {
          EList<DSLSensor> _sensor = arch_1.getSensor();
          for(final DSLSensor sensor : _sensor) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_19 = sensor.getName();
            _builder.append(_name_19, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.9\" ");
            String _get_32 = this.outAggregatedPath.get(sensor.getName());
            _builder.append(_get_32, "\t\t\t");
            _builder.append(" ");
            String _get_33 = this.inAggregatedPath.get(sensor.getName());
            _builder.append(_get_33, "\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            String _get_34 = this.aggregatedPath.get(sensor.getName());
            _builder.append(_get_34, "\t\t\t\t");
            _builder.append("\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        {
          EList<DSLEffector> _effector = arch_1.getEffector();
          for(final DSLEffector effector : _effector) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_20 = effector.getName();
            _builder.append(_name_20, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.10\" ");
            String _get_35 = this.inAggregatedPath.get(effector.getName());
            _builder.append(_get_35, "\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        {
          EList<DSLMeasuredOutput> _measuredOutput = arch_1.getMeasuredOutput();
          for(final DSLMeasuredOutput measuredOutput : _measuredOutput) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_21 = measuredOutput.getName();
            _builder.append(_name_21, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.6\" ");
            String _get_36 = this.inAggregatedPath.get(measuredOutput.getName());
            _builder.append(_get_36, "\t\t\t");
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("</structureElement>\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</model>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</kdm:Segment>\t");
    _builder.newLine();
    _builder.append("</xmi:XMI>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile2(final ArchitectureDefinition architectureDefinition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/core\'");
    _builder.newLine();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/kdm\'");
    _builder.newLine();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/source\'");
    _builder.newLine();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/code\'");
    _builder.newLine();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/action\'");
    _builder.newLine();
    _builder.append("import \'http://www.eclipse.org/MoDisco/kdm/structure\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package structure");
    _builder.newLine();
    _builder.newLine();
    _builder.append("---------------------------------------------------------");
    _builder.newLine();
    _builder.append("-- Check the existence of adaptive system abstractions --");
    _builder.newLine();
    _builder.append("---------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    {
      for(final DSLManaging managing : this.lManaging) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name = managing.getName();
        _builder.append(_name, "\t");
        _builder.append(": Subsystem.allInstances()->exists(c| c.name=\'");
        String _name_1 = managing.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Managing Subsystem\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLManaged managed : this.lManaged) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_2 = managed.getName();
        _builder.append(_name_2, "\t");
        _builder.append(": Subsystem.allInstances()->exists(c| c.name=\'");
        String _name_3 = managed.getName();
        _builder.append(_name_3, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Managed Subsystem\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLManagerController mcontroller : this.lMController) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_4 = mcontroller.getName();
        _builder.append(_name_4, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_5 = mcontroller.getName();
        _builder.append(_name_5, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'CL Manager\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLController controller : this.lController) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_6 = controller.getName();
        _builder.append(_name_6, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_7 = controller.getName();
        _builder.append(_name_7, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Control Loop\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLMonitor monitor : this.lMonitor) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_8 = monitor.getName();
        _builder.append(_name_8, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_9 = monitor.getName();
        _builder.append(_name_9, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Monitor\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLAnalyzer analyzer : this.lAnalyzer) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_10 = analyzer.getName();
        _builder.append(_name_10, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_11 = analyzer.getName();
        _builder.append(_name_11, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Analyzer\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLPlanner planner : this.lPlanner) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_12 = planner.getName();
        _builder.append(_name_12, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_13 = planner.getName();
        _builder.append(_name_13, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Planner\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLExecutor executor : this.lExecutor) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_14 = executor.getName();
        _builder.append(_name_14, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_15 = executor.getName();
        _builder.append(_name_15, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Executor\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLKnowledge knowledge : this.lKnowledge) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_16 = knowledge.getName();
        _builder.append(_name_16, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_17 = knowledge.getName();
        _builder.append(_name_17, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Knowledge\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLEffector effector : this.lEffector) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_18 = effector.getName();
        _builder.append(_name_18, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_19 = effector.getName();
        _builder.append(_name_19, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Effector\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLSensor sensor : this.lSensor) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_20 = sensor.getName();
        _builder.append(_name_20, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_21 = sensor.getName();
        _builder.append(_name_21, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Sensor\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLMeasuredOutput mesOutput : this.lMOutput) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_22 = mesOutput.getName();
        _builder.append(_name_22, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_23 = mesOutput.getName();
        _builder.append(_name_23, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Measured Output\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLReferenceInput refInput : this.lRInput) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_24 = refInput.getName();
        _builder.append(_name_24, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_25 = refInput.getName();
        _builder.append(_name_25, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Reference Input\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final DSLSelfHealingAlt shalt : this.lAlternative) {
        _builder.append("\t");
        _builder.append("context StructureModel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("inv exist_");
        String _name_26 = shalt.getName();
        _builder.append(_name_26, "\t");
        _builder.append(": Component.allInstances()->exists(c| c.name=\'");
        String _name_27 = shalt.getName();
        _builder.append(_name_27, "\t");
        _builder.append("\' and c.stereotype->asSequence()->first().name = \'Self-Healing Alternative\')");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("--------------------------------------------------------");
    _builder.newLine();
    _builder.append("-- Check compositions of adaptive system abstractions --");
    _builder.newLine();
    _builder.append("--------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    {
      for(final DSLManaging managing_1 : this.lManaging) {
        {
          EObject _eContainer = managing_1.eContainer();
          if ((_eContainer instanceof ArchitectureDefinition)) {
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_28 = managing_1.getName();
            _builder.append(_name_28, "\t");
            _builder.append(": Subsystem.allInstances()->select(c| c.name=\'");
            String _name_29 = managing_1.getName();
            _builder.append(_name_29, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Managing Subsystem\') -> exists(d|d.oclContainer().oclIsTypeOf(StructureModel))");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLManaged managed_1 : this.lManaged) {
        {
          EObject _eContainer_1 = managed_1.eContainer();
          if ((_eContainer_1 instanceof ArchitectureDefinition)) {
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_30 = managed_1.getName();
            _builder.append(_name_30, "\t");
            _builder.append(": Subsystem.allInstances()->select(c| c.name=\'");
            String _name_31 = managed_1.getName();
            _builder.append(_name_31, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Managed Subsystem\') -> exists(d|d.oclContainer().oclIsTypeOf(StructureModel))");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLManagerController mcontroller_1 : this.lMController) {
        {
          EObject _eContainer_2 = mcontroller_1.eContainer();
          if ((_eContainer_2 instanceof DSLManaging)) {
            _builder.append("\t");
            EObject _eContainer_3 = mcontroller_1.eContainer();
            DSLManaging managing_2 = ((DSLManaging) _eContainer_3);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_32 = mcontroller_1.getName();
            _builder.append(_name_32, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_33 = mcontroller_1.getName();
            _builder.append(_name_33, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'CL Manager\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
            String _name_34 = managing_2.getName();
            _builder.append(_name_34, "\t\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = \'Managing Subsystem\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final DSLController controller_1 : this.lController) {
        {
          EObject _eContainer_4 = controller_1.eContainer();
          if ((_eContainer_4 instanceof DSLManaging)) {
            _builder.append("\t");
            EObject _eContainer_5 = controller_1.eContainer();
            DSLManaging managing_3 = ((DSLManaging) _eContainer_5);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_35 = controller_1.getName();
            _builder.append(_name_35, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_36 = controller_1.getName();
            _builder.append(_name_36, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'CL Manager\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
            String _name_37 = managing_3.getName();
            _builder.append(_name_37, "\t\t\t\t\t\t\t\t\t ");
            _builder.append("\' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = \'Managing Subsystem\')");
            _builder.newLineIfNotEmpty();
          } else {
            EObject _eContainer_6 = controller_1.eContainer();
            if ((_eContainer_6 instanceof DSLManagerController)) {
              _builder.append("\t");
              EObject _eContainer_7 = controller_1.eContainer();
              DSLManagerController mcontroller_2 = ((DSLManagerController) _eContainer_7);
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("context StructureModel");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("inv composite_");
              String _name_38 = controller_1.getName();
              _builder.append(_name_38, "\t\t\t");
              _builder.append(": Component.allInstances()->select(c| c.name=\'");
              String _name_39 = controller_1.getName();
              _builder.append(_name_39, "\t\t\t");
              _builder.append("\' and c.stereotype->asSequence()->first().name = \'CL Manager\')->");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t\t\t\t\t\t ");
              _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
              String _name_40 = mcontroller_2.getName();
              _builder.append(_name_40, "\t\t\t\t\t\t\t\t\t\t\t ");
              _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'CL Manager\')");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLMonitor monitor_1 : this.lMonitor) {
        {
          EObject _eContainer_8 = monitor_1.eContainer();
          if ((_eContainer_8 instanceof DSLController)) {
            _builder.append("\t");
            EObject _eContainer_9 = monitor_1.eContainer();
            DSLController controller_2 = ((DSLController) _eContainer_9);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_41 = monitor_1.getName();
            _builder.append(_name_41, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_42 = monitor_1.getName();
            _builder.append(_name_42, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Monitor\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_43 = controller_2.getName();
            _builder.append(_name_43, "\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Control Loop\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final DSLAnalyzer analyzer_1 : this.lAnalyzer) {
        {
          EObject _eContainer_10 = analyzer_1.eContainer();
          if ((_eContainer_10 instanceof DSLController)) {
            _builder.append("\t");
            EObject _eContainer_11 = analyzer_1.eContainer();
            DSLController controller_3 = ((DSLController) _eContainer_11);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_44 = analyzer_1.getName();
            _builder.append(_name_44, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_45 = analyzer_1.getName();
            _builder.append(_name_45, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Analyzer\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_46 = controller_3.getName();
            _builder.append(_name_46, "\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Control Loop\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final DSLPlanner planner_1 : this.lPlanner) {
        {
          EObject _eContainer_12 = planner_1.eContainer();
          if ((_eContainer_12 instanceof DSLController)) {
            _builder.append("\t");
            EObject _eContainer_13 = planner_1.eContainer();
            DSLController controller_4 = ((DSLController) _eContainer_13);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_47 = planner_1.getName();
            _builder.append(_name_47, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_48 = planner_1.getName();
            _builder.append(_name_48, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Planner\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_49 = controller_4.getName();
            _builder.append(_name_49, "\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Control Loop\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLExecutor executor_1 : this.lExecutor) {
        {
          EObject _eContainer_14 = executor_1.eContainer();
          if ((_eContainer_14 instanceof DSLController)) {
            _builder.append("\t");
            EObject _eContainer_15 = executor_1.eContainer();
            DSLController controller_5 = ((DSLController) _eContainer_15);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_50 = executor_1.getName();
            _builder.append(_name_50, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_51 = executor_1.getName();
            _builder.append(_name_51, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Executor\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_52 = controller_5.getName();
            _builder.append(_name_52, "\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Control Loop\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLKnowledge knowledge_1 : this.lKnowledge) {
        {
          EObject _eContainer_16 = knowledge_1.eContainer();
          if ((_eContainer_16 instanceof DSLController)) {
            _builder.append("\t");
            EObject _eContainer_17 = knowledge_1.eContainer();
            DSLController controller_6 = ((DSLController) _eContainer_17);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_53 = knowledge_1.getName();
            _builder.append(_name_53, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_54 = knowledge_1.getName();
            _builder.append(_name_54, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Knowledge\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t  ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_55 = controller_6.getName();
            _builder.append(_name_55, "\t\t\t\t\t\t\t\t  ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Control Loop\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLEffector effector_1 : this.lEffector) {
        {
          EObject _eContainer_18 = effector_1.eContainer();
          if ((_eContainer_18 instanceof DSLManaged)) {
            _builder.append("\t");
            EObject _eContainer_19 = effector_1.eContainer();
            DSLManaged managed_2 = ((DSLManaged) _eContainer_19);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_56 = effector_1.getName();
            _builder.append(_name_56, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_57 = effector_1.getName();
            _builder.append(_name_57, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Effector\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t   ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
            String _name_58 = managed_2.getName();
            _builder.append(_name_58, "\t\t\t\t\t\t\t\t   ");
            _builder.append("\' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = \'Managed Subsystem\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLSensor sensor_1 : this.lSensor) {
        {
          EObject _eContainer_20 = sensor_1.eContainer();
          if ((_eContainer_20 instanceof DSLManaged)) {
            _builder.append("\t");
            EObject _eContainer_21 = sensor_1.eContainer();
            DSLManaged managed_3 = ((DSLManaged) _eContainer_21);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_59 = sensor_1.getName();
            _builder.append(_name_59, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_60 = sensor_1.getName();
            _builder.append(_name_60, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Sensor\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t   ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
            String _name_61 = managed_3.getName();
            _builder.append(_name_61, "\t\t\t\t\t\t\t\t   ");
            _builder.append("\' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = \'Managed Subsystem\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final DSLMeasuredOutput mesOutput_1 : this.lMOutput) {
        {
          EObject _eContainer_22 = mesOutput_1.eContainer();
          if ((_eContainer_22 instanceof DSLManaged)) {
            _builder.append("\t");
            EObject _eContainer_23 = mesOutput_1.eContainer();
            DSLManaged managed_4 = ((DSLManaged) _eContainer_23);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_62 = mesOutput_1.getName();
            _builder.append(_name_62, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_63 = mesOutput_1.getName();
            _builder.append(_name_63, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Measured Output\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t     ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Subsystem).name=\'");
            String _name_64 = managed_4.getName();
            _builder.append(_name_64, "\t\t\t\t\t\t\t     ");
            _builder.append("\' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = \'Managed Subsystem\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLReferenceInput refInput_1 : this.lRInput) {
        {
          EObject _eContainer_24 = refInput_1.eContainer();
          if ((_eContainer_24 instanceof DSLKnowledge)) {
            _builder.append("\t");
            EObject _eContainer_25 = refInput_1.eContainer();
            DSLKnowledge knowledge_2 = ((DSLKnowledge) _eContainer_25);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_65 = refInput_1.getName();
            _builder.append(_name_65, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_66 = refInput_1.getName();
            _builder.append(_name_66, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Reference Input\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t    ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_67 = knowledge_2.getName();
            _builder.append(_name_67, "\t\t\t\t\t\t\t\t    ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Knowledge\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final DSLSelfHealingAlt shalt_1 : this.lAlternative) {
        {
          EObject _eContainer_26 = shalt_1.eContainer();
          if ((_eContainer_26 instanceof DSLKnowledge)) {
            _builder.append("\t");
            EObject _eContainer_27 = shalt_1.eContainer();
            DSLKnowledge knowledge_3 = ((DSLKnowledge) _eContainer_27);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("context StructureModel");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("inv composite_");
            String _name_68 = shalt_1.getName();
            _builder.append(_name_68, "\t");
            _builder.append(": Component.allInstances()->select(c| c.name=\'");
            String _name_69 = shalt_1.getName();
            _builder.append(_name_69, "\t");
            _builder.append("\' and c.stereotype->asSequence()->first().name = \'Self-Healing Alternative\')->");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t    ");
            _builder.append("exists(d|d.oclContainer().oclAsType(Component).name=\'");
            String _name_70 = knowledge_3.getName();
            _builder.append(_name_70, "\t\t\t\t\t\t\t\t    ");
            _builder.append("\' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = \'Knowledge\')");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("--------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("-- Check access rules of adaptive system abstractions --");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("--------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    EList<DSLRules> rules = architectureDefinition.getRules();
    _builder.newLineIfNotEmpty();
    {
      for(final DSLRules dslRule : rules) {
        {
          if ((dslRule instanceof DSLRuleMController)) {
            _builder.append("\t");
            DSLRuleMController dslRuleMController = ((DSLRuleMController) dslRule);
            _builder.newLineIfNotEmpty();
            {
              DSLManagerController _mcontroller2 = dslRuleMController.getMcontroller2();
              boolean _tripleNotEquals = (_mcontroller2 != null);
              if (_tripleNotEquals) {
                _builder.append("\t");
                DSLManagerController firstArgument = dslRuleMController.getMcontroller1();
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                DSLManagerController secondArgument = dslRuleMController.getMcontroller2();
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("context StructureModel");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("inv access_");
                String _name_71 = firstArgument.getName();
                _builder.append(_name_71, "\t");
                _builder.append("_");
                String _name_72 = secondArgument.getName();
                _builder.append(_name_72, "\t");
                _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                String _name_73 = firstArgument.getName();
                _builder.append(_name_73, "\t");
                _builder.append("\' and c.to.name=\'");
                String _name_74 = secondArgument.getName();
                _builder.append(_name_74, "\t");
                _builder.append("\') ");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            if ((dslRule instanceof DSLRuleController)) {
              _builder.append("\t");
              DSLRuleController dslRuleController = ((DSLRuleController) dslRule);
              _builder.newLineIfNotEmpty();
              {
                DSLController _controller2 = dslRuleController.getController2();
                boolean _tripleNotEquals_1 = (_controller2 != null);
                if (_tripleNotEquals_1) {
                  _builder.append("\t");
                  DSLController firstArgument_1 = dslRuleController.getController1();
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  DSLController secondArgument_1 = dslRuleController.getController2();
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("context StructureModel");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("inv access_");
                  String _name_75 = firstArgument_1.getName();
                  _builder.append(_name_75, "\t");
                  _builder.append("_");
                  String _name_76 = secondArgument_1.getName();
                  _builder.append(_name_76, "\t");
                  _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                  String _name_77 = firstArgument_1.getName();
                  _builder.append(_name_77, "\t");
                  _builder.append("\' and c.to.name=\'");
                  String _name_78 = secondArgument_1.getName();
                  _builder.append(_name_78, "\t");
                  _builder.append("\') ");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              if ((dslRule instanceof DSLRuleMonitor)) {
                _builder.append("\t");
                DSLRuleMonitor dslRuleMonitor = ((DSLRuleMonitor) dslRule);
                _builder.newLineIfNotEmpty();
                {
                  DSLAnalyzer _analyzer = dslRuleMonitor.getAnalyzer();
                  boolean _tripleNotEquals_2 = (_analyzer != null);
                  if (_tripleNotEquals_2) {
                    _builder.append("\t");
                    DSLMonitor firstArgument_2 = dslRuleMonitor.getMonitor();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    DSLAnalyzer secondArgument_2 = dslRuleMonitor.getAnalyzer();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("context StructureModel");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("inv access_");
                    String _name_79 = firstArgument_2.getName();
                    _builder.append(_name_79, "\t");
                    _builder.append("_");
                    String _name_80 = secondArgument_2.getName();
                    _builder.append(_name_80, "\t");
                    _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                    String _name_81 = firstArgument_2.getName();
                    _builder.append(_name_81, "\t");
                    _builder.append("\' and c.to.name=\'");
                    String _name_82 = secondArgument_2.getName();
                    _builder.append(_name_82, "\t");
                    _builder.append("\') ");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  DSLKnowledge _knowledge = dslRuleMonitor.getKnowledge();
                  boolean _tripleNotEquals_3 = (_knowledge != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("\t");
                    DSLMonitor firstArgument_3 = dslRuleMonitor.getMonitor();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    DSLKnowledge secondArgument_3 = dslRuleMonitor.getKnowledge();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("context StructureModel");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("inv access_");
                    String _name_83 = firstArgument_3.getName();
                    _builder.append(_name_83, "\t");
                    _builder.append("_");
                    String _name_84 = secondArgument_3.getName();
                    _builder.append(_name_84, "\t");
                    _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                    String _name_85 = firstArgument_3.getName();
                    _builder.append(_name_85, "\t");
                    _builder.append("\' and c.to.name=\'");
                    String _name_86 = secondArgument_3.getName();
                    _builder.append(_name_86, "\t");
                    _builder.append("\') ");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  DSLMonitor _monitor2 = dslRuleMonitor.getMonitor2();
                  boolean _tripleNotEquals_4 = (_monitor2 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("\t");
                    DSLMonitor firstArgument_4 = dslRuleMonitor.getMonitor();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    DSLMonitor secondArgument_4 = dslRuleMonitor.getMonitor2();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("context StructureModel");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("inv access_");
                    String _name_87 = firstArgument_4.getName();
                    _builder.append(_name_87, "\t");
                    _builder.append("_");
                    String _name_88 = secondArgument_4.getName();
                    _builder.append(_name_88, "\t");
                    _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                    String _name_89 = firstArgument_4.getName();
                    _builder.append(_name_89, "\t");
                    _builder.append("\' and c.to.name=\'");
                    String _name_90 = secondArgument_4.getName();
                    _builder.append(_name_90, "\t");
                    _builder.append("\') ");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  DSLSensor _sensor = dslRuleMonitor.getSensor();
                  boolean _tripleNotEquals_5 = (_sensor != null);
                  if (_tripleNotEquals_5) {
                    _builder.append("\t");
                    DSLMonitor firstArgument_5 = dslRuleMonitor.getMonitor();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    DSLSensor secondArgument_5 = dslRuleMonitor.getSensor();
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("context StructureModel");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("inv access_");
                    String _name_91 = firstArgument_5.getName();
                    _builder.append(_name_91, "\t");
                    _builder.append("_");
                    String _name_92 = secondArgument_5.getName();
                    _builder.append(_name_92, "\t");
                    _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                    String _name_93 = firstArgument_5.getName();
                    _builder.append(_name_93, "\t");
                    _builder.append("\' and c.to.name=\'");
                    String _name_94 = secondArgument_5.getName();
                    _builder.append(_name_94, "\t");
                    _builder.append("\') ");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                if ((dslRule instanceof DSLRuleAnalyzer)) {
                  _builder.append("\t");
                  DSLRuleAnalyzer dslRuleAnalyzer = ((DSLRuleAnalyzer) dslRule);
                  _builder.newLineIfNotEmpty();
                  {
                    DSLMonitor _monitor = dslRuleAnalyzer.getMonitor();
                    boolean _tripleNotEquals_6 = (_monitor != null);
                    if (_tripleNotEquals_6) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_6 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLMonitor secondArgument_6 = dslRuleAnalyzer.getMonitor();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_95 = firstArgument_6.getName();
                      _builder.append(_name_95, "\t");
                      _builder.append("_");
                      String _name_96 = secondArgument_6.getName();
                      _builder.append(_name_96, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_97 = firstArgument_6.getName();
                      _builder.append(_name_97, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_98 = secondArgument_6.getName();
                      _builder.append(_name_98, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    DSLKnowledge _knowledge_1 = dslRuleAnalyzer.getKnowledge();
                    boolean _tripleNotEquals_7 = (_knowledge_1 != null);
                    if (_tripleNotEquals_7) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_7 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLKnowledge secondArgument_7 = dslRuleAnalyzer.getKnowledge();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_99 = firstArgument_7.getName();
                      _builder.append(_name_99, "\t");
                      _builder.append("_");
                      String _name_100 = secondArgument_7.getName();
                      _builder.append(_name_100, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_101 = firstArgument_7.getName();
                      _builder.append(_name_101, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_102 = secondArgument_7.getName();
                      _builder.append(_name_102, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    DSLReferenceInput _rreference = dslRuleAnalyzer.getRreference();
                    boolean _tripleNotEquals_8 = (_rreference != null);
                    if (_tripleNotEquals_8) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_8 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLReferenceInput secondArgument_8 = dslRuleAnalyzer.getRreference();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_103 = firstArgument_8.getName();
                      _builder.append(_name_103, "\t");
                      _builder.append("_");
                      String _name_104 = secondArgument_8.getName();
                      _builder.append(_name_104, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_105 = firstArgument_8.getName();
                      _builder.append(_name_105, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_106 = secondArgument_8.getName();
                      _builder.append(_name_106, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    DSLPlanner _planner = dslRuleAnalyzer.getPlanner();
                    boolean _tripleNotEquals_9 = (_planner != null);
                    if (_tripleNotEquals_9) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_9 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLPlanner secondArgument_9 = dslRuleAnalyzer.getPlanner();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_107 = firstArgument_9.getName();
                      _builder.append(_name_107, "\t");
                      _builder.append("_");
                      String _name_108 = secondArgument_9.getName();
                      _builder.append(_name_108, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_109 = firstArgument_9.getName();
                      _builder.append(_name_109, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_110 = secondArgument_9.getName();
                      _builder.append(_name_110, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    DSLAnalyzer _analyzer2 = dslRuleAnalyzer.getAnalyzer2();
                    boolean _tripleNotEquals_10 = (_analyzer2 != null);
                    if (_tripleNotEquals_10) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_10 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLAnalyzer secondArgument_10 = dslRuleAnalyzer.getAnalyzer2();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_111 = firstArgument_10.getName();
                      _builder.append(_name_111, "\t");
                      _builder.append("_");
                      String _name_112 = secondArgument_10.getName();
                      _builder.append(_name_112, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_113 = firstArgument_10.getName();
                      _builder.append(_name_113, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_114 = secondArgument_10.getName();
                      _builder.append(_name_114, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    DSLSelfHealingAlt _shalt = dslRuleAnalyzer.getShalt();
                    boolean _tripleNotEquals_11 = (_shalt != null);
                    if (_tripleNotEquals_11) {
                      _builder.append("\t");
                      DSLAnalyzer firstArgument_11 = dslRuleAnalyzer.getAnalyzer();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      DSLSelfHealingAlt secondArgument_11 = dslRuleAnalyzer.getShalt();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("context StructureModel");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("inv access_");
                      String _name_115 = firstArgument_11.getName();
                      _builder.append(_name_115, "\t");
                      _builder.append("_");
                      String _name_116 = secondArgument_11.getName();
                      _builder.append(_name_116, "\t");
                      _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                      String _name_117 = firstArgument_11.getName();
                      _builder.append(_name_117, "\t");
                      _builder.append("\' and c.to.name=\'");
                      String _name_118 = secondArgument_11.getName();
                      _builder.append(_name_118, "\t");
                      _builder.append("\') ");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  if ((dslRule instanceof DSLRulePlanner)) {
                    _builder.append("\t");
                    DSLRulePlanner dslRulePlanner = ((DSLRulePlanner) dslRule);
                    _builder.newLineIfNotEmpty();
                    {
                      DSLAnalyzer _analyzer_1 = dslRulePlanner.getAnalyzer();
                      boolean _tripleNotEquals_12 = (_analyzer_1 != null);
                      if (_tripleNotEquals_12) {
                        _builder.append("\t");
                        DSLPlanner firstArgument_12 = dslRulePlanner.getPlanner();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        DSLAnalyzer secondArgument_12 = dslRulePlanner.getAnalyzer();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("context StructureModel");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("inv access_");
                        String _name_119 = firstArgument_12.getName();
                        _builder.append(_name_119, "\t");
                        _builder.append("_");
                        String _name_120 = secondArgument_12.getName();
                        _builder.append(_name_120, "\t");
                        _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                        String _name_121 = firstArgument_12.getName();
                        _builder.append(_name_121, "\t");
                        _builder.append("\' and c.to.name=\'");
                        String _name_122 = secondArgument_12.getName();
                        _builder.append(_name_122, "\t");
                        _builder.append("\') ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      DSLPlanner _planner2 = dslRulePlanner.getPlanner2();
                      boolean _tripleNotEquals_13 = (_planner2 != null);
                      if (_tripleNotEquals_13) {
                        _builder.append("\t");
                        DSLPlanner firstArgument_13 = dslRulePlanner.getPlanner();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        DSLPlanner secondArgument_13 = dslRulePlanner.getPlanner2();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("context StructureModel");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("inv access_");
                        String _name_123 = firstArgument_13.getName();
                        _builder.append(_name_123, "\t");
                        _builder.append("_");
                        String _name_124 = secondArgument_13.getName();
                        _builder.append(_name_124, "\t");
                        _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                        String _name_125 = firstArgument_13.getName();
                        _builder.append(_name_125, "\t");
                        _builder.append("\' and c.to.name=\'");
                        String _name_126 = secondArgument_13.getName();
                        _builder.append(_name_126, "\t");
                        _builder.append("\') ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      DSLSelfHealingAlt _shalt_1 = dslRulePlanner.getShalt();
                      boolean _tripleNotEquals_14 = (_shalt_1 != null);
                      if (_tripleNotEquals_14) {
                        _builder.append("\t");
                        DSLPlanner firstArgument_14 = dslRulePlanner.getPlanner();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        DSLSelfHealingAlt secondArgument_14 = dslRulePlanner.getShalt();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("context StructureModel");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("inv access_");
                        String _name_127 = firstArgument_14.getName();
                        _builder.append(_name_127, "\t");
                        _builder.append("_");
                        String _name_128 = secondArgument_14.getName();
                        _builder.append(_name_128, "\t");
                        _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                        String _name_129 = firstArgument_14.getName();
                        _builder.append(_name_129, "\t");
                        _builder.append("\' and c.to.name=\'");
                        String _name_130 = secondArgument_14.getName();
                        _builder.append(_name_130, "\t");
                        _builder.append("\') ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      DSLExecutor _executor = dslRulePlanner.getExecutor();
                      boolean _tripleNotEquals_15 = (_executor != null);
                      if (_tripleNotEquals_15) {
                        _builder.append("\t");
                        DSLPlanner firstArgument_15 = dslRulePlanner.getPlanner();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        DSLExecutor secondArgument_15 = dslRulePlanner.getExecutor();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("context StructureModel");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("inv access_");
                        String _name_131 = firstArgument_15.getName();
                        _builder.append(_name_131, "\t");
                        _builder.append("_");
                        String _name_132 = secondArgument_15.getName();
                        _builder.append(_name_132, "\t");
                        _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                        String _name_133 = firstArgument_15.getName();
                        _builder.append(_name_133, "\t");
                        _builder.append("\' and c.to.name=\'");
                        String _name_134 = secondArgument_15.getName();
                        _builder.append(_name_134, "\t");
                        _builder.append("\') ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      DSLKnowledge _knowledge_2 = dslRulePlanner.getKnowledge();
                      boolean _tripleNotEquals_16 = (_knowledge_2 != null);
                      if (_tripleNotEquals_16) {
                        _builder.append("\t");
                        DSLPlanner firstArgument_16 = dslRulePlanner.getPlanner();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        DSLKnowledge secondArgument_16 = dslRulePlanner.getKnowledge();
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("context StructureModel");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("inv access_");
                        String _name_135 = firstArgument_16.getName();
                        _builder.append(_name_135, "\t");
                        _builder.append("_");
                        String _name_136 = secondArgument_16.getName();
                        _builder.append(_name_136, "\t");
                        _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                        String _name_137 = firstArgument_16.getName();
                        _builder.append(_name_137, "\t");
                        _builder.append("\' and c.to.name=\'");
                        String _name_138 = secondArgument_16.getName();
                        _builder.append(_name_138, "\t");
                        _builder.append("\') ");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    if ((dslRule instanceof DSLRuleExecutor)) {
                      _builder.append("\t");
                      DSLRuleExecutor dslRuleExecutor = ((DSLRuleExecutor) dslRule);
                      _builder.newLineIfNotEmpty();
                      {
                        DSLKnowledge _knowledge_3 = dslRuleExecutor.getKnowledge();
                        boolean _tripleNotEquals_17 = (_knowledge_3 != null);
                        if (_tripleNotEquals_17) {
                          _builder.append("\t");
                          DSLExecutor firstArgument_17 = dslRuleExecutor.getExecutor();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          DSLKnowledge secondArgument_17 = dslRuleExecutor.getKnowledge();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("context StructureModel");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("inv access_");
                          String _name_139 = firstArgument_17.getName();
                          _builder.append(_name_139, "\t");
                          _builder.append("_");
                          String _name_140 = secondArgument_17.getName();
                          _builder.append(_name_140, "\t");
                          _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                          String _name_141 = firstArgument_17.getName();
                          _builder.append(_name_141, "\t");
                          _builder.append("\' and c.to.name=\'");
                          String _name_142 = secondArgument_17.getName();
                          _builder.append(_name_142, "\t");
                          _builder.append("\') ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        DSLPlanner _planner_1 = dslRuleExecutor.getPlanner();
                        boolean _tripleNotEquals_18 = (_planner_1 != null);
                        if (_tripleNotEquals_18) {
                          _builder.append("\t");
                          DSLExecutor firstArgument_18 = dslRuleExecutor.getExecutor();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          DSLPlanner secondArgument_18 = dslRuleExecutor.getPlanner();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("context StructureModel");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("inv access_");
                          String _name_143 = firstArgument_18.getName();
                          _builder.append(_name_143, "\t");
                          _builder.append("_");
                          String _name_144 = secondArgument_18.getName();
                          _builder.append(_name_144, "\t");
                          _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                          String _name_145 = firstArgument_18.getName();
                          _builder.append(_name_145, "\t");
                          _builder.append("\' and c.to.name=\'");
                          String _name_146 = secondArgument_18.getName();
                          _builder.append(_name_146, "\t");
                          _builder.append("\') ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        DSLEffector _effector = dslRuleExecutor.getEffector();
                        boolean _tripleNotEquals_19 = (_effector != null);
                        if (_tripleNotEquals_19) {
                          _builder.append("\t");
                          DSLExecutor firstArgument_19 = dslRuleExecutor.getExecutor();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          DSLEffector secondArgument_19 = dslRuleExecutor.getEffector();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("context StructureModel");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("inv access_");
                          String _name_147 = firstArgument_19.getName();
                          _builder.append(_name_147, "\t");
                          _builder.append("_");
                          String _name_148 = secondArgument_19.getName();
                          _builder.append(_name_148, "\t");
                          _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                          String _name_149 = firstArgument_19.getName();
                          _builder.append(_name_149, "\t");
                          _builder.append("\' and c.to.name=\'");
                          String _name_150 = secondArgument_19.getName();
                          _builder.append(_name_150, "\t");
                          _builder.append("\') ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        DSLExecutor _executor2 = dslRuleExecutor.getExecutor2();
                        boolean _tripleNotEquals_20 = (_executor2 != null);
                        if (_tripleNotEquals_20) {
                          _builder.append("\t");
                          DSLExecutor firstArgument_20 = dslRuleExecutor.getExecutor();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          DSLExecutor secondArgument_20 = dslRuleExecutor.getExecutor2();
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("context StructureModel");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("inv access_");
                          String _name_151 = firstArgument_20.getName();
                          _builder.append(_name_151, "\t");
                          _builder.append("_");
                          String _name_152 = secondArgument_20.getName();
                          _builder.append(_name_152, "\t");
                          _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                          String _name_153 = firstArgument_20.getName();
                          _builder.append(_name_153, "\t");
                          _builder.append("\' and c.to.name=\'");
                          String _name_154 = secondArgument_20.getName();
                          _builder.append(_name_154, "\t");
                          _builder.append("\') ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      if ((dslRule instanceof DSLRuleMO)) {
                        _builder.append("\t");
                        DSLRuleMO dslRuleSensor = ((DSLRuleMO) dslRule);
                        _builder.newLineIfNotEmpty();
                        {
                          DSLMeasuredOutput _measured = dslRuleSensor.getMeasured();
                          boolean _tripleNotEquals_21 = (_measured != null);
                          if (_tripleNotEquals_21) {
                            _builder.append("\t");
                            DSLSensor firstArgument_21 = dslRuleSensor.getSensor();
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            DSLMeasuredOutput secondArgument_21 = dslRuleSensor.getMeasured();
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("context StructureModel");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("inv access_");
                            String _name_155 = firstArgument_21.getName();
                            _builder.append(_name_155, "\t");
                            _builder.append("_");
                            String _name_156 = secondArgument_21.getName();
                            _builder.append(_name_156, "\t");
                            _builder.append(": AggregatedRelationship.allInstances()->exists(c| c.from.name=\'");
                            String _name_157 = firstArgument_21.getName();
                            _builder.append(_name_157, "\t");
                            _builder.append("\' and c.to.name=\'");
                            String _name_158 = secondArgument_21.getName();
                            _builder.append(_name_158, "\t");
                            _builder.append("\') ");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("endpackage");
    _builder.newLine();
    return _builder;
  }
}
