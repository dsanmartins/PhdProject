/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.generator;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManagerController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMO;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRulePlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRules;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SasDslGenerator extends AbstractGenerator {
  private HashMap<String, String> structureElementPath = new HashMap<String, String>();
  
  private HashMap<String, String> outAggregatedPath = new HashMap<String, String>();
  
  private HashMap<String, String> aggregatedPath = new HashMap<String, String>();
  
  private ArrayList<Integer> depth = CollectionLiterals.<Integer>newArrayList(Integer.valueOf(5));
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<ArchitectureDefinition> _filter = Iterables.<ArchitectureDefinition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ArchitectureDefinition.class);
    for (final ArchitectureDefinition e : _filter) {
      {
        this.createPath(e);
        fsa.generateFile("PlannedArchitecture.xmi", this.compile(e));
        fsa.generateFile("Constraints.ocl", this.compile2(e));
      }
    }
  }
  
  public void createPath(final ArchitectureDefinition architecture) {
    this.depth.clear();
    this.depth.add(0, Integer.valueOf(0));
    this.depth.add(1, Integer.valueOf(0));
    this.depth.add(2, Integer.valueOf(0));
    this.depth.add(3, Integer.valueOf(0));
    this.depth.add(4, Integer.valueOf(0));
    EList<DSLManaging> managing = architecture.getManaging();
    for (int i = 0; (i < managing.size()); i++) {
      {
        Integer level0 = this.depth.get(0);
        DSLManaging man = managing.get(i);
        this.structureElementPath.put(man.getName(), ("//@model.1/@structureElement." + level0));
        EList<DSLManagerController> mcontroller = man.getManagerController();
        for (int j = 0; (j < mcontroller.size()); j++) {
          {
            Integer level1 = this.depth.get(1);
            DSLManagerController mcon = mcontroller.get(j);
            this.structureElementPath.put(mcon.getName(), (((("//@model.1/@structureElement." + level0) + "/") + "@structureElement.") + level1));
            EList<DSLController> controller = mcon.getController();
            for (int k = 0; (k < controller.size()); k++) {
              {
                Integer level2 = this.depth.get(2);
                DSLController con = controller.get(k);
                this.structureElementPath.put(con.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                EList<DSLMonitor> monitor = con.getMonitor();
                for (int l = 0; (l < monitor.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLMonitor mon = monitor.get(l);
                    this.structureElementPath.put(mon.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLAnalyzer> analyzer = con.getAnalyzer();
                for (int l = 0; (l < analyzer.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLAnalyzer ana = analyzer.get(l);
                    this.structureElementPath.put(ana.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLPlanner> planner = con.getPlanner();
                for (int l = 0; (l < planner.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLPlanner pla = planner.get(l);
                    this.structureElementPath.put(pla.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLExecutor> executor = con.getExecutor();
                for (int l = 0; (l < executor.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLExecutor exe = executor.get(l);
                    this.structureElementPath.put(exe.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                EList<DSLKnowledge> knowledge = con.getKnowledge();
                for (int l = 0; (l < knowledge.size()); l++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLKnowledge kno = knowledge.get(l);
                    this.structureElementPath.put(kno.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    EList<DSLReferenceInput> ri = kno.getReferenceInput();
                    for (int m = 0; (m < ri.size()); m++) {
                      {
                        Integer level4 = this.depth.get(4);
                        DSLReferenceInput r = ri.get(m);
                        this.structureElementPath.put(r.getName(), ((((((((((((("//@model.1/@structureElement." + level0) + 
                          "/") + "@structureElement.") + level1) + 
                          "/") + "@structureElement.") + level2) + 
                          "/") + "@structureElement.") + level3) + 
                          "/") + "@structureElement.") + level4));
                        level4++;
                        this.depth.set(4, level4);
                      }
                    }
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                level2++;
                this.depth.set(2, level2);
              }
            }
            level1++;
            this.depth.set(1, level1);
          }
        }
        level0++;
        this.depth.set(0, level0);
        EList<DSLController> controller = man.getController();
        for (int k = 0; (k < controller.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLController con = controller.get(k);
            this.structureElementPath.put(con.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            EList<DSLMonitor> monitor = con.getMonitor();
            for (int l = 0; (l < monitor.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLMonitor mon = monitor.get(l);
                this.structureElementPath.put(mon.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLAnalyzer> analyzer = con.getAnalyzer();
            for (int l = 0; (l < analyzer.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLAnalyzer ana = analyzer.get(l);
                this.structureElementPath.put(ana.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLPlanner> planner = con.getPlanner();
            for (int l = 0; (l < planner.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLPlanner pla = planner.get(l);
                this.structureElementPath.put(pla.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLExecutor> executor = con.getExecutor();
            for (int l = 0; (l < executor.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLExecutor exe = executor.get(l);
                this.structureElementPath.put(exe.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                level2++;
                this.depth.set(2, level2);
              }
            }
            EList<DSLKnowledge> knowledge = con.getKnowledge();
            for (int l = 0; (l < knowledge.size()); l++) {
              {
                Integer level2 = this.depth.get(2);
                DSLKnowledge kno = knowledge.get(l);
                this.structureElementPath.put(kno.getName(), ((((((("//@model.1/@structureElement." + level0) + 
                  "/") + "@structureElement.") + level1) + 
                  "/") + "@structureElement.") + level2));
                EList<DSLReferenceInput> ri = kno.getReferenceInput();
                for (int m = 0; (m < ri.size()); m++) {
                  {
                    Integer level3 = this.depth.get(3);
                    DSLReferenceInput r = ri.get(m);
                    this.structureElementPath.put(r.getName(), (((((((((("//@model.1/@structureElement." + level0) + 
                      "/") + "@structureElement.") + level1) + 
                      "/") + "@structureElement.") + level2) + 
                      "/") + "@structureElement.") + level3));
                    level3++;
                    this.depth.set(3, level3);
                  }
                }
                level2++;
                this.depth.set(2, level2);
              }
            }
            level1++;
            this.depth.set(1, level1);
          }
        }
        level0++;
        this.depth.set(0, level0);
      }
    }
    EList<DSLManaged> managed = architecture.getManaged();
    for (int i = 0; (i < managed.size()); i++) {
      {
        Integer level0 = this.depth.get(0);
        DSLManaged man = managed.get(i);
        this.structureElementPath.put(man.getName(), ("//@model.1/@structureElement." + level0));
        EList<DSLSensor> sensor = man.getSensor();
        for (int k = 0; (k < sensor.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLSensor sen = sensor.get(k);
            this.structureElementPath.put(sen.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            level1++;
            this.depth.set(1, level1);
          }
        }
        EList<DSLEffector> effector = man.getEffector();
        for (int k = 0; (k < effector.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLEffector efe = effector.get(k);
            this.structureElementPath.put(efe.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            level1++;
            this.depth.set(1, level1);
          }
        }
        EList<DSLMeasuredOutput> mea = man.getMeasuredOutput();
        for (int k = 0; (k < mea.size()); k++) {
          {
            Integer level1 = this.depth.get(1);
            DSLMeasuredOutput me = mea.get(k);
            this.structureElementPath.put(me.getName(), (((("//@model.1/@structureElement." + level0) + 
              "/") + "@structureElement.") + level1));
            level1++;
            this.depth.set(1, level1);
          }
        }
        level0++;
        this.depth.set(0, level0);
      }
    }
    EList<DSLRules> rule = architecture.getRules();
    int rController = 0;
    String outController = "";
    int rMonitor = 0;
    String outMonitor = "";
    int rAnalyzer = 0;
    String outAnalyzer = "";
    int rPlanner = 0;
    String outPlanner = "";
    int rExecutor = 0;
    String outExecutor = "";
    int rMO = 0;
    String outMO = "";
    for (int i = 0; (i < rule.size()); i++) {
      {
        DSLRules r = rule.get(i);
        boolean _equals = r.getAccess().equals("can-access");
        if (_equals) {
          if ((r instanceof DSLRuleController)) {
            String path = this.outAggregatedPath.get(((DSLRuleController)r).getController().getName());
            if ((path != null)) {
              outController = ((outController + "/@aggregated.") + Integer.valueOf(rController));
            }
          } else {
            if ((r instanceof DSLRuleMonitor)) {
            } else {
              if ((r instanceof DSLRuleAnalyzer)) {
              } else {
                if ((r instanceof DSLRulePlanner)) {
                } else {
                  if ((r instanceof DSLRuleExecutor)) {
                  } else {
                    if ((r instanceof DSLRuleMO)) {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public CharSequence compile(final ArchitectureDefinition architectureDefinition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:action=\"http://www.eclipse.org/MoDisco/kdm/action\" xmlns:code=\"http://www.eclipse.org/MoDisco/kdm/code\" xmlns:kdm=\"http://www.eclipse.org/MoDisco/kdm/kdm\" xmlns:source=\"http://www.eclipse.org/MoDisco/kdm/source\" xmlns:structure=\"http://www.eclipse.org/MoDisco/kdm/structure\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<kdm:Segment name=\"Planned Architecture\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<model xsi:type=\"code:CodeModel\" name=\"Elements Instances\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<codeElement xsi:type=\"code:Module\" name=\"Module Instance\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<codeElement xsi:type=\"code:CodeElement\" name=\"codeElement Instance\">");
    _builder.newLine();
    _builder.append("\t       \t\t");
    _builder.append("<codeRelation xsi:type=\"code:Extends\"/>");
    _builder.newLine();
    _builder.append("\t       \t\t");
    _builder.append("<codeRelation xsi:type=\"code:Implements\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<codeRelation xsi:type=\"code:HasValue\"/>");
    _builder.newLine();
    _builder.append("\t      \t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<codeElement xsi:type=\"action:ActionElement\" name=\"actionElement Instance\">");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:Calls\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:UsesType\"/>");
    _builder.newLine();
    _builder.append("\t        \t");
    _builder.append("<actionRelation xsi:type=\"action:Creates\"/>");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</codeElement>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</model>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<extension xsi:type=\"kdm:ExtensionFamily\" name=\"Adaptive System Domain\">");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Monitor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Analyzer\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Planner\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Executor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Knowledge\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Reference Input\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Measured Output\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Control Loop Manager\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Control Loop\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Sensor\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Effector\" type=\"structure:Component\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Managing Subsystem\" type=\"structure:Subsystem\"/>");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("<stereotype name=\"Managed Subsystem\" type=\"structure:Subsystem\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<model xsi:type=\"structure:StructureModel\" name=\"Architecture Abstractions\">");
    _builder.newLine();
    {
      EList<DSLManaging> _managing = architectureDefinition.getManaging();
      for(final DSLManaging arch : _managing) {
        _builder.append("\t\t");
        _builder.append("<structureElement xsi:type=\"structure:Subsystem\" name=\"");
        String _name = arch.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.11\">");
        _builder.newLineIfNotEmpty();
        {
          EList<DSLManagerController> _managerController = arch.getManagerController();
          for(final DSLManagerController mcontroller : _managerController) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_1 = mcontroller.getName();
            _builder.append(_name_1, "\t\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.7\">");
            _builder.newLineIfNotEmpty();
            {
              EList<DSLController> _controller = mcontroller.getController();
              for(final DSLController controller : _controller) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_2 = controller.getName();
                _builder.append(_name_2, "\t\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.8\">");
                _builder.newLineIfNotEmpty();
                {
                  EList<DSLMonitor> _monitor = controller.getMonitor();
                  for(final DSLMonitor monitor : _monitor) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_3 = monitor.getName();
                    _builder.append(_name_3, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.0\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLAnalyzer> _analyzer = controller.getAnalyzer();
                  for(final DSLAnalyzer analyzer : _analyzer) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_4 = analyzer.getName();
                    _builder.append(_name_4, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.1\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLPlanner> _planner = controller.getPlanner();
                  for(final DSLPlanner planner : _planner) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_5 = planner.getName();
                    _builder.append(_name_5, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.2\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLExecutor> _executor = controller.getExecutor();
                  for(final DSLExecutor executor : _executor) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_6 = executor.getName();
                    _builder.append(_name_6, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.3\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                {
                  EList<DSLKnowledge> _knowledge = controller.getKnowledge();
                  for(final DSLKnowledge knowledge : _knowledge) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_7 = knowledge.getName();
                    _builder.append(_name_7, "\t\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.4\">");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<DSLReferenceInput> _referenceInput = knowledge.getReferenceInput();
                      for(final DSLReferenceInput referenceInput : _referenceInput) {
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                        String _name_8 = referenceInput.getName();
                        _builder.append(_name_8, "\t\t\t\t\t\t\t");
                        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.5\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("</structureElement>");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
          }
        }
        {
          EList<DSLController> _controller_1 = arch.getController();
          for(final DSLController controller_1 : _controller_1) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_9 = controller_1.getName();
            _builder.append(_name_9, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.8\">");
            _builder.newLineIfNotEmpty();
            {
              EList<DSLMonitor> _monitor_1 = controller_1.getMonitor();
              for(final DSLMonitor monitor_1 : _monitor_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_10 = monitor_1.getName();
                _builder.append(_name_10, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.0\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLAnalyzer> _analyzer_1 = controller_1.getAnalyzer();
              for(final DSLAnalyzer analyzer_1 : _analyzer_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_11 = analyzer_1.getName();
                _builder.append(_name_11, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.1\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLPlanner> _planner_1 = controller_1.getPlanner();
              for(final DSLPlanner planner_1 : _planner_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_12 = planner_1.getName();
                _builder.append(_name_12, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.2\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLExecutor> _executor_1 = controller_1.getExecutor();
              for(final DSLExecutor executor_1 : _executor_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_13 = executor_1.getName();
                _builder.append(_name_13, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.3\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            {
              EList<DSLKnowledge> _knowledge_1 = controller_1.getKnowledge();
              for(final DSLKnowledge knowledge_1 : _knowledge_1) {
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                String _name_14 = knowledge_1.getName();
                _builder.append(_name_14, "\t\t\t\t");
                _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.4\">");
                _builder.newLineIfNotEmpty();
                {
                  EList<DSLReferenceInput> _referenceInput_1 = knowledge_1.getReferenceInput();
                  for(final DSLReferenceInput referenceInput_1 : _referenceInput_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
                    String _name_15 = referenceInput_1.getName();
                    _builder.append(_name_15, "\t\t\t\t\t");
                    _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.5\"/>");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("</structureElement>");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("</structureElement>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<DSLManaged> _managed = architectureDefinition.getManaged();
      for(final DSLManaged arch_1 : _managed) {
        _builder.append("\t\t");
        _builder.append("<structureElement xsi:type=\"structure:Subsystem\" name=\"");
        String _name_16 = arch_1.getName();
        _builder.append(_name_16, "\t\t");
        _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.12\">");
        _builder.newLineIfNotEmpty();
        {
          EList<DSLSensor> _sensor = arch_1.getSensor();
          for(final DSLSensor sensor : _sensor) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_17 = sensor.getName();
            _builder.append(_name_17, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.9\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        {
          EList<DSLEffector> _effector = arch_1.getEffector();
          for(final DSLEffector effector : _effector) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_18 = effector.getName();
            _builder.append(_name_18, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.10\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        {
          EList<DSLMeasuredOutput> _measuredOutput = arch_1.getMeasuredOutput();
          for(final DSLMeasuredOutput measuredOutput : _measuredOutput) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("<structureElement xsi:type=\"structure:Component\" name=\"");
            String _name_19 = measuredOutput.getName();
            _builder.append(_name_19, "\t\t\t");
            _builder.append("\" stereotype=\"/0/@extension.0/@stereotype.6\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("</structureElement>\t\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("</structureElement>\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</model>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</kdm:Segment>\t");
    _builder.newLine();
    _builder.append("</xmi:XMI>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile2(final ArchitectureDefinition architectureDefinition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
}
