/**
 * generated by Xtext 2.21.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAlternative;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManagerController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMController;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMO;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRulePlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRules;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslFactory;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SasDslPackageImpl extends EPackageImpl implements SasDslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass architectureDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRulesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleMControllerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleControllerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleMonitorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleAnalyzerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRulePlannerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleExecutorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslRuleMOEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslManagingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslManagedEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslManagerControllerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslControllerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslMonitorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslAnalyzerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslPlannerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslExecutorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslKnowledgeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslSensorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslEffectorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslReferenceInputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslMeasuredOutputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dslAlternativeEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SasDslPackageImpl()
  {
    super(eNS_URI, SasDslFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SasDslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SasDslPackage init()
  {
    if (isInited) return (SasDslPackage)EPackage.Registry.INSTANCE.getEPackage(SasDslPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSasDslPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SasDslPackageImpl theSasDslPackage = registeredSasDslPackage instanceof SasDslPackageImpl ? (SasDslPackageImpl)registeredSasDslPackage : new SasDslPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theSasDslPackage.createPackageContents();

    // Initialize created meta-data
    theSasDslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSasDslPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SasDslPackage.eNS_URI, theSasDslPackage);
    return theSasDslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArchitectureDefinition()
  {
    return architectureDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArchitectureDefinition_Name()
  {
    return (EAttribute)architectureDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArchitectureDefinition_Managing()
  {
    return (EReference)architectureDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArchitectureDefinition_Managed()
  {
    return (EReference)architectureDefinitionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArchitectureDefinition_Rules()
  {
    return (EReference)architectureDefinitionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRules()
  {
    return dslRulesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLRules_Access()
  {
    return (EAttribute)dslRulesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleMController()
  {
    return dslRuleMControllerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMController_Mcontroller1()
  {
    return (EReference)dslRuleMControllerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMController_Mcontroller2()
  {
    return (EReference)dslRuleMControllerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleController()
  {
    return dslRuleControllerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleController_Controller1()
  {
    return (EReference)dslRuleControllerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleController_Controller2()
  {
    return (EReference)dslRuleControllerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleMonitor()
  {
    return dslRuleMonitorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMonitor_Monitor()
  {
    return (EReference)dslRuleMonitorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMonitor_Sensor()
  {
    return (EReference)dslRuleMonitorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMonitor_Knowledge()
  {
    return (EReference)dslRuleMonitorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMonitor_Analyzer()
  {
    return (EReference)dslRuleMonitorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMonitor_Monitor2()
  {
    return (EReference)dslRuleMonitorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleAnalyzer()
  {
    return dslRuleAnalyzerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Analyzer()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Knowledge()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Monitor()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Planner()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Rreference()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Analyzer2()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Shalt()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleAnalyzer_Executor()
  {
    return (EReference)dslRuleAnalyzerEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRulePlanner()
  {
    return dslRulePlannerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Planner()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Knowledge()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Analyzer()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Executor()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Planner2()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRulePlanner_Shalt()
  {
    return (EReference)dslRulePlannerEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleExecutor()
  {
    return dslRuleExecutorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleExecutor_Executor()
  {
    return (EReference)dslRuleExecutorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleExecutor_Effector()
  {
    return (EReference)dslRuleExecutorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleExecutor_Planner()
  {
    return (EReference)dslRuleExecutorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleExecutor_Knowledge()
  {
    return (EReference)dslRuleExecutorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleExecutor_Executor2()
  {
    return (EReference)dslRuleExecutorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLRuleMO()
  {
    return dslRuleMOEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMO_Sensor()
  {
    return (EReference)dslRuleMOEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLRuleMO_Measured()
  {
    return (EReference)dslRuleMOEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLManaging()
  {
    return dslManagingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLManaging_Name()
  {
    return (EAttribute)dslManagingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManaging_ManagerController()
  {
    return (EReference)dslManagingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManaging_Controller()
  {
    return (EReference)dslManagingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLManaged()
  {
    return dslManagedEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLManaged_Name()
  {
    return (EAttribute)dslManagedEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManaged_Sensor()
  {
    return (EReference)dslManagedEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManaged_Effector()
  {
    return (EReference)dslManagedEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManaged_MeasuredOutput()
  {
    return (EReference)dslManagedEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLManagerController()
  {
    return dslManagerControllerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLManagerController_Name()
  {
    return (EAttribute)dslManagerControllerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLManagerController_DslTypeMC()
  {
    return (EAttribute)dslManagerControllerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLManagerController_Controller()
  {
    return (EReference)dslManagerControllerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLController()
  {
    return dslControllerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLController_Name()
  {
    return (EAttribute)dslControllerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLController_Monitor()
  {
    return (EReference)dslControllerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLController_Analyzer()
  {
    return (EReference)dslControllerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLController_Planner()
  {
    return (EReference)dslControllerEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLController_Executor()
  {
    return (EReference)dslControllerEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLController_Knowledge()
  {
    return (EReference)dslControllerEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLMonitor()
  {
    return dslMonitorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLMonitor_Name()
  {
    return (EAttribute)dslMonitorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLAnalyzer()
  {
    return dslAnalyzerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLAnalyzer_Name()
  {
    return (EAttribute)dslAnalyzerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLPlanner()
  {
    return dslPlannerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLPlanner_Name()
  {
    return (EAttribute)dslPlannerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLExecutor()
  {
    return dslExecutorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLExecutor_Name()
  {
    return (EAttribute)dslExecutorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLKnowledge()
  {
    return dslKnowledgeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLKnowledge_Name()
  {
    return (EAttribute)dslKnowledgeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLKnowledge_ReferenceInput()
  {
    return (EReference)dslKnowledgeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDSLKnowledge_Shalt()
  {
    return (EReference)dslKnowledgeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLSensor()
  {
    return dslSensorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLSensor_Name()
  {
    return (EAttribute)dslSensorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLEffector()
  {
    return dslEffectorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLEffector_Name()
  {
    return (EAttribute)dslEffectorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLReferenceInput()
  {
    return dslReferenceInputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLReferenceInput_Name()
  {
    return (EAttribute)dslReferenceInputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLMeasuredOutput()
  {
    return dslMeasuredOutputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLMeasuredOutput_Name()
  {
    return (EAttribute)dslMeasuredOutputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDSLAlternative()
  {
    return dslAlternativeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDSLAlternative_Name()
  {
    return (EAttribute)dslAlternativeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SasDslFactory getSasDslFactory()
  {
    return (SasDslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    architectureDefinitionEClass = createEClass(ARCHITECTURE_DEFINITION);
    createEAttribute(architectureDefinitionEClass, ARCHITECTURE_DEFINITION__NAME);
    createEReference(architectureDefinitionEClass, ARCHITECTURE_DEFINITION__MANAGING);
    createEReference(architectureDefinitionEClass, ARCHITECTURE_DEFINITION__MANAGED);
    createEReference(architectureDefinitionEClass, ARCHITECTURE_DEFINITION__RULES);

    dslRulesEClass = createEClass(DSL_RULES);
    createEAttribute(dslRulesEClass, DSL_RULES__ACCESS);

    dslRuleMControllerEClass = createEClass(DSL_RULE_MCONTROLLER);
    createEReference(dslRuleMControllerEClass, DSL_RULE_MCONTROLLER__MCONTROLLER1);
    createEReference(dslRuleMControllerEClass, DSL_RULE_MCONTROLLER__MCONTROLLER2);

    dslRuleControllerEClass = createEClass(DSL_RULE_CONTROLLER);
    createEReference(dslRuleControllerEClass, DSL_RULE_CONTROLLER__CONTROLLER1);
    createEReference(dslRuleControllerEClass, DSL_RULE_CONTROLLER__CONTROLLER2);

    dslRuleMonitorEClass = createEClass(DSL_RULE_MONITOR);
    createEReference(dslRuleMonitorEClass, DSL_RULE_MONITOR__MONITOR);
    createEReference(dslRuleMonitorEClass, DSL_RULE_MONITOR__SENSOR);
    createEReference(dslRuleMonitorEClass, DSL_RULE_MONITOR__KNOWLEDGE);
    createEReference(dslRuleMonitorEClass, DSL_RULE_MONITOR__ANALYZER);
    createEReference(dslRuleMonitorEClass, DSL_RULE_MONITOR__MONITOR2);

    dslRuleAnalyzerEClass = createEClass(DSL_RULE_ANALYZER);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__ANALYZER);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__KNOWLEDGE);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__MONITOR);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__PLANNER);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__RREFERENCE);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__ANALYZER2);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__SHALT);
    createEReference(dslRuleAnalyzerEClass, DSL_RULE_ANALYZER__EXECUTOR);

    dslRulePlannerEClass = createEClass(DSL_RULE_PLANNER);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__PLANNER);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__KNOWLEDGE);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__ANALYZER);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__EXECUTOR);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__PLANNER2);
    createEReference(dslRulePlannerEClass, DSL_RULE_PLANNER__SHALT);

    dslRuleExecutorEClass = createEClass(DSL_RULE_EXECUTOR);
    createEReference(dslRuleExecutorEClass, DSL_RULE_EXECUTOR__EXECUTOR);
    createEReference(dslRuleExecutorEClass, DSL_RULE_EXECUTOR__EFFECTOR);
    createEReference(dslRuleExecutorEClass, DSL_RULE_EXECUTOR__PLANNER);
    createEReference(dslRuleExecutorEClass, DSL_RULE_EXECUTOR__KNOWLEDGE);
    createEReference(dslRuleExecutorEClass, DSL_RULE_EXECUTOR__EXECUTOR2);

    dslRuleMOEClass = createEClass(DSL_RULE_MO);
    createEReference(dslRuleMOEClass, DSL_RULE_MO__SENSOR);
    createEReference(dslRuleMOEClass, DSL_RULE_MO__MEASURED);

    dslManagingEClass = createEClass(DSL_MANAGING);
    createEAttribute(dslManagingEClass, DSL_MANAGING__NAME);
    createEReference(dslManagingEClass, DSL_MANAGING__MANAGER_CONTROLLER);
    createEReference(dslManagingEClass, DSL_MANAGING__CONTROLLER);

    dslManagedEClass = createEClass(DSL_MANAGED);
    createEAttribute(dslManagedEClass, DSL_MANAGED__NAME);
    createEReference(dslManagedEClass, DSL_MANAGED__SENSOR);
    createEReference(dslManagedEClass, DSL_MANAGED__EFFECTOR);
    createEReference(dslManagedEClass, DSL_MANAGED__MEASURED_OUTPUT);

    dslManagerControllerEClass = createEClass(DSL_MANAGER_CONTROLLER);
    createEAttribute(dslManagerControllerEClass, DSL_MANAGER_CONTROLLER__NAME);
    createEAttribute(dslManagerControllerEClass, DSL_MANAGER_CONTROLLER__DSL_TYPE_MC);
    createEReference(dslManagerControllerEClass, DSL_MANAGER_CONTROLLER__CONTROLLER);

    dslControllerEClass = createEClass(DSL_CONTROLLER);
    createEAttribute(dslControllerEClass, DSL_CONTROLLER__NAME);
    createEReference(dslControllerEClass, DSL_CONTROLLER__MONITOR);
    createEReference(dslControllerEClass, DSL_CONTROLLER__ANALYZER);
    createEReference(dslControllerEClass, DSL_CONTROLLER__PLANNER);
    createEReference(dslControllerEClass, DSL_CONTROLLER__EXECUTOR);
    createEReference(dslControllerEClass, DSL_CONTROLLER__KNOWLEDGE);

    dslMonitorEClass = createEClass(DSL_MONITOR);
    createEAttribute(dslMonitorEClass, DSL_MONITOR__NAME);

    dslAnalyzerEClass = createEClass(DSL_ANALYZER);
    createEAttribute(dslAnalyzerEClass, DSL_ANALYZER__NAME);

    dslPlannerEClass = createEClass(DSL_PLANNER);
    createEAttribute(dslPlannerEClass, DSL_PLANNER__NAME);

    dslExecutorEClass = createEClass(DSL_EXECUTOR);
    createEAttribute(dslExecutorEClass, DSL_EXECUTOR__NAME);

    dslKnowledgeEClass = createEClass(DSL_KNOWLEDGE);
    createEAttribute(dslKnowledgeEClass, DSL_KNOWLEDGE__NAME);
    createEReference(dslKnowledgeEClass, DSL_KNOWLEDGE__REFERENCE_INPUT);
    createEReference(dslKnowledgeEClass, DSL_KNOWLEDGE__SHALT);

    dslSensorEClass = createEClass(DSL_SENSOR);
    createEAttribute(dslSensorEClass, DSL_SENSOR__NAME);

    dslEffectorEClass = createEClass(DSL_EFFECTOR);
    createEAttribute(dslEffectorEClass, DSL_EFFECTOR__NAME);

    dslReferenceInputEClass = createEClass(DSL_REFERENCE_INPUT);
    createEAttribute(dslReferenceInputEClass, DSL_REFERENCE_INPUT__NAME);

    dslMeasuredOutputEClass = createEClass(DSL_MEASURED_OUTPUT);
    createEAttribute(dslMeasuredOutputEClass, DSL_MEASURED_OUTPUT__NAME);

    dslAlternativeEClass = createEClass(DSL_ALTERNATIVE);
    createEAttribute(dslAlternativeEClass, DSL_ALTERNATIVE__NAME);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    dslRuleMControllerEClass.getESuperTypes().add(this.getDSLRules());
    dslRuleControllerEClass.getESuperTypes().add(this.getDSLRules());
    dslRuleMonitorEClass.getESuperTypes().add(this.getDSLRules());
    dslRuleAnalyzerEClass.getESuperTypes().add(this.getDSLRules());
    dslRulePlannerEClass.getESuperTypes().add(this.getDSLRules());
    dslRuleExecutorEClass.getESuperTypes().add(this.getDSLRules());
    dslRuleMOEClass.getESuperTypes().add(this.getDSLRules());

    // Initialize classes and features; add operations and parameters
    initEClass(architectureDefinitionEClass, ArchitectureDefinition.class, "ArchitectureDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArchitectureDefinition_Name(), ecorePackage.getEString(), "name", null, 0, 1, ArchitectureDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArchitectureDefinition_Managing(), this.getDSLManaging(), null, "managing", null, 0, -1, ArchitectureDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArchitectureDefinition_Managed(), this.getDSLManaged(), null, "managed", null, 0, -1, ArchitectureDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArchitectureDefinition_Rules(), this.getDSLRules(), null, "rules", null, 0, -1, ArchitectureDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRulesEClass, DSLRules.class, "DSLRules", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLRules_Access(), ecorePackage.getEString(), "access", null, 0, 1, DSLRules.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleMControllerEClass, DSLRuleMController.class, "DSLRuleMController", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleMController_Mcontroller1(), this.getDSLManagerController(), null, "mcontroller1", null, 0, 1, DSLRuleMController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMController_Mcontroller2(), this.getDSLManagerController(), null, "mcontroller2", null, 0, 1, DSLRuleMController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleControllerEClass, DSLRuleController.class, "DSLRuleController", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleController_Controller1(), this.getDSLController(), null, "controller1", null, 0, 1, DSLRuleController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleController_Controller2(), this.getDSLController(), null, "controller2", null, 0, 1, DSLRuleController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleMonitorEClass, DSLRuleMonitor.class, "DSLRuleMonitor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleMonitor_Monitor(), this.getDSLMonitor(), null, "monitor", null, 0, 1, DSLRuleMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMonitor_Sensor(), this.getDSLSensor(), null, "sensor", null, 0, 1, DSLRuleMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMonitor_Knowledge(), this.getDSLKnowledge(), null, "knowledge", null, 0, 1, DSLRuleMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMonitor_Analyzer(), this.getDSLAnalyzer(), null, "analyzer", null, 0, 1, DSLRuleMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMonitor_Monitor2(), this.getDSLMonitor(), null, "monitor2", null, 0, 1, DSLRuleMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleAnalyzerEClass, DSLRuleAnalyzer.class, "DSLRuleAnalyzer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleAnalyzer_Analyzer(), this.getDSLAnalyzer(), null, "analyzer", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Knowledge(), this.getDSLKnowledge(), null, "knowledge", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Monitor(), this.getDSLMonitor(), null, "monitor", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Planner(), this.getDSLPlanner(), null, "planner", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Rreference(), this.getDSLReferenceInput(), null, "rreference", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Analyzer2(), this.getDSLAnalyzer(), null, "analyzer2", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Shalt(), this.getDSLAlternative(), null, "shalt", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleAnalyzer_Executor(), this.getDSLExecutor(), null, "executor", null, 0, 1, DSLRuleAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRulePlannerEClass, DSLRulePlanner.class, "DSLRulePlanner", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRulePlanner_Planner(), this.getDSLPlanner(), null, "planner", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRulePlanner_Knowledge(), this.getDSLKnowledge(), null, "knowledge", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRulePlanner_Analyzer(), this.getDSLAnalyzer(), null, "analyzer", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRulePlanner_Executor(), this.getDSLExecutor(), null, "executor", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRulePlanner_Planner2(), this.getDSLPlanner(), null, "planner2", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRulePlanner_Shalt(), this.getDSLAlternative(), null, "shalt", null, 0, 1, DSLRulePlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleExecutorEClass, DSLRuleExecutor.class, "DSLRuleExecutor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleExecutor_Executor(), this.getDSLExecutor(), null, "executor", null, 0, 1, DSLRuleExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleExecutor_Effector(), this.getDSLEffector(), null, "effector", null, 0, 1, DSLRuleExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleExecutor_Planner(), this.getDSLPlanner(), null, "planner", null, 0, 1, DSLRuleExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleExecutor_Knowledge(), this.getDSLKnowledge(), null, "knowledge", null, 0, 1, DSLRuleExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleExecutor_Executor2(), this.getDSLExecutor(), null, "executor2", null, 0, 1, DSLRuleExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslRuleMOEClass, DSLRuleMO.class, "DSLRuleMO", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDSLRuleMO_Sensor(), this.getDSLSensor(), null, "sensor", null, 0, 1, DSLRuleMO.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLRuleMO_Measured(), this.getDSLMeasuredOutput(), null, "measured", null, 0, 1, DSLRuleMO.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslManagingEClass, DSLManaging.class, "DSLManaging", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLManaging_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLManaging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManaging_ManagerController(), this.getDSLManagerController(), null, "managerController", null, 0, -1, DSLManaging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManaging_Controller(), this.getDSLController(), null, "controller", null, 0, -1, DSLManaging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslManagedEClass, DSLManaged.class, "DSLManaged", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLManaged_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLManaged.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManaged_Sensor(), this.getDSLSensor(), null, "sensor", null, 0, -1, DSLManaged.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManaged_Effector(), this.getDSLEffector(), null, "effector", null, 0, -1, DSLManaged.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManaged_MeasuredOutput(), this.getDSLMeasuredOutput(), null, "measuredOutput", null, 0, -1, DSLManaged.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslManagerControllerEClass, DSLManagerController.class, "DSLManagerController", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLManagerController_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLManagerController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDSLManagerController_DslTypeMC(), ecorePackage.getEString(), "dslTypeMC", null, 0, 1, DSLManagerController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLManagerController_Controller(), this.getDSLController(), null, "controller", null, 0, -1, DSLManagerController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslControllerEClass, DSLController.class, "DSLController", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLController_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLController_Monitor(), this.getDSLMonitor(), null, "monitor", null, 0, -1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLController_Analyzer(), this.getDSLAnalyzer(), null, "analyzer", null, 0, -1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLController_Planner(), this.getDSLPlanner(), null, "planner", null, 0, -1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLController_Executor(), this.getDSLExecutor(), null, "executor", null, 0, -1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLController_Knowledge(), this.getDSLKnowledge(), null, "knowledge", null, 0, -1, DSLController.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslMonitorEClass, DSLMonitor.class, "DSLMonitor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLMonitor_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLMonitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslAnalyzerEClass, DSLAnalyzer.class, "DSLAnalyzer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLAnalyzer_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLAnalyzer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslPlannerEClass, DSLPlanner.class, "DSLPlanner", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLPlanner_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLPlanner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslExecutorEClass, DSLExecutor.class, "DSLExecutor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLExecutor_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLExecutor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslKnowledgeEClass, DSLKnowledge.class, "DSLKnowledge", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLKnowledge_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLKnowledge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLKnowledge_ReferenceInput(), this.getDSLReferenceInput(), null, "referenceInput", null, 0, -1, DSLKnowledge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDSLKnowledge_Shalt(), this.getDSLAlternative(), null, "shalt", null, 0, -1, DSLKnowledge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslSensorEClass, DSLSensor.class, "DSLSensor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLSensor_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLSensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslEffectorEClass, DSLEffector.class, "DSLEffector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLEffector_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLEffector.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslReferenceInputEClass, DSLReferenceInput.class, "DSLReferenceInput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLReferenceInput_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLReferenceInput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslMeasuredOutputEClass, DSLMeasuredOutput.class, "DSLMeasuredOutput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLMeasuredOutput_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLMeasuredOutput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dslAlternativeEClass, DSLAlternative.class, "DSLAlternative", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDSLAlternative_Name(), ecorePackage.getEString(), "name", null, 0, 1, DSLAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //SasDslPackageImpl
