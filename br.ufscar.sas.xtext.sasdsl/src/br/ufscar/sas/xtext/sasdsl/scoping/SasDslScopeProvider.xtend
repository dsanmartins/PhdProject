/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.scoping

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SasDslScopeProvider extends AbstractSasDslScopeProvider {



//override getScope(EObject context, EReference reference) {
 
 
 	/*
        if (reference === SasDslPackage.Literals.DSL_RULE_MONITOR__KNOWLEDGEINTERFACE) {
            if (context instanceof DSLRuleMonitor) {
                val monitor = context.monitor as DSLMonitor   
                if (monitor instanceof DSLMonitor)
                	return Scopes.scopeFor(monitor.monitorinterfaces)
            }
        }
        
        if (reference === SasDslPackage.Literals.DSL_RULE_MONITOR__SENSORINTERFACE) {
            if (context instanceof DSLRuleMonitor) {
                val monitor = context.monitor as DSLMonitor   
                if (monitor instanceof DSLMonitor)
                	return Scopes.scopeFor(monitor.monitorinterfaces)
            }
        }
        
        
        if (reference === SasDslPackage.Literals.DSL_RULE_PLANNER__KNOWLEDGEINTERFACE) {
            if (context instanceof DSLRulePlanner) {
                val planner = context.planner as DSLPlanner   
                if (planner instanceof DSLPlanner)
                	return Scopes.scopeFor(planner.plannerinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RULE_EXECUTOR__KNOWLEDGEINTERFACE) {
            if (context instanceof DSLRuleExecutor) {
                val executor = context.executor as DSLExecutor   
                if (executor instanceof DSLExecutor)
                	return Scopes.scopeFor(executor.executorinterfaces)
            }
        }

    
    if (reference === SasDslPackage.Literals.DSL_RULE_CONTROLLER__CONTROLLER) {
            if (context instanceof ArchitectureDefinition) {
            	val list = newArrayList()
            	for (a : context.managing )
            		list.addAll(a.controller)
            	return Scopes.scopeFor(list)
            }
        } 
       
         
         */ 
        
      // super.getScope(context, reference) 
    //} 
    
}
