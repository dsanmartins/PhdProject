/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.generator

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAlternative
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLController
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLDomainRule
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManagerController
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleAnalyzer
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleController
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleExecutor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMController
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMO
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleMonitor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRulePlanner
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRules
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor
import java.util.ArrayList
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRuleKnowledge

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SasDslGenerator extends AbstractGenerator {

	var structureElementPath = new HashMap<String,String>();
	var outAggregatedPath = new HashMap<String,String>();
	var inAggregatedPath = new HashMap<String,String>();
	var aggregatedPath = new HashMap<String,String>();

	var depth = newArrayList(5);
	var lManaging = new ArrayList<DSLManaging>();
	var lManaged =  new ArrayList<DSLManaged>();
	var lMController =  new ArrayList<DSLManagerController>();
	var lController =  new ArrayList<DSLController>();
	var lMonitor =  new ArrayList<DSLMonitor>();
	var lAnalyzer =  new ArrayList<DSLAnalyzer>();
	var lPlanner =  new ArrayList<DSLPlanner>();
	var lExecutor =  new ArrayList<DSLExecutor>();
	var lEffector =  new ArrayList<DSLEffector>();
	var lKnowledge =  new ArrayList<DSLKnowledge>();
	var lSensor =  new ArrayList<DSLSensor>();
	var lMOutput =  new ArrayList<DSLMeasuredOutput>();
	var lRInput =  new ArrayList<DSLReferenceInput>();
	var lAlternative =  new ArrayList<DSLAlternative>();
		
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
				
		for (e : resource.allContents.toIterable.filter(ArchitectureDefinition))
		{
			this.createPath(e)
			fsa.generateFile("PlannedArchitecture.xmi", e.compile)
			fsa.generateFile("Constraints.ocl", e.compile2)
		}
	}
	
	def createPath(ArchitectureDefinition architecture){
	
		depth.clear();
		depth.add(0,0)
		depth.add(1,0)
		depth.add(2,0)
		depth.add(3,0)
		depth.add(4,0)
		
		var managing = architecture.managing
		for (var i=0; i< managing.size; i++){
			
			var level0 = depth.get(0)
			var man = managing.get(i)
			structureElementPath.put(man.name, "//@model.1/@structureElement."+ level0)
			lManaging.add(man)
			
			var mcontroller = man.managerController
			for (var j=0; j<mcontroller.size ; j++){
				var level1=depth.get(1)
				var mcon = mcontroller.get(j)
				structureElementPath.put(mcon.name,"//@model.1/@structureElement."+ level0 +"/" + "@structureElement."+ level1)
				lMController.add(mcon)
				
				var controller = mcon.controller
				for (var k=0; k< controller.size ; k++){
					
					var level2 = depth.get(2)
					var con = controller.get(k)
					structureElementPath.put(con.name,"//@model.1/@structureElement."+ level0 +
														"/" + "@structureElement."+ level1 +
														 "/" + "@structureElement."+ level2)
					lController.add(con)
					var monitor = con.monitor
					for (var l=0; l< monitor.size; l++){
						
						var level3 = depth.get(3)
						var mon = monitor.get(l)
						structureElementPath.put(mon.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)					
						lMonitor.add(mon)					
						level3++
						depth.set(3,level3)
					}
					
					var analyzer = con.analyzer
					for (var l=0; l< analyzer.size; l++){
						
						var level3 = depth.get(3)
						var ana = analyzer.get(l)
						structureElementPath.put(ana.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)	
						lAnalyzer.add(ana)									
						level3++
						depth.set(3,level3)
					}
					
					var planner = con.planner
					for (var l=0; l< planner.size; l++){
						
						var level3 = depth.get(3)
						var pla = planner.get(l)
						structureElementPath.put(pla.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)			
						lPlanner.add(pla)							
						level3++
						depth.set(3,level3)
					}
					
					var executor = con.executor
					for (var l=0; l< executor.size; l++){
						
						var level3 = depth.get(3)
						var exe = executor.get(l)
						structureElementPath.put(exe.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)	
						lExecutor.add(exe)									
						level3++
						depth.set(3,level3)
					}
					
					var knowledge = con.knowledge
					for (var l=0; l< knowledge.size; l++){
						
						var level3 = depth.get(3)
						var kno = knowledge.get(l)
						structureElementPath.put(kno.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3)										
						
						lKnowledge.add(kno)
						var ri = kno.referenceInput
						for (var m = 0; m < ri.size; m++)
						{
							var level4 = depth.get(4);
							var r = ri.get(m)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 + 
															"/" + "@structureElement."+ level3 +
															"/" + "@structureElement."+ level4)
							lRInput.add(r)					
							level4++
							depth.set(4,level4)
						}
						
						var selfHeal = kno.shalt
						for (var s = 0; s< selfHeal.size; s++ )
						{
							var level4 = depth.get(3);
							var r = selfHeal.get(s)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 +
															"/" + "@structureElement."+ level3 +
															"/" + "@structureElement."+ level4)		
							lAlternative.add(r)		
							level4++
							depth.set(4,level4)
						}
						
						level3++
						depth.set(3,level3)
					}

					level2++
					depth.set(2,level2)
					
				}
				
				level1++
				depth.set(1,level1)
				
			}
			
			
			var controller= man.controller
			for (var k=0; k< controller.size ; k++){
					
					var level1 = depth.get(1)
					var con = controller.get(k)
					structureElementPath.put(con.name,"//@model.1/@structureElement."+ level0 +
														 "/" + "@structureElement."+ level1)
					
					lController.add(con)
					var monitor = con.monitor
					for (var l=0; l< monitor.size; l++){
						
						var level2 = depth.get(2)
						var mon = monitor.get(l)
						structureElementPath.put(mon.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)		
						lMonitor.add(mon)							
						level2++
						depth.set(2,level2)
					}
					
					var analyzer = con.analyzer
					for (var l=0; l< analyzer.size; l++){
						
						var level2 = depth.get(2)
						var ana = analyzer.get(l)
						structureElementPath.put(ana.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)		
						lAnalyzer.add(ana)								
						level2++
						depth.set(2,level2)
					}
					
					var planner = con.planner
					for (var l=0; l< planner.size; l++){
						
						var level2 = depth.get(2)
						var pla = planner.get(l)
						structureElementPath.put(pla.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)	
						lPlanner.add(pla)									
						level2++
						depth.set(2,level2)
					}
					
					var executor = con.executor
					for (var l=0; l< executor.size; l++){
						
						var level2 = depth.get(2)
						var exe = executor.get(l)
						structureElementPath.put(exe.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)		
						lExecutor.add(exe)								
						level2++
						depth.set(2,level2)
					}
					
					var knowledge = con.knowledge 
					for (var l=0; l< knowledge.size; l++){
						
						var level2 = depth.get(2)
						var kno = knowledge.get(l)
						structureElementPath.put(kno.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2)										
						lKnowledge.add(kno)
						var ri = kno.referenceInput
						for (var m = 0; m < ri.size; m++)
						{
							var level3 = depth.get(3);
							var r = ri.get(m)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 +
															"/" + "@structureElement."+ level3)			
							lRInput.add(r)		
							level3++
							depth.set(3,level3)
						}
						
						var selfHeal = kno.shalt
						for (var s = 0; s< selfHeal.size; s++ )
						{
							var level3 = depth.get(3);
							var r = selfHeal.get(s)
							structureElementPath.put(r.name,"//@model.1/@structureElement."+ level0 + 
															"/" + "@structureElement."+ level1 + 
															"/" + "@structureElement."+ level2 +
															"/" + "@structureElement."+ level3)			
							lAlternative.add(r)		
							level3++
							depth.set(3,level3)
						}
						
						level2++
						depth.set(2,level2)
					}

					level1++
					depth.set(1,level1)
					
				}
				
			level0++
			depth.set(0,level0)
		}
		
		depth.set(1,0)
		depth.set(2,0)
		depth.set(3,0)
		depth.set(4,0)
		
		var managed = architecture.managed
		for (var i=0; i< managed.size; i++){
			
			var level0 = depth.get(0)
			var man = managed.get(i)
			structureElementPath.put(man.name, "//@model.1/@structureElement."+ level0)
			lManaged.add(man)
			var sensor = man.sensor
			for (var k = 0; k < sensor.size ; k++)
			{
				var level1 = depth.get(1)
				var sen = sensor.get(k)
				structureElementPath.put(sen.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
				lSensor.add(sen)
				level1++
				depth.set(1,level1)			
			}
			
			var effector = man.effector
			for (var k = 0; k < effector.size ; k++)
			{
				var level1 = depth.get(1)
				var efe = effector.get(k)
				structureElementPath.put(efe.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
				lEffector.add(efe)
				level1++
				depth.set(1,level1)			
			}
			
			var mea = man.measuredOutput
			for (var k = 0; k < mea.size ; k++)
			{
				var level1 = depth.get(1)
				var me = mea.get(k)
				structureElementPath.put(me.name, "//@model.1/@structureElement."+ level0 + 
															"/"+ "@structureElement."+ level1 )
				lMOutput.add(me)
				level1++
				depth.set(1,level1)			
			}
			
			level0++
			depth.set(0,level0)
			
		}
		
		var rule = architecture.rules
		var rMController=0
		var rController = 0
		var rMonitor =0
		var rAnalyzer=0
		var rPlanner=0
		var rExecutor=0
		var rMO=0
		var relation = " relation='//@model.0/@codeElement.0/@codeElement.1/@actionRelation.0 " + 
							      "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.1 " +
								  "//@model.0/@codeElement.0/@codeElement.1/@actionRelation.2 " + 
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.0 " + 
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.1 " +
								  "//@model.0/@codeElement.0/@codeElement.0/@codeRelation.2' " +
								  "density='6'/> \n"
		
		for (var i=0; i< rule.size ; i++){
			
			var r = rule.get(i)
			if (r.access.equals("must-use"))
			{
				if (r instanceof DSLRuleController){
					
					var pathAggregated = outAggregatedPath.get(r.controller1.name)
					if (pathAggregated !== null)
					{
						pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
						pathAggregated = pathAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '"
						outAggregatedPath.replace(r.controller1.name,pathAggregated)
						
						if (r.controller2 !== null)
						{
							var pathInAggregated = inAggregatedPath.get(r.controller2.name)
							if (pathInAggregated !== null)
							{
								pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
								pathInAggregated = pathInAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.replace(r.controller2.name, pathInAggregated)
							}
							else
							{
								pathInAggregated = "inAggregated='" + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.put(r.controller2.name,pathInAggregated)
							}
						}
					}
					else
					{
						pathAggregated = "outAggregated='" + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '"
						outAggregatedPath.put(r.controller1.name,pathAggregated)
						
						if (r.controller2 !==null)
						{
							var pathInAggregated = inAggregatedPath.get(r.controller2.name)
							if (pathInAggregated !== null)
							{
								pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
								pathInAggregated = pathInAggregated + structureElementPath.get(r.controller1.name) + "/@aggregated."+rController + " '";
								inAggregatedPath.replace(r.controller2.name, pathInAggregated)
							}
							else
								inAggregatedPath.put(r.controller2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
						}
					}
					rController++
					var aggregated = aggregatedPath.get(r.controller1.name); 
					if (aggregated !== null)
					{
						if (r.controller2 !== null)
							aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.controller1.name) +"' to='" + structureElementPath.get(r.controller2.name) + "'" + relation			
					
						aggregatedPath.replace(r.controller1.name, aggregated)
					}
					else
					{
						if (r.controller2 !== null)
							aggregated = "<aggregated from='" + structureElementPath.get(r.controller1.name) +"' to='" + structureElementPath.get(r.controller2.name) + "'" + relation
						
						aggregatedPath.put(r.controller1.name, aggregated)
					}
				}
				else {
					if (r instanceof DSLRuleMonitor){
					
						var pathAggregated = outAggregatedPath.get(r.monitor.name)
						if (pathAggregated !== null)
						{
							pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
							pathAggregated = pathAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '"
							outAggregatedPath.replace(r.monitor.name,pathAggregated)
							
							if (r.analyzer !== null)
							{
								var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
								if (pathInAggregated !== null)
								{	
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.analyzer.name,pathInAggregated)
								}
							}
							if (r.knowledge !== null)
							{
								var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";			
									inAggregatedPath.put(r.knowledge.name,pathInAggregated)
								}
							}	
							if (r.sensor !== null)
							{	
								var pathInAggregated = inAggregatedPath.get(r.sensor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.sensor.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.sensor.name,pathInAggregated)
								}
							}
							if (r.monitor2 !== null)
							{	
								var pathInAggregated = inAggregatedPath.get(r.monitor2.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.monitor2.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.monitor2.name,pathInAggregated)
								}
							}
							if (r.planner !== null)
							{	
								var pathInAggregated = inAggregatedPath.get(r.planner.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.planner.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.planner.name,pathInAggregated)
								}
							}
							
							if (r.executor !== null)
							{	
								var pathInAggregated = inAggregatedPath.get(r.executor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.executor.name, pathInAggregated)
								}
								else
								{
									pathInAggregated = "inAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.put(r.executor.name,pathInAggregated)
								}
							}
						}
						else
						{
							pathAggregated = "outAggregated='" + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '"
							outAggregatedPath.put(r.monitor.name,pathAggregated)
							
							if (r.analyzer !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.analyzer.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}					
							if (r.knowledge !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
						
							if (r.sensor !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.sensor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.sensor.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.sensor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
							
							if (r.monitor2 !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.monitor2.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.monitor2.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.monitor2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
							
							if (r.planner !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.planner.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.planner.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.planner.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
							
							if (r.executor !==null)
							{
								var pathInAggregated = inAggregatedPath.get(r.executor.name)
								if (pathInAggregated !== null)
								{
									pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
									pathInAggregated = pathInAggregated + structureElementPath.get(r.monitor.name) + "/@aggregated."+rMonitor + " '";
									inAggregatedPath.replace(r.executor.name, pathInAggregated)
								}
								else
									inAggregatedPath.put(r.executor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
							}
							
							
						}
						rMonitor++
						
						var aggregated = aggregatedPath.get(r.monitor.name); 
						if (aggregated !== null)
						{
							if (r.analyzer !== null)	
								aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
							else
								if (r.knowledge !== null)
									aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
								else
									if (r.sensor !== null)
										aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.sensor.name) + "'" + relation
									else
										if (r.monitor2 !== null)
											aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.monitor2.name) + "'" + relation
											else
												if (r.planner !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
												else
													if (r.executor !== null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation	
													
							
							aggregatedPath.replace(r.monitor.name, aggregated)
						}
						else
						{
							if (r.analyzer !== null)	
								aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
							else
								if (r.knowledge !== null)
									aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
								else
									if (r.sensor !== null)
										aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.sensor.name) + "'" + relation
									else
										if (r.monitor2 !== null)
											aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.monitor2.name) + "'" + relation
										else
											if (r.planner !== null)
												aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.executor !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.monitor.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation		
												
							
							aggregatedPath.put(r.monitor.name, aggregated)
						}
					
						
						
					}
					else {
						if (r instanceof DSLRuleAnalyzer) {
							
								var pathAggregated = outAggregatedPath.get(r.analyzer.name)
								if (pathAggregated !== null)
								{
									pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
									pathAggregated = pathAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '"
									outAggregatedPath.replace(r.analyzer.name,pathAggregated)
									
									if (r.monitor !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.monitor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.monitor.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.monitor.name,pathInAggregated)
										}
									}	
									if (r.knowledge !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
										if (pathInAggregated !== null)
										{	
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.knowledge.name,pathInAggregated)
										}
									}
									if (r.planner !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.planner.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.planner.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.planner.name,pathInAggregated)
										}
									}	
									if (r.rreference !== null)
									{	
										var pathInAggregated = inAggregatedPath.get(r.rreference.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.rreference.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.rreference.name,pathInAggregated)
										}
									}
									if (r.analyzer2 !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.analyzer2.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.analyzer2.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.analyzer2.name,pathInAggregated)
										}
									}
									if (r.executor !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.executor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.executor.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.executor.name,pathInAggregated)
										}
									}								
									
									if (r.shalt !== null)
									{
										var pathInAggregated = inAggregatedPath.get(r.shalt.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.shalt.name, pathInAggregated)
										}
										else
										{
											pathInAggregated = "inAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.put(r.shalt.name,pathInAggregated)
										}
									}	
									
								}
								else
								{
									pathAggregated = "outAggregated='" + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '"
									outAggregatedPath.put(r.analyzer.name,pathAggregated)
									if (r.monitor !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.monitor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.monitor.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.monitor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
									}					
									if (r.knowledge !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.planner !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.planner.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.planner.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.planner.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.rreference !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.rreference.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.rreference.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.rreference.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.analyzer2 !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.analyzer2.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.analyzer2.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.analyzer2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									if (r.shalt !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.shalt.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.shalt.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.shalt.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									
									if (r.executor !==null)
									{
										var pathInAggregated = inAggregatedPath.get(r.executor.name)
										if (pathInAggregated !== null)
										{
											pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
											pathInAggregated = pathInAggregated + structureElementPath.get(r.analyzer.name) + "/@aggregated."+rAnalyzer + " '";
											inAggregatedPath.replace(r.executor.name, pathInAggregated)
										}
										else
											inAggregatedPath.put(r.executor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
									}
									
								}
								rAnalyzer++
								
								var aggregated = aggregatedPath.get(r.analyzer.name); 
								if (aggregated !== null)
								{
									if (r.monitor !== null)	
										aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation
									else
										if (r.knowledge !== null)
											aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
										else
											if (r.planner !== null)
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.rreference !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.rreference.name) + "'" + relation
												else
													if (r.analyzer2 !== null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.analyzer2.name) + "'" + relation
													else
														if (r.shalt !== null)
															aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.shalt.name) + "'" + relation	
														else
															if (r.executor !== null)
																aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation	
									
									aggregatedPath.replace(r.analyzer.name, aggregated)
								}
								else
								{
									if (r.monitor !== null)	
										aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
									else
										if (r.knowledge !== null)
											aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
										else
											if (r.planner !== null)
												aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.rreference !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.rreference.name) + "'" + relation
												else
													if (r.analyzer2 !== null)
														aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.analyzer2.name) + "'" + relation
													else
														if (r.shalt !== null)
															aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.shalt.name) + "'" + relation
															else
															if (r.executor !== null)
																aggregated = "<aggregated from='" + structureElementPath.get(r.analyzer.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation
									
									aggregatedPath.put(r.analyzer.name, aggregated)
								}
							
						}
						else {
							
							if (r instanceof DSLRulePlanner) {
								
										var pathAggregated = outAggregatedPath.get(r.planner.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '"
											outAggregatedPath.replace(r.planner.name,pathAggregated)
											
											if (r.analyzer !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.analyzer.name,pathInAggregated)
												}
											}	
											if (r.knowledge !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{	
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.knowledge.name,pathInAggregated)
												}
											}
											if (r.executor !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.executor.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.executor.name,pathInAggregated)
												}
											}	
											if (r.planner2 !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.planner2.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.planner2.name,pathInAggregated)
												}
											}	
											
											if (r.shalt !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.shalt.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.shalt.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.shalt.name,pathInAggregated)
												}
											}	  
											
											if (r.monitor !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.shalt.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.monitor.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.put(r.monitor.name,pathInAggregated)
												}
											}	
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '"
											outAggregatedPath.put(r.planner.name,pathAggregated)
											
											if (r.analyzer !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.analyzer.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))												
											}					
											if (r.knowledge !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))	
											}
											if (r.executor !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.executor.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.executor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
											}
											if (r.planner2 !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.planner2.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.planner2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
											}
											if (r.shalt !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.shalt.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.shalt.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.shalt.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
											}
											
											if (r.monitor !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.shalt.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.planner.name) + "/@aggregated."+rPlanner + " '";
													inAggregatedPath.replace(r.monitor.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.monitor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
											}
											
										}
										rPlanner++
										
										var aggregated = aggregatedPath.get(r.planner.name); 
										if (aggregated !== null)
										{
											if (r.analyzer !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.executor !== null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation
													else
														if (r.planner2 !== null)
															aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.planner2.name) + "'" + relation
														else
															if (r.shalt !== null)
																aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.shalt.name) + "'" + relation
															else
																if (r.monitor !== null)
																	aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation
												
												
											aggregatedPath.replace(r.planner.name, aggregated)
										}
										else
										{
											if (r.analyzer !== null)	
												aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.executor !== null)
														aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.executor.name) + "'" + relation
													else
														if (r.planner2 !== null)
															aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.planner2.name) + "'" + relation
														else
															if (r.shalt !== null)
																aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.shalt.name) + "'" + relation
															else
																if (r.monitor !== null)
																	aggregated = "<aggregated from='" + structureElementPath.get(r.planner.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation
															
											aggregatedPath.put(r.planner.name, aggregated)
										}
							}
							else
							{
								if (r instanceof DSLRuleExecutor ) {
									
										var pathAggregated = outAggregatedPath.get(r.executor.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '"
											outAggregatedPath.replace(r.executor.name,pathAggregated)
										
											if (r.planner !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.planner.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.planner.name,pathInAggregated)
												}
											}	
											if (r.knowledge !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{	
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.knowledge.name,pathInAggregated)
												}
											}
											if (r.effector !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.effector.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.effector.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.effector.name,pathInAggregated)
												}
											}	
											if (r.executor2 !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.executor2.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.executor2.name,pathInAggregated)
												}
											}	
											
											if (r.monitor !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.monitor.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.monitor.name,pathInAggregated)
												}
											}	
											
											if (r.analyzer !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.put(r.analyzer.name,pathInAggregated)
												}
											}	
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '"
											outAggregatedPath.put(r.executor.name,pathAggregated)
											
											if (r.planner !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.planner.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.planner.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.planner.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))										
											}					
											if (r.knowledge !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.knowledge.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.knowledge.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.knowledge.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))								
											}
											if (r.effector !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.effector.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.effector.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.effector.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))									
											}
											if (r.executor2 !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.executor2.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.executor2.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.executor2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))									
											}		
											
											if (r.monitor !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.monitor.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.monitor.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.monitor.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))									
											}		
											
											if (r.analyzer !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.analyzer.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.executor.name) + "/@aggregated."+rExecutor + " '";
													inAggregatedPath.replace(r.analyzer.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.analyzer.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))									
											}							
										}
										rExecutor++
										
										var aggregated = aggregatedPath.get(r.executor.name); 
										if (aggregated !== null)
										{
											if (r.planner !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.effector !==null)
														aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.effector.name) + "'" + relation
													else
														if (r.executor2 !==null)
															aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.executor2.name) + "'" + relation
														else
															if (r.monitor !==null)
																aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation
															else
																if (r.analyzer !==null)
																	aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation
															
											aggregatedPath.replace(r.executor.name, aggregated)
										}
										else
										{
											if (r.planner !== null)	
												aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.planner.name) + "'" + relation
											else
												if (r.knowledge !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.knowledge.name) + "'" + relation
												else
													if (r.effector !== null)
														aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.effector.name) + "'" + relation
													else
														if (r.executor2 !== null)
															aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.executor2.name) + "'" + relation
														else
															if (r.monitor !== null)
																aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.monitor.name) + "'" + relation														
															else
																if (r.analyzer !== null)
																	aggregated = "<aggregated from='" + structureElementPath.get(r.executor.name) +"' to='" + structureElementPath.get(r.analyzer.name) + "'" + relation	
															
											aggregatedPath.put(r.executor.name, aggregated)
										}
								}
								else {
									
									if (r instanceof DSLRuleMO ) {
									
										var pathAggregated = outAggregatedPath.get(r.sensor.name)
										if (pathAggregated !== null)
										{
											pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
											pathAggregated = pathAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '"
											outAggregatedPath.replace(r.sensor.name,pathAggregated)
											
											if (r.measured !== null)
											{
												var pathInAggregated = inAggregatedPath.get(r.measured.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.replace(r.measured.name, pathInAggregated)
												}
												else
												{
													pathInAggregated = "inAggregated='" + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.put(r.measured.name,pathInAggregated)
												}
											}
										}
										else
										{
											pathAggregated = "outAggregated='" + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '"
											outAggregatedPath.put(r.sensor.name,pathAggregated)		
											if (r.measured !==null)
											{
												var pathInAggregated = inAggregatedPath.get(r.measured.name)
												if (pathInAggregated !== null)
												{
													pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
													pathInAggregated = pathInAggregated + structureElementPath.get(r.sensor.name) + "/@aggregated."+rMO + " '";
													inAggregatedPath.replace(r.measured.name, pathInAggregated)
												}
												else
													inAggregatedPath.put(r.measured.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))												
											}			
										}
										rMO++
										
										var aggregated = aggregatedPath.get(r.sensor.name); 
										if (aggregated !== null)
										{
											if (r.sensor !== null)	
												aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.sensor.name) +"' to='" + structureElementPath.get(r.measured.name) + "'" + relation
										
											aggregatedPath.replace(r.sensor.name, aggregated)
										}
										else
										{
											if (r.sensor !== null)
												aggregated = "<aggregated from='" + structureElementPath.get(r.sensor.name) +"' to='" + structureElementPath.get(r.measured.name) + "'" + relation
											
											aggregatedPath.put(r.sensor.name, aggregated)
										}
									}
									else{ 
										
										if (r instanceof DSLRuleMController){
											
											var pathAggregated = outAggregatedPath.get(r.mcontroller1)
											if (pathAggregated !== null)
											{
												pathAggregated = pathAggregated.substring(0,pathAggregated.length-1)
												pathAggregated = pathAggregated + structureElementPath.get(r.mcontroller1.name) + "/@aggregated."+rMController + " '"
												outAggregatedPath.replace(r.mcontroller1.name,pathAggregated)
												
												if (r.mcontroller2 !== null)
												{
													var pathInAggregated = inAggregatedPath.get(r.mcontroller2.name)
													if (pathInAggregated !== null)
													{
														pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
														pathInAggregated = pathInAggregated + structureElementPath.get(r.mcontroller1.name) + "/@aggregated."+rMController + " '";
														inAggregatedPath.replace(r.mcontroller2.name, pathInAggregated)
													}
													else
													{
														pathInAggregated = "inAggregated='" + structureElementPath.get(r.mcontroller1.name) + "/@aggregated."+rMController + " '";
														inAggregatedPath.put(r.mcontroller2.name,pathInAggregated)
													}
												}
											}
											else
											{
												pathAggregated = "outAggregated='" + structureElementPath.get(r.mcontroller1.name) + "/@aggregated."+rMController + " '"
												outAggregatedPath.put(r.mcontroller1.name,pathAggregated)
												
												if (r.mcontroller2 !==null)
												{
													var pathInAggregated = inAggregatedPath.get(r.mcontroller2.name)
													if (pathInAggregated !== null)
													{
														pathInAggregated = pathInAggregated.substring(0,pathInAggregated.length-1)
														pathInAggregated = pathInAggregated + structureElementPath.get(r.mcontroller1.name) + "/@aggregated."+rMController + " '";
														inAggregatedPath.replace(r.mcontroller2.name, pathInAggregated)
													}
													else
														inAggregatedPath.put(r.mcontroller2.name,pathAggregated.replaceFirst("outAggregated","inAggregated"))
												}
											}
											rMController++
											var aggregated = aggregatedPath.get(r.mcontroller1.name); 
											if (aggregated !== null)
											{
												if (r.mcontroller2 !== null)
													aggregated = aggregated + "<aggregated from='" + structureElementPath.get(r.mcontroller1.name) +"' to='" + structureElementPath.get(r.mcontroller2.name) + "'" + relation			
											
												aggregatedPath.replace(r.mcontroller1.name, aggregated)
											}
											else
											{
												if (r.mcontroller2 !== null)
													aggregated = "<aggregated from='" + structureElementPath.get(r.mcontroller1.name) +"' to='" + structureElementPath.get(r.mcontroller2.name) + "'" + relation
												
												aggregatedPath.put(r.mcontroller1.name, aggregated)
											}
										}
									}
								}
							}
						}
					}
				}
			}	
		}
	}
	
	def compile(ArchitectureDefinition architectureDefinition){
				
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:action="http://www.eclipse.org/MoDisco/kdm/action" xmlns:code="http://www.eclipse.org/MoDisco/kdm/code" xmlns:kdm="http://www.eclipse.org/MoDisco/kdm/kdm" xmlns:source="http://www.eclipse.org/MoDisco/kdm/source" xmlns:structure="http://www.eclipse.org/MoDisco/kdm/structure">
			<kdm:Segment name="Planned Architecture">
			<model xsi:type="code:CodeModel" name="Elements Instances">
				<codeElement xsi:type="code:Module" name="Module Instance">
					<codeElement xsi:type="code:CodeElement" name="codeElement Instance">
			       		<codeRelation xsi:type="code:Extends"/>
			       		<codeRelation xsi:type="code:Implements"/>
			        	<codeRelation xsi:type="code:HasValue"/>
			      	</codeElement>
					<codeElement xsi:type="action:ActionElement" name="actionElement Instance">
			        	<actionRelation xsi:type="action:Calls"/>
			        	<actionRelation xsi:type="action:UsesType"/>
			        	<actionRelation xsi:type="action:Creates"/>
			    	</codeElement>
				</codeElement>
			</model>
			<extension xsi:type="kdm:ExtensionFamily" name="Adaptive System Domain">
			     <stereotype name="Monitor" type="structure:Component"/>
			     <stereotype name="Analyzer" type="structure:Component"/>
			     <stereotype name="Planner" type="structure:Component"/>
			     <stereotype name="Executor" type="structure:Component"/>
			     <stereotype name="Knowledge" type="structure:Component"/>
			     <stereotype name="Reference Input" type="structure:Component"/>
			     <stereotype name="Measured Output" type="structure:Component"/>
			     <stereotype name="Loop Manager" type="structure:Component"/>
			     <stereotype name="Loop" type="structure:Component"/>
			     <stereotype name="Sensor" type="structure:Component"/>
			     <stereotype name="Effector" type="structure:Component"/>
			     <stereotype name="Managing Subsystem" type="structure:Subsystem"/>
			     <stereotype name="Managed Subsystem" type="structure:Subsystem"/>
			     <stereotype name="Alternative" type="structure:Component"/>
			</extension>
			<model xsi:type="structure:StructureModel" name="ArchitecturalView_">
				«FOR arch : architectureDefinition.managing»
				<structureElement xsi:type="structure:Subsystem" name="«arch.name»" stereotype="/0/@extension.0/@stereotype.11">
					«FOR mcontroller: arch.managerController»
						<structureElement xsi:type="structure:Component" name="«mcontroller.name»" stereotype="/0/@extension.0/@stereotype.7">
							«FOR controller: mcontroller.controller»
							<structureElement xsi:type="structure:Component" name="«controller.name»" stereotype="/0/@extension.0/@stereotype.8" «outAggregatedPath.get(controller.name)»>
								«aggregatedPath.get(controller.name)»
								«FOR monitor: controller.monitor»
								<structureElement xsi:type="structure:Component" name="«monitor.name»" stereotype="/0/@extension.0/@stereotype.0" «outAggregatedPath.get(monitor.name)» «inAggregatedPath.get(monitor.name)»>
									«aggregatedPath.get(monitor.name)»					
								</structureElement>
								«ENDFOR»
								«FOR analyzer: controller.analyzer»
								<structureElement xsi:type="structure:Component" name="«analyzer.name»" stereotype="/0/@extension.0/@stereotype.1" «outAggregatedPath.get(analyzer.name)» «inAggregatedPath.get(analyzer.name)»>
									«aggregatedPath.get(analyzer.name)»											
								</structureElement>
								«ENDFOR»
								«FOR planner: controller.planner»
								<structureElement xsi:type="structure:Component" name="«planner.name»" stereotype="/0/@extension.0/@stereotype.2" «outAggregatedPath.get(planner.name)» «inAggregatedPath.get(planner.name)»>
									«aggregatedPath.get(planner.name)»																	
								</structureElement>
								«ENDFOR»
								«FOR executor: controller.executor»
								<structureElement xsi:type="structure:Component" name="«executor.name»" stereotype="/0/@extension.0/@stereotype.3" «outAggregatedPath.get(executor.name)» «inAggregatedPath.get(executor.name)»>
									«aggregatedPath.get(executor.name)»																						
								</structureElement>
								«ENDFOR»
								«FOR knowledge: controller.knowledge»
								<structureElement xsi:type="structure:Component" name="«knowledge.name»" stereotype="/0/@extension.0/@stereotype.4" «inAggregatedPath.get(knowledge.name)»>
									«FOR referenceInput: knowledge.referenceInput»
									<structureElement xsi:type="structure:Component" name="«referenceInput.name»" stereotype="/0/@extension.0/@stereotype.5" «inAggregatedPath.get(referenceInput.name)»/>
									«ENDFOR»	
									«FOR shalt: knowledge.shalt»
									<structureElement xsi:type="structure:Component" name="«shalt.name»" stereotype="/0/@extension.0/@stereotype.13" «inAggregatedPath.get(shalt.name)»/>
									«ENDFOR»																											
								</structureElement>
								«ENDFOR»
							</structureElement>
						«ENDFOR»
					</structureElement>
					«ENDFOR»
					«FOR controller: arch.controller»
					<structureElement xsi:type="structure:Component" name="«controller.name»" stereotype="/0/@extension.0/@stereotype.8"  «outAggregatedPath.get(controller.name)»>
						«aggregatedPath.get(controller.name)»
						«FOR monitor: controller.monitor»
						<structureElement xsi:type="structure:Component" name="«monitor.name»" stereotype="/0/@extension.0/@stereotype.0" «outAggregatedPath.get(monitor.name)» «inAggregatedPath.get(monitor.name)»>
							«aggregatedPath.get(monitor.name)»												
						</structureElement>
						«ENDFOR»
						«FOR analyzer: controller.analyzer»
						<structureElement xsi:type="structure:Component" name="«analyzer.name»" stereotype="/0/@extension.0/@stereotype.1" «outAggregatedPath.get(analyzer.name)» «inAggregatedPath.get(analyzer.name)»>
							«aggregatedPath.get(analyzer.name)»																		
						</structureElement>
						«ENDFOR»
						«FOR planner: controller.planner»
						<structureElement xsi:type="structure:Component" name="«planner.name»" stereotype="/0/@extension.0/@stereotype.2" «outAggregatedPath.get(planner.name)» «inAggregatedPath.get(planner.name)»>
							«aggregatedPath.get(planner.name)»																								
						</structureElement>
						«ENDFOR»
						«FOR executor: controller.executor»
						<structureElement xsi:type="structure:Component" name="«executor.name»" stereotype="/0/@extension.0/@stereotype.3" «outAggregatedPath.get(executor.name)» «inAggregatedPath.get(executor.name)»>
							«aggregatedPath.get(executor.name)»																													
						</structureElement>
						«ENDFOR»
						«FOR knowledge: controller.knowledge»
						<structureElement xsi:type="structure:Component" name="«knowledge.name»" stereotype="/0/@extension.0/@stereotype.4" «inAggregatedPath.get(knowledge.name)»>
							«FOR referenceInput: knowledge.referenceInput»
							<structureElement xsi:type="structure:Component" name="«referenceInput.name»" stereotype="/0/@extension.0/@stereotype.5" «inAggregatedPath.get(referenceInput.name)» />
							«ENDFOR»
							«FOR shalt: knowledge.shalt»
							<structureElement xsi:type="structure:Component" name="«shalt.name»" stereotype="/0/@extension.0/@stereotype.13" «inAggregatedPath.get(shalt.name)» />
							«ENDFOR»																											
						</structureElement>
						«ENDFOR»
					</structureElement>
					«ENDFOR»
				</structureElement>
				«ENDFOR»
			
				«FOR arch : architectureDefinition.managed»
				<structureElement xsi:type="structure:Subsystem" name="«arch.name»" stereotype="/0/@extension.0/@stereotype.12">
					«FOR sensor : arch.sensor»
					<structureElement xsi:type="structure:Component" name="«sensor.name»" stereotype="/0/@extension.0/@stereotype.9" «outAggregatedPath.get(sensor.name)» «inAggregatedPath.get(sensor.name)»>
						«aggregatedPath.get(sensor.name)»				
					</structureElement>			
					«ENDFOR»
					«FOR effector : arch.effector»
					<structureElement xsi:type="structure:Component" name="«effector.name»" stereotype="/0/@extension.0/@stereotype.10" «inAggregatedPath.get(effector.name)»>
													
					</structureElement>			
					«ENDFOR»
					«FOR measuredOutput : arch.measuredOutput»
					<structureElement xsi:type="structure:Component" name="«measuredOutput.name»" stereotype="/0/@extension.0/@stereotype.6" «inAggregatedPath.get(measuredOutput.name)»>
																	
					</structureElement>			
					«ENDFOR»
				</structureElement>			
				«ENDFOR»
			</model>
			</kdm:Segment>	
		</xmi:XMI>
		'''
		
	}
	
	def compile2(ArchitectureDefinition architectureDefinition){
	
		var resource = architectureDefinition.eResource
		for (sc : resource.allContents.filter(typeof(DSLController)).toIterable)
		{
			var dslDomain = sc.eContents.filter(DSLDomainRule).toList
			for (domain: dslDomain)
			{
				System.out.println(sc.name + " " + domain.value)
			}
			
			
			
		}
		
		'''
	import 'http://www.eclipse.org/MoDisco/kdm/core'
	import 'http://www.eclipse.org/MoDisco/kdm/kdm'
	import 'http://www.eclipse.org/MoDisco/kdm/source'
	import 'http://www.eclipse.org/MoDisco/kdm/code'
	import 'http://www.eclipse.org/MoDisco/kdm/action'
	import 'http://www.eclipse.org/MoDisco/kdm/structure'
	
	package structure
	
	---------------------------------------------------------
	-- Check the existence of adaptive system abstractions --
	---------------------------------------------------------
	
		«FOR DSLManaging managing : lManaging»
		context StructureModel
		inv exist_«managing.name»: Subsystem.allInstances()->exists(c| c.name='«managing.name»' and c.stereotype->asSequence()->first().name = 'Managing Subsystem')
		
		«ENDFOR»	
		«FOR DSLManaged managed : lManaged»
		context StructureModel
		inv exist_«managed.name»: Subsystem.allInstances()->exists(c| c.name='«managed.name»' and c.stereotype->asSequence()->first().name = 'Managed Subsystem')
		
		«ENDFOR»	
		«FOR DSLManagerController mcontroller : lMController»
		context StructureModel
		inv exist_«mcontroller.name»: Component.allInstances()->exists(c| c.name='«mcontroller.name»' and c.stereotype->asSequence()->first().name = 'Loop Manager')
		
		«ENDFOR»	
		«FOR DSLController controller : lController»
		context StructureModel
		inv exist_«controller.name»: Component.allInstances()->exists(c| c.name='«controller.name»' and c.stereotype->asSequence()->first().name = 'Loop')
		
		«ENDFOR»	
		«FOR DSLMonitor monitor : lMonitor»
		context StructureModel
		inv exist_«monitor.name»: Component.allInstances()->exists(c| c.name='«monitor.name»' and c.stereotype->asSequence()->first().name = 'Monitor')
		
		«ENDFOR»	
		«FOR DSLAnalyzer analyzer : lAnalyzer»
		context StructureModel
		inv exist_«analyzer.name»: Component.allInstances()->exists(c| c.name='«analyzer.name»' and c.stereotype->asSequence()->first().name = 'Analyzer')
		
		«ENDFOR»	
		«FOR DSLPlanner planner : lPlanner»
		context StructureModel
		inv exist_«planner.name»: Component.allInstances()->exists(c| c.name='«planner.name»' and c.stereotype->asSequence()->first().name = 'Planner')
		
		«ENDFOR»	
		«FOR DSLExecutor executor : lExecutor»
		context StructureModel
		inv exist_«executor.name»: Component.allInstances()->exists(c| c.name='«executor.name»' and c.stereotype->asSequence()->first().name = 'Executor')
		
		«ENDFOR»	
		«FOR DSLKnowledge knowledge : lKnowledge»
		context StructureModel
		inv exist_«knowledge.name»: Component.allInstances()->exists(c| c.name='«knowledge.name»' and c.stereotype->asSequence()->first().name = 'Knowledge')
		
		«ENDFOR»	
		«FOR DSLEffector effector : lEffector»
		context StructureModel
		inv exist_«effector.name»: Component.allInstances()->exists(c| c.name='«effector.name»' and c.stereotype->asSequence()->first().name = 'Effector')
		
		«ENDFOR»	
		«FOR DSLSensor sensor : lSensor»
		context StructureModel
		inv exist_«sensor.name»: Component.allInstances()->exists(c| c.name='«sensor.name»' and c.stereotype->asSequence()->first().name = 'Sensor')
		
		«ENDFOR»	
		«FOR DSLMeasuredOutput mesOutput : lMOutput»
		context StructureModel
		inv exist_«mesOutput.name»: Component.allInstances()->exists(c| c.name='«mesOutput.name»' and c.stereotype->asSequence()->first().name = 'Measured Output')
		
		«ENDFOR»	
		«FOR DSLReferenceInput refInput : lRInput»
		context StructureModel
		inv exist_«refInput.name»: Component.allInstances()->exists(c| c.name='«refInput.name»' and c.stereotype->asSequence()->first().name = 'Reference Input')
		
		«ENDFOR»	
		«FOR DSLAlternative shalt : lAlternative»
		context StructureModel
		inv exist_«shalt.name»: Component.allInstances()->exists(c| c.name='«shalt.name»' and c.stereotype->asSequence()->first().name = 'Alternative')
		
		«ENDFOR»	
	--------------------------------------------------------
	-- Check compositions of adaptive system abstractions --
	--------------------------------------------------------
	
		«FOR DSLManaging managing : lManaging»
		«IF managing.eContainer instanceof ArchitectureDefinition»
		context StructureModel
		inv composite_«managing.name»: Subsystem.allInstances()->select(c| c.name='«managing.name»' and c.stereotype->asSequence()->first().name = 'Managing Subsystem') -> exists(d|d.oclContainer().oclIsTypeOf(StructureModel))
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLManaged managed : lManaged»
		«IF managed.eContainer instanceof ArchitectureDefinition»
		context StructureModel
		inv composite_«managed.name»: Subsystem.allInstances()->select(c| c.name='«managed.name»' and c.stereotype->asSequence()->first().name = 'Managed Subsystem') -> exists(d|d.oclContainer().oclIsTypeOf(StructureModel))
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLManagerController mcontroller : lMController»
		«IF mcontroller.eContainer instanceof DSLManaging»
		«var managing = mcontroller.eContainer as DSLManaging»
		context StructureModel
		inv composite_«mcontroller.name»: Component.allInstances()->select(c| c.name='«mcontroller.name»' and c.stereotype->asSequence()->first().name = 'Loop Manager')->
										  exists(d|d.oclContainer().oclAsType(Subsystem).name='«managing.name»' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = 'Managing Subsystem')
		«ENDIF»
		«ENDFOR»
			
		«FOR DSLController controller : lController»
		«IF controller.eContainer instanceof DSLManaging»
		«var managing = controller.eContainer as DSLManaging»
		context StructureModel
		inv composite_«controller.name»: Component.allInstances()->select(c| c.name='«controller.name»' and c.stereotype->asSequence()->first().name = 'Loop Manager')->
										 exists(d|d.oclContainer().oclAsType(Subsystem).name='«managing.name»' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = 'Managing Subsystem')
		«ELSEIF controller.eContainer instanceof DSLManagerController»
		«var mcontroller = controller.eContainer as DSLManagerController»
		context StructureModel
				inv composite_«controller.name»: Component.allInstances()->select(c| c.name='«controller.name»' and c.stereotype->asSequence()->first().name = 'Loop Manager')->
												 exists(d|d.oclContainer().oclAsType(Subsystem).name='«mcontroller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop Manager')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLMonitor monitor : lMonitor»
		«IF monitor.eContainer instanceof DSLController»
		«var controller = monitor.eContainer as DSLController»
		context StructureModel
		inv composite_«monitor.name»: Component.allInstances()->select(c| c.name='«monitor.name»' and c.stereotype->asSequence()->first().name = 'Monitor')->
									  exists(d|d.oclContainer().oclAsType(Component).name='«controller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop')
		«ENDIF»
		«ENDFOR»
			
		«FOR DSLAnalyzer analyzer : lAnalyzer»
		«IF analyzer.eContainer instanceof DSLController»
		«var controller = analyzer.eContainer as DSLController»
		context StructureModel
		inv composite_«analyzer.name»: Component.allInstances()->select(c| c.name='«analyzer.name»' and c.stereotype->asSequence()->first().name = 'Analyzer')->
									  exists(d|d.oclContainer().oclAsType(Component).name='«controller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop')
		«ENDIF»
		«ENDFOR»
			
		«FOR DSLPlanner planner : lPlanner»
		«IF planner.eContainer instanceof DSLController»
		«var controller = planner.eContainer as DSLController»
		context StructureModel
		inv composite_«planner.name»: Component.allInstances()->select(c| c.name='«planner.name»' and c.stereotype->asSequence()->first().name = 'Planner')->
									  exists(d|d.oclContainer().oclAsType(Component).name='«controller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLExecutor executor : lExecutor»
		«IF executor.eContainer instanceof DSLController»
		«var controller = executor.eContainer as DSLController»
		context StructureModel
		inv composite_«executor.name»: Component.allInstances()->select(c| c.name='«executor.name»' and c.stereotype->asSequence()->first().name = 'Executor')->
									  exists(d|d.oclContainer().oclAsType(Component).name='«controller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLKnowledge knowledge : lKnowledge»
		«IF knowledge.eContainer instanceof DSLController»
		«var controller = knowledge.eContainer as DSLController»
		context StructureModel
		inv composite_«knowledge.name»: Component.allInstances()->select(c| c.name='«knowledge.name»' and c.stereotype->asSequence()->first().name = 'Knowledge')->
									  exists(d|d.oclContainer().oclAsType(Component).name='«controller.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Loop')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLEffector effector : lEffector»
		«IF effector.eContainer instanceof DSLManaged»
		«var managed = effector.eContainer as DSLManaged»
		context StructureModel
		inv composite_«effector.name»: Component.allInstances()->select(c| c.name='«effector.name»' and c.stereotype->asSequence()->first().name = 'Effector')->
									   exists(d|d.oclContainer().oclAsType(Subsystem).name='«managed.name»' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = 'Managed Subsystem')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLSensor sensor : lSensor»
		«IF sensor.eContainer instanceof DSLManaged»
		«var managed = sensor.eContainer as DSLManaged»
		context StructureModel
		inv composite_«sensor.name»: Component.allInstances()->select(c| c.name='«sensor.name»' and c.stereotype->asSequence()->first().name = 'Sensor')->
									   exists(d|d.oclContainer().oclAsType(Subsystem).name='«managed.name»' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = 'Managed Subsystem')
		«ENDIF»
		«ENDFOR»
			
		«FOR DSLMeasuredOutput mesOutput : lMOutput»
		«IF mesOutput.eContainer instanceof DSLManaged»
		«var managed = mesOutput.eContainer as DSLManaged»
		context StructureModel
		inv composite_«mesOutput.name»: Component.allInstances()->select(c| c.name='«mesOutput.name»' and c.stereotype->asSequence()->first().name = 'Measured Output')->
								     exists(d|d.oclContainer().oclAsType(Subsystem).name='«managed.name»' and d.oclContainer().oclAsType(Subsystem).stereotype->asSequence()->first().name = 'Managed Subsystem')
		«ENDIF»
		«ENDFOR»	
		
		«FOR DSLReferenceInput refInput : lRInput»
		«IF refInput.eContainer instanceof DSLKnowledge»
		«var knowledge = refInput.eContainer as DSLKnowledge»
		context StructureModel
		inv composite_«refInput.name»: Component.allInstances()->select(c| c.name='«refInput.name»' and c.stereotype->asSequence()->first().name = 'Reference Input')->
									    exists(d|d.oclContainer().oclAsType(Component).name='«knowledge.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Knowledge')
		«ENDIF»
		«ENDFOR»
		
		«FOR DSLAlternative shalt : lAlternative»
		«IF shalt.eContainer instanceof DSLKnowledge»
		«var knowledge = shalt.eContainer as DSLKnowledge»
		context StructureModel
		inv composite_«shalt.name»: Component.allInstances()->select(c| c.name='«shalt.name»' and c.stereotype->asSequence()->first().name = 'Alternative')->
									    exists(d|d.oclContainer().oclAsType(Component).name='«knowledge.name»' and d.oclContainer().oclAsType(Component).stereotype->asSequence()->first().name = 'Knowledge')
		«ENDIF»
		«ENDFOR»	
	
		--------------------------------------------------------
		-- Check access rules of adaptive system abstractions --
		-------------------------------------------------------
		
		«var rules = architectureDefinition.rules»
		«FOR DSLRules dslRule: rules»
		«IF dslRule instanceof DSLRuleMController»
		«var dslRuleMController = dslRule as DSLRuleMController»
		«IF dslRuleMController.mcontroller2 !== null»
		«var firstArgument = dslRuleMController.mcontroller1»
		«var secondArgument = dslRuleMController.mcontroller2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleController»
		«var dslRuleController = dslRule as DSLRuleController»
		«IF dslRuleController.controller2 !== null»
		«var firstArgument = dslRuleController.controller1»
		«var secondArgument = dslRuleController.controller2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleMonitor»
		«var dslRuleMonitor = dslRule as DSLRuleMonitor»
		«IF dslRuleMonitor.analyzer !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.analyzer»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleMonitor.knowledge !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.knowledge»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleMonitor.planner !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.planner»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleMonitor.executor !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.executor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleMonitor.monitor2 !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.monitor2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleMonitor.sensor !== null»
		«var firstArgument = dslRuleMonitor.monitor»
		«var secondArgument = dslRuleMonitor.sensor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleAnalyzer»
		«var dslRuleAnalyzer = dslRule as DSLRuleAnalyzer»
		«IF dslRuleAnalyzer.monitor !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.monitor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.knowledge !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.knowledge»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.rreference !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.rreference»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.planner !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.planner»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.analyzer2 !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.analyzer2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.shalt !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.shalt»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleAnalyzer.executor !== null»
		«var firstArgument = dslRuleAnalyzer.analyzer»
		«var secondArgument = dslRuleAnalyzer.executor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRulePlanner»
		«var dslRulePlanner = dslRule as DSLRulePlanner»
		«IF dslRulePlanner.analyzer !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.analyzer»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRulePlanner.planner2 !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.planner2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRulePlanner.monitor !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.monitor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRulePlanner.shalt !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.shalt»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRulePlanner.executor !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.executor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRulePlanner.knowledge !== null»
		«var firstArgument = dslRulePlanner.planner»
		«var secondArgument = dslRulePlanner.knowledge»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleExecutor»
		«var dslRuleExecutor = dslRule as DSLRuleExecutor»
		«IF dslRuleExecutor.knowledge !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.knowledge»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleExecutor.planner !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.planner»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleExecutor.monitor !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.monitor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleExecutor.analyzer !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.analyzer»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleExecutor.effector !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.effector»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleExecutor.executor2 !== null»
		«var firstArgument = dslRuleExecutor.executor»
		«var secondArgument = dslRuleExecutor.executor2»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleMO»
		«var dslRuleSensor = dslRule as DSLRuleMO»
		«IF dslRuleSensor.measured !== null»
		«var firstArgument = dslRuleSensor.sensor»
		«var secondArgument = dslRuleSensor.measured»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ELSEIF dslRule instanceof DSLRuleKnowledge»
		«var dslRuleKnowledge = dslRule as DSLRuleKnowledge»
		«IF dslRuleKnowledge.monitor !== null»
		«var firstArgument = dslRuleKnowledge.knowledge»
		«var secondArgument = dslRuleKnowledge.monitor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleKnowledge.analyzer !== null»
		«var firstArgument = dslRuleKnowledge.knowledge»
		«var secondArgument = dslRuleKnowledge.analyzer»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleKnowledge.planner !== null»
		«var firstArgument = dslRuleKnowledge.knowledge»
		«var secondArgument = dslRuleKnowledge.planner»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«IF dslRuleKnowledge.executor !== null»
		«var firstArgument = dslRuleKnowledge.knowledge»
		«var secondArgument = dslRuleKnowledge.executor»
		«IF dslRule.access.equals("must-use")»
		context StructureModel
		inv access_«firstArgument.name»_«secondArgument.name»: AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»') 
		«ELSEIF dslRule.access.equals("must-not-use")»
		context StructureModel
		inv not_access_«firstArgument.name»_«secondArgument.name»: not AggregatedRelationship.allInstances()->exists(c| c.from.name='«firstArgument.name»' and c.to.name='«secondArgument.name»')
		«ENDIF»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
	endpackage
		'''
	}
}
