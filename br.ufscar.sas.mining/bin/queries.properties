<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
       
    <entry key = "getFromTo">	
	  declare namespace xmi="http://www.omg.org/XMI";
   	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	  declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	  declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  let $combine := concat(?, '|', ?, '-') 
	  return string-join(

      for $i in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//actionRelation[@xsi:type="action:Calls"]
      return if (starts-with(string($i/@to), '/0/@model.0/') or starts-with(string($i/@to), '//@model.0/') )   then $combine($i/@to, $i/@from) else ""
   
       )
   
    </entry>
     
    <entry key = "getPathOfMethod">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;

		for $a in path(//kdm:Segment//codeElement[@xsi:type="code:MethodUnit" and @name=$name1])
		return data($a)
    </entry> 
    
    <entry key = "queryHeader">
    	
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
			    
    </entry>
    
    
     <entry key= "getPathsofStructure">
    
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace functx = "http://www.functx.com";
		declare function functx:replace-first
		  ( $arg as xs:string? ,
		    $pattern as xs:string ,
		     $replacement as xs:string )  as xs:string {
		  
		   replace($arg, concat('(^.*?)', $pattern),
		            concat('$1',$replacement))
		   } ;
		
		for $a in //kdm:Segment/model[@xsi:type="structure:StructureModel" and @name != "externals"]/structureElement
		let $b:= path($a)
		let $c:= replace($b,'Q\{\}','')
		let $d:= tokenize($c, 'Segment\[[0-9]\]')[2]
		let $h:= functx:replace-first($d, '/model','//model')    
		return $h
    
    </entry>
    
    <entry key = "getRelations">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
		for $a in //kdm:Segment/model[@xsi:type="structure:StructureModel" and @name != "externals"]//aggregated
		let $b:= string($a/data(@from))
		let $c:= string($a/data(@to))  
		let $d:= string($a/data(@relation))  
		let $b:= replace($b,'\.','[')
		let $b:= replace($b,'@','')
		let $b:= replace($b,'//','@@')
		let $b:= replace($b,'/',']/')
		let $b:= replace($b,'@@','//')
		let $b:= concat($b,']')
		let $c:= replace($c,'\.','[')
		let $c:= replace($c,'@','')
		let $c:= replace($c,'//','@@')
		let $c:= replace($c,'/',']/')
		let $c:= replace($c,'@@','//')
		let $c:= concat($c,']')
		let $d:= replace($d,'\.','[')
		let $d:= replace($d,'@','')
		let $d:= replace($d,'//','@@')
		let $d:= replace($d,'/',']/')
		let $d:= replace($d,'@@','//')
		let $d:= replace($d,' ','] ')
		let $d:= concat($d,']')
		return concat($b,'-',$c, '-', $d)
    </entry>
    
     
</properties>