<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
   
    <entry key = "getPathOfReturn">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
        declare variable $name1 as xs:string external;

		for $a in path(//kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and @name=$name1]//codeElement[@xsi:type="action:ActionElement" and @name="return" and @kind="return"])
		return data($a)
    </entry>
    
    <entry key = "getPathOfClass">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;

		for $a in path(//kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:ClassUnit" and @name=$name1])
		return data($a)
    </entry>
    
    <entry key = "getPathOfMethod">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;

		for $a in path(//kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and @name=$name1])
		return data($a)
    </entry>
    
    <entry key = "getPathOfProperty">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;

		for $a in path(//kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:StorableUnit" and @name=$name1])
		return data($a)
    </entry>
    
    <entry key = "getMethodName">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;

		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and starts-with(@name, "get") and contains(lower-case(@name),lower-case($name1))]
		return data($a/@name)
    </entry> 
    
     <entry key = "getPropertyName">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		

		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:StorableUnit"]
		return data($a/@name)
    </entry> 
    
    <entry key = "checkPropertyBelongToClass">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:StorableUnit" and @name=$name1]/../@xsi:type
		return data($a)
    </entry>
    
    <entry key= "insertNodeReturn">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and @name=$name1]//codeElement[@xsi:type="action:ActionElement" and @name="return" and @kind="return"]
		<![CDATA[
		return insert node <actionRelation /> as last into $a
		]]> 
    </entry>
    
     <entry key= "checkActionRelationReturn">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and @name=$name1]//codeElement[@xsi:type="action:ActionElement" and @name="return" and @kind="return"]/actionRelation/node-name()
		return $a
    </entry>
    
    <entry key= "insertAttributesReturn">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $name1 as xs:string external;
		declare variable $var1 as xs:string external;
  		declare variable $var2 as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:MethodUnit" and @name=$name1]//codeElement[@xsi:type="action:ActionElement" and @name="return" and @kind="return"]/actionRelation
		return insert node (attribute { $var1 } { $var2 }) as last into $a
    </entry>
    
    <entry key = "insertAttrLineStoU">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $packageName as xs:string external;
		declare variable $className as xs:string external;
		declare variable $fieldName as xs:string external;
		declare variable $attributeName as xs:string external;
		declare variable $attributeValue as xs:integer external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:Package" and @name=$packageName]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]//codeElement[@xsi:type="code:StorableUnit" and @name=$fieldName]//region
		return insert node (attribute { $attributeName } { $attributeValue })  as last into $a 
    </entry>
    
     <entry key = "insertAttrLineMU">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $packageName as xs:string external;
		declare variable $className as xs:string external;
		declare variable $methodName as xs:string external;
		declare variable $attributeName as xs:string external;
		declare variable $attributeValue as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:Package" and @name=$packageName]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]//codeElement[@xsi:type="code:MethodUnit" and @name=$methodName]/source/region
		return insert node (attribute { $attributeName } { $attributeValue })  as last into $a 
    </entry>
    
    <entry key = "insertAttrLineClass">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $packageName as xs:string external;
		declare variable $className as xs:string external;
		declare variable $attributeName as xs:string external;
		declare variable $attributeValue as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:Package" and @name=$packageName]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]/source/region
		return insert node (attribute { $attributeName } { $attributeValue })  as last into $a 
    </entry>
    
     <entry key = "insertAttrLineVariable">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $packageName as xs:string external;
		declare variable $className as xs:string external;
		declare variable $methodName as xs:string external;
		declare variable $variable as xs:string external;
		declare variable $attributeName as xs:string external;
		declare variable $attributeValue as xs:string external;
    
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:Package" and @name=$packageName]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]//codeElement[@xsi:type="code:MethodUnit" and @name=$methodName]//codeElement[@xsi:type="code:StorableUnit" and @name=$variable]/source/region
		return insert node (attribute { $attributeName } { $attributeValue })  as last into $a 
    </entry>
    
    <entry key = "getPathOfClassAnnotation">
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $className as xs:string external;
		
		let $a:= //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]/codeRelation
		let $b:=$a/annotation
		let $c:=$a/attribute
		return  concat($a//../data(@to),'-',$c/data(@value))
  
    </entry>
    
    <entry key = "getPathOfMethodAnnotation">
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $className as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type="code:ClassUnit" and @name=$className]//codeElement[@xsi:type="code:MethodUnit"]/codeRelation/annotation
		return concat($a//../data(@to),'-',$a//../../data(@name), '-', $a//../attribute/data(@value) )
  
    </entry>
    
     <entry key = "getActionRelation">	
		declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace functx = "http://www.functx.com";
		declare function functx:replace-first
		  ( $arg as xs:string? ,
		    $pattern as xs:string ,
		    $replacement as xs:string )  as xs:string {
		
		   replace($arg, concat('(^.*?)', $pattern),
		             concat('$1',$replacement))
		 } ;
		declare variable $action as xs:string external;
		
		let $combine := concat(?, '|', ?, '|',?,'|',?, '-')
		return string-join(
		   for $i in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//actionRelation[@xsi:type=$action]
		let $b:= string(path($i)) 
		let $c:= replace($b,'Q\{\}','')
		let $d:= tokenize($c, 'Segment\[[0-9]\]')[2]
		let $e:= replace($d,'\[','.')
		let $f:= replace($e,'\]','')
		let $g:= replace($f, '/','/@')
		let $h:= functx:replace-first($g, '/@model','//@model')   
		let $z:=data($i/@xsi:type)
		   
		return if (starts-with(string($i/@to), '/0/@model.0/') or starts-with(string($i/@to), '//@model.0/') ) then $combine($i/@to, $i/@from,$h,$z) else ""
		)
    </entry>
       
     <entry key = "query-3">
    	
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
			    
    </entry>
    
    <entry key = "createModel">
    	
	   declare namespace xmi="http://www.omg.org/XMI";
	   declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	   declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	   declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	   declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	   declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
	   	<![CDATA[ 
	   		insert node <model> </model> as last into //kdm:Segment 
	   	]]> 
	
    </entry>
    
     <entry key = "createModelAttr">
    	
	   declare namespace xmi="http://www.omg.org/XMI";
	   declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	   declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	   declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	   declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	   declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	   declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	   declare variable $xsiType as xs:string external;
	   declare variable $modelName as xs:string external;
		
	   for $a in  //kdm:Segment/model[last()]
	   return insert node (attribute { $xsiType } {$modelName }) as last into $a
	
    </entry>
    
    <entry key = "createStructureElement">
    	
	   declare namespace xmi="http://www.omg.org/XMI";
	   declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	   declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	   declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	   declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	   declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	   declare variable $component_name as xs:string external; 	
	   declare variable $parent as xs:string external; 	
	   declare variable $typeAbstraction as xs:string external; 	
	   declare variable $stereotype as xs:string external; 	
		
	   	<![CDATA[ 
			for $a in //kdm:Segment/model[@xsi:type="structure:StructureModel"]
			let $b := $a//structureElement[@name=$parent]
			return if (empty($b)) then
				insert node <structureElement name="{$component_name}" xsi:type="{$typeAbstraction}" implementation="" outAggregated="" inAggregated="" stereotype="{$stereotype}"> </structureElement> as last into $a
			else
				insert node <structureElement name="{$component_name}" xsi:type="{$typeAbstraction}" implementation="" outAggregated="" inAggregated="" stereotype="{$stereotype}"> </structureElement> as last into $b
		]]> 
	
    </entry>
    
    <entry key = "createStructureElementAttr">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $var as xs:string external;
	  declare variable $name as xs:string external;
		
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]/structureElement[last()]
	  return insert node (attribute { $var } {$name}) as last into $a
	  
    </entry>
    
    <entry key = "checkComponentExist">
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	  declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
      declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $componentName as xs:string external;
		
	  let $a:= //kdm:Segment/model[@xsi:type="structure:StructureModel" and @name != "externals"]//structureElement[@name = $componentName]
	  return if (empty($a)) then false() else true() 
   </entry>
   
   <entry key = "getComponentImplementations">
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare variable $componentName as xs:string external;
		
		let $a:= //kdm:Segment/model[@xsi:type="structure:StructureModel" and @name != "externals"]//structureElement[@name = $componentName]
		return $a/data(@implementation)
   </entry> 
   
    <entry key = "updateStructureElementAttr">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $attr as xs:string external;
	  declare variable $componentName as xs:string external;
	 
		
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]
	  return replace value of node $a/@implementation with $attr
	  
    </entry>
    
    <entry key= "getPathofAbstraction">
    
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare namespace functx = "http://www.functx.com";
		declare function functx:replace-first
				  ( $arg as xs:string? ,
				    $pattern as xs:string ,
				    $replacement as xs:string )  as xs:string {
				
				   replace($arg, concat('(^.*?)', $pattern),
				             concat('$1',$replacement))
				 } ;
		declare variable $componentName as xs:string external;
		
		for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]
		let $b:= string(path($a)) 
		let $c:= replace($b,'Q\{\}','')
		let $d:= tokenize($c, 'Segment\[[0-9]\]')[2]
		let $e:= replace($d,'\[','.')
		let $f:= replace($e,'\]','')
		let $g:= replace($f, '/','/@')
		let $h:= functx:replace-first($g, '/@model','//@model')   
		return $h
		
    </entry>
    
     <entry key = "checkAggregatedElement">
     
        declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	 	declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare variable $componentName as xs:string external;
		declare variable $from_ as xs:string external;
		declare variable $to_ as xs:string external;
	
		let $a:= //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]//aggregated[@from = $from_ and @to = $to_ ]
		return if(empty($a)) then false() else true()
     
     </entry>

	 <entry key = "createAggregatedElement">
    	
	   declare namespace xmi="http://www.omg.org/XMI";
	   declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	   declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	   declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	   declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	   declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	   declare variable $component_name as xs:string external; 	
	   declare variable $from_ as xs:string external; 	
	   declare variable $to_ as xs:string external; 
	   declare variable $relation as xs:string external;	
		
	   	<![CDATA[ 
			for $a in //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name=$component_name]			
			return insert node <aggregated from ="{$from_}"  to="{$to_}" relation="{$relation}" density='1'> </aggregated> as last into $a
		]]> 
	
    </entry>
    <entry key = "getAggregatedData">
    	
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare variable $componentName as xs:string external;
		declare variable $from_ as xs:string external;
		declare variable $to_ as xs:string external;
		
		for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]//aggregated[@from = $from_ and @to = $to_]
		return concat($a/data(@relation),'-',$a/data(@density))
		    
    </entry>
    
    
    <entry key = "updateStructureElementRelation">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $componentName as xs:string external;
	  declare variable $from_ as xs:string external;
	  declare variable $to_ as xs:string external;
	  declare variable $relation as xs:string external;
	 
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]//aggregated[@from = $from_ and @to = $to_]
	  return replace value of node $a/@relation with $relation
	  
    </entry>
    
     <entry key = "updateStructureElementDensity">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $componentName as xs:string external;
	  declare variable $from_ as xs:string external;
	  declare variable $to_ as xs:string external;
	  declare variable $density as xs:string external;
	  
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]//aggregated[@from = $from_ and @to = $to_]
	  return replace value of node $a/@density with $density
	  
    </entry>
    
    <entry key = "getPathOfAggregated">
    
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare namespace functx = "http://www.functx.com";
		declare function functx:replace-first
		( $arg as xs:string? ,
		   $pattern as xs:string ,
			    $replacement as xs:string )  as xs:string {
				
				   replace($arg, concat('(^.*?)', $pattern),
				             concat('$1',$replacement))
				 } ;
		
		declare variable $componentName as xs:string external;
		declare variable $from_ as xs:string external;
		declare variable $to_ as xs:string external;
		
		for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]/aggregated[@from =$from_ and @to=$to_]
		let $b:= string(path($a)) 
		let $c:= replace($b,'Q\{\}','')
		let $d:= tokenize($c, 'Segment\[[0-9]\]')[2]
		let $e:= replace($d,'\[','.')
		let $f:= replace($e,'\]','')
		let $g:= replace($f, '/','/@')
		let $h:= functx:replace-first($g, '/@model','//@model')   
		return $h
	    
    </entry>
    
    <entry key = "getOutAggregated">
    
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare variable $componentName as xs:string external;
		
		for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]/@outAggregated
		return data($a)
    
    </entry>
    
     <entry key = "getInAggregated">
    
	    declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
		declare variable $componentName as xs:string external;
		
		for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]/@inAggregated
		return data($a)
    
    </entry>
    
    <entry key = "updateOutAggregated">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $componentName as xs:string external;
	  declare variable $outAggregated as xs:string external;
	  
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]
	  return replace value of node $a/@outAggregated with $outAggregated
	  
   </entry>
   
    <entry key = "updateInAggregated">
    	
	  declare namespace xmi="http://www.omg.org/XMI";
	  declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	  declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
      declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	  declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
      declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	  declare namespace structure="http://www.eclipse.org/MoDisco/kdm/structure";
	  declare variable $componentName as xs:string external;
	  declare variable $inAggregated as xs:string external;
	  
	  for $a in  //kdm:Segment/model[@xsi:type="structure:StructureModel"]//structureElement[@name = $componentName]
	  return replace value of node $a/@inAggregated with $inAggregated
	  
   </entry>
   
   <entry key = "addAbstractionTag">
   
   	declare namespace xmi="http://www.omg.org/XMI";
	declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	
	<![CDATA[ 
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]//codeElement[@xsi:type='code:Package' or @xsi:type='code:ClassUnit' or @xsi:type='code:MethodUnit' or @xsi:type='code:StorableUnit'  ]
		return insert node <attribute tag="abstraction" value="None" > </attribute> as first into $a
	]]> 
   </entry> 
   
   <entry key = "createStereotype">
    	
	declare namespace xmi="http://www.omg.org/XMI";
	declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
	declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
	declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
	declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
	declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
	
	<![CDATA[ 
		insert node <extension xsi:type="kdm:ExtensionFamily" name="Adaptive System Domain">
	        <stereotype name="Monitor" type="structure:Component"/>
	        <stereotype name="Analyzer" type="structure:Component"/>
	        <stereotype name="Planner" type="structure:Component"/>
	        <stereotype name="Executor" type="structure:Component"/>
	        <stereotype name="Knowledge" type="structure:Component"/>
	        <stereotype name="Reference Input" type="structure:Component"/>
	        <stereotype name="Measured Output" type="structure:Component"/>
	        <stereotype name="CL Manager" type="structure:Component"/>
	        <stereotype name="Control Loop" type="structure:Component"/>
	        <stereotype name="Sensor" type="structure:Component"/>
	        <stereotype name="Effector" type="structure:Component"/>
	        <stereotype name="Managing Subsystem" type="structure:Subsystem"/>
	        <stereotype name="Managed Subsystem" type="structure:Subsystem"/>
        </extension>
		as last into //kdm:Segment 
	]]> 
	
   </entry>
    
</properties>


